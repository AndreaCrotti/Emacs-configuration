;;; wisent-ruby.wy: Lexer and parser support for wisent
;;; ruby grammar. 

;;; Copyright (C) 2007 Daniel Debertin (debertin@gmail.com)

;; This is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; This is not a complete ruby grammar. It parses out "infrastructure"
;; (i.e. classes, methods, and so on) declarations and makes them
;; available to the semantic framework, which is enough for
;; some tools, but a full Ruby grammar is under way that will
;; parse ALL ruby constructs.

;;; History:
;;
;;; Code:
;;


%package wisent-ruby-wy
%languagemode ruby-mode
%start stmts
%start parameters
;;%start expression

;; Local symbols
%token <identifier> IDENTIFIER
%token <rubystring> STRING_LITERAL
%token <rubyarray> ARRAY_LITERAL
%token <rubyregexp> REGEXP_LITERAL
%token <rubycmd> SHELL_COMMAND_LITERAL
%token <rubynumber> INTEGER_LITERAL
%token <rubyrange> RANGE_LITERAL
%token <rubyhash> HASH_LITERAL
%token <rubysymbol> SYMBOL_LITERAL
%token <rubyivar> VAR_INSTANCE
%token <rubycvar> VAR_CLASS
%token <rubygvar> VAR_GLOBAL
%token <rubyconst> CONSTANT
%token <rubylvar> VAR_LOCAL
%token <parenblock> PAREN_BLOCK
%token <braceblock> BRACE_BLOCK
%token <rubyblock> RUBY_BLOCK
%token <newline> NEWLINE

;; Language keyword tokens
;; This is the base list of reserved words. 
;; More will be added later.
%token FILE "__FILE__"
%put FILE summary "__FILE__: The current file"
%token LINE "__LINE__"
%put LINE summary "__LINE__: The current line"
%token BEGIN_BLOCK "BEGIN"
%put BEGIN_BLOCK summary "BEGIN { ... }"
%token END_BLOCK "END"
%put END_BLOCK summary "END { ... }"
%token ALIAS "alias"
%put ALIAS summary "ALIAS method1 method2"
%token AND "and"
%put AND summary "and: logical AND"
%token BEGIN "begin"
%put BEGIN summary "BEGIN ... [rescue,ensure] ... end"
%token BREAK "break"
%put BREAK summary "break: terminate current block"
%token CASE "case"
%put CASE summary "CASE <lhs> when <rhs> ... when <rhs> ... end"
%token CLASS "class"
%put CLASS summary "CLASS <classname> [< parentclass] ... end"
%token DEF "def"
%put DEF summary "DEF <method_name> ([method_args]) <method_body> end"
%token DEFINED_P "defined?"
%put DEFINED_P summary "defined?(<value>)"
%token DO "do"
%put DO summary "DO <body> end"
%token ELSE "else"
%put ELSE summary "if(<expression>) ... ELSE ... end"
%token ELSIF "elsif"
%put ELSIF summary "if(<expression>) ... ELSIF(<expression>) ... end"
%token END "end"
%put END summary "end: block end"
%token ENSURE "ensure"
%put ENSURE summary "begin ... ENSURE ... end"
%token FALSE "false"
%put FALSE summary "false: false value"
%token FOR "for"
%put FOR summary "FOR x in y ... end"
%token IF "if"
%put IF summary "IF(<expression>) ... end"
%token IN "in"
%put IN summary "for x IN y ... end"
%token MODULE "module"
%put MODULE summary "MODULE <module_name> <module_body> end"
%token NEXT "next"
%put NEXT summary "next: continue to next block iteration"
%token NIL "nil"
%put NIL summary "nil: no value"
%token NOT "not"
%put NOT summary "not: logical NOT"
%token OR "or"
%put OR summary "or: logical OR"
%token REDO "redo"
%put REDO summary "redo: try current iteration again"
%token RESCUE "rescue"
%put RESCUE summary "begin ... RESCUE [exception_name] <body> end"
%token RETRY "retry"
%put RETRY summary "begin ... rescue [exception] ... RETRY ... end"
%token RETURN "return"
%put RETURN summary "return: return control to the caller permanently"
%token SELF "self"
%put SELF summary "self: the current instance"
%token SUPER "super"
%put SUPER summary "super: the superclass method"
%token THEN "then"
%put THEN summary "if(<expression>) THEN ... end"
%token TRUE "true"
%put TRUE summary "true: true value"
%token UNDEF "undef"
%put UNDEF summary "I have no idea what this does"
%token UNLESS "unless"
%put UNLESS summary "UNLESS(<expression>) ... end"
%token UNTIL "until"
%put UNTIL summary "UNTIL(<expression>) ... end"
%token WHEN "when"
%put WHEN summary "case <lhs> WHEN <rhs> ... end"
%token WHILE "while"
%put WHILE summary "WHILE(<expression>) ... end"
%token YIELD "yield"
%put YIELD summary "yield: return control to the caller until called again"

;; Non-reserved words that are mixed into Object by Kernel
%token REQUIRE "require"
%put REQUIRE summary "require <file>"
%token ATTR_READER "attr_reader"
%put ATTR_READER summary "attr_reader <symbol_list>"
%token ATTR_WRITER "attr_writer"
%put ATTR_WRITER summary "attr_writer <symbol_list>"
%token ATTR_ACCESSOR "attr_accessor"
%put ATTR_ACCESSOR summary "attr_accessor <symbol_list>"
%token INCLUDE "include"
%put INCLUDE summary "INCLUDE <module_name>"
%token EXTEND "extend"
%put EXTEND summary "EXTEND <module_name>"
%token PROT_PUBLIC "public"
%put PROT_PUBLIC summary "public: public protection"
%token PROT_PROTECTED "protected"
%put PROT_PROTECTED summary "protected: class-level protection"
%token PROT_PRIVATE "private"
%put PROT_PRIVATE summary "private: instance-level protection"
%token LOOP "loop"
%put LOOP summary "loop .... end"
%token RAISE "raise"
%put RAISE summary "RAISE [<exception_type>] [<message>]"
%token CATCH "catch"
%put CATCH summary "CATCH <tag> do ...[throw <tag>] ... end"
%token THROW "throw"
%put THROW summary "THROW <anchor>[, <retval>]"
%token PROC "proc"
%put PROC summary "proc { [<|args|>] ... }"
%token LAMBDA "lambda"
%put LAMBDA summary "lambda { [<|args|>] ... }"

;; Block delimiters. Ruby blocks (do .. end, etc.) are specially
;; treated by the lexer and do not appear here.
%token <open-paren> LBRACK "["
%token <close-paren> RBRACK "]"
%token <open-paren> LPAREN "("
%token <close-paren> RPAREN ")"
%token <open-paren> LBRACE "{"
%token <open-paren> RBRACE "}"

;; Operators and other punctuation
%token <punctuation> EQUALS "="
%token <punctuation> PERIOD "."
%token <punctuation> EQUAL "=="
%token <punctuation> NEQUAL "!="
%token <punctuation> PLUS "+"
%token <punctuation> PLUS_EQ "+="
%token <punctuation> COMMA ","
%token <punctuation> BANG "!"
%token <punctuation> MODULUS "%"
%token <punctuation> MOD_EQ "%="
%token <punctuation> BITXOR "^"
%token <punctuation> BITXOR_EQ "^="
%token <punctuation> BITOR "|"
%token <punctuation> BITOR_EQ "|="
%token <punctuation> BITAND "&"
%token <punctuation> BITAND_EQ "&="
%token <punctuation> MULT "*"
%token <punctuation> MULT_EQ "*="
%token <punctuation> EXP "**"
%token <punctuation> EXP_EQ "**="
%token <punctuation> MINUS "-"
%token <punctuation> MINUS_EQ "-="
%token <punctuation> COMPLEMENT "~"
%token <punctuation> REGEX_EQ "=~"
%token <punctuation> COLON ":"
%token <punctuation> TERNARY_COND "?"
%token <punctuation> LT "<"
%token <punctuation> GT ">"
%token <punctuation> LTEQ "<="
%token <punctuation> GTEQ ">="
%token <punctuation> LTLT "<<"
%token <punctuation> GTGT ">>"
%token <punctuation> LTLT_EQ "<<="
%token <punctuation> GTGT_EQ ">>="
%token <punctuation> HEREDOC "<<-"
%token <punctuation> BACKQUOTE "`"
%token <punctuation> DIV "/"
%token <punctuation> DIV_EQ "/="
%token <punctuation> SEMICOLON ";"
%token <punctuation> LOG_AND "&&"
%token <punctuation> LOG_OR "||"
%token <punctuation> LOGAND_EQ "&&="
%token <punctuation> LOGOR_EQ "||="
%token <punctuation> NAMESPACE_DEREF "::"
%token <punctuation> OBJ_EQ "==="
%token <punctuation> HASH_REF "=>"

%%

stmts: ;; Empty program!
     | stmt
     | stmt separators stmts
     ;

;;stmt: expression opt_cond
;;    | definition opt_cond
;;    | simple_stmt opt_cond
;;    ;

stmt: expression
    | definition
    | simple_stmt
    ;

;; Like in Perl, every stmt can have a conditional attached to the end.
opt_cond: ;; Empty
	| conditional_exp
	;

separator: NEWLINE
	 | SEMICOLON
	 ;

separators: separator
	  | separator separators
	  ;

definition: method_def
	  | class_def
	  | module_def
	  ;

simple_stmt: require 
	   | super 
	   | alias 
	   | attr_decl 
	   | mixin 
	   | access_decl 
	   | loop_control 
	   | return 
	   | exception 
	   ;

require: REQUIRE STRING_LITERAL
	 (INCLUDE-TAG $2 nil)
       ;

super: SUPER opt_args
       (CODE-TAG "super" nil)
     ;

opt_args: ;; Empty
	| PAREN_BLOCK
	  (EXPANDFULL $1 parameters)
	;

parameters: ;; Empty
	  | LPAREN
	  | RPAREN
	  | parameter COMMA
	    (VARIABLE-TAG $1 nil nil)
	  | parameter RPAREN
	    (VARIABLE-TAG $1 nil nil)
	  ;

parameter: expression_term
	 | expression_term EQUALS literal
	 ;

alias: ALIAS IDENTIFIER IDENTIFIER
       (FUNCTION-TAG $2 "alias" nil nil)
     ;

attr_decl: ATTR_READER symbol_list
	   (TAG "reader" 'attribute :symbols $2)
	 | ATTR_WRITER symbol_list
	   (TAG "writer" 'attribute :symbols $2)
	 | ATTR_ACCESSOR symbol_list
	   (TAG "accessor" 'attribute :symbols $2)
	 ;

symbol_list: SYMBOL_LITERAL
	     (list $1)
	   | SYMBOL_LITERAL COMMA symbol_list
	     (append (list $1) $3)
	   ;

;; TODO: This should find the appropriate enclosing class
;; and update its list of interface-parents.
mixin: INCLUDE CONSTANT
       (CODE-TAG "mixin" nil)
     | EXTEND CONSTANT
       (CODE-TAG "mixin" nil)
     ;

protection: PROT_PUBLIC
	  | PROT_PROTECTED
	  | PROT_PRIVATE
	  ;

;; TODO: This should actually do something useful.
access_decl: protection
	     (set-current-protection-context $1)
	   | protection symbol_list
	     (dolist (sym $2)
	       (set-tag-protection sym $1))
	   ;

loop_control: BREAK opt_exp
	      (CODE-TAG "loop_control" 'break :value $2)
	    | NEXT opt_exp
	      (CODE-TAG "loop_control" 'next :value $2)
	    | REDO
	      (CODE-TAG "loop_control" 'redo)
	    | RETRY
	      (CODE-TAG "loop_control" 'retry)
	    | THROW SYMBOL_LITERAL opt_exp
	      (CODE-TAG "throw" $2 :value $3)
	    ;

opt_exp: ;; Empty
       | expression
       ;

return: RETURN opt_exp
	(CODE-TAG "return" nil)
      ;

expression_term: literal
	       | varref
	       | methodcall
	       ;

literal: STRING_LITERAL
       | ARRAY_LITERAL
       | REGEXP_LITERAL
       | SHELL_COMMAND_LITERAL
       | INTEGER_LITERAL
       | HASH_LITERAL
       | SYMBOL_LITERAL
       | boolean_literal
       | NIL
       ;

boolean_literal: TRUE
	       | FALSE
	       ;

varref: VAR_INSTANCE
      | VAR_CLASS
      | VAR_GLOBAL
      | CONSTANT
      | VAR_LOCAL
      ;

method_head: receiver IDENTIFIER
	   | IDENTIFIER
	   ;

methodcall: method_head
	  | method_head PAREN_BLOCK
	  | method_head code_block
	  | method_head PAREN_BLOCK code_block
	  ;


receiver: CONSTANT PERIOD
	| IDENTIFIER PERIOD
	| literal PERIOD
	; 

code_block: BRACE_BLOCK
	  | DO RUBY_BLOCK
	  ;

expression: operator_exp
	    (CODE-TAG "expression" nil)
	  | assignment_exp
	    (progn
	      (process-assignment-variables $1)
	      (CODE-TAG "assignment" nil))    ;; TODO: This should also emit a VARIABLE-TAG.
	  | block_exp
	    (CODE-TAG "block_expression" nil)
	  | conditional_exp
	    (CODE-TAG "cond_exp" nil)
	 ;;	  | ternary_exp               ;; TODO: These don't work yet.
;;	    (CODE-TAG "ternary_exp" nil)
	  | case_exp
	    (CODE-TAG "case" nil)
	  | iteration_exp
	    (CODE-TAG "iteration" nil)
	  | expression_term
	    (if (member $1 semantic-lex-ruby-assigned-vars)
		(CODE-TAG "expression_term" nil)
	      (CODE-TAG "methodcall" nil))
	  ;

expressions: expression
	   | expression bool_op expressions
	   ;

operator_exp: expression_term cmp_op expression_term
	    | expression_term cmp_op operator_exp
	    ;

assignment_exp: expression_term assn_op expression_term
		(list $1)
	      | expression_term assn_op assignment_exp
		(append (list $1) $3)
	      ;

block_exp: BEGIN inner_block END
	 ;

inner_block: RUBY_BLOCK
           | RUBY_BLOCK rescues
	   | RUBY_BLOCK ENSURE RUBY_BLOCK
	   | RUBY_BLOCK rescues ENSURE RUBY_BLOCK
	   ;

rescues: RESCUE RUBY_BLOCK
       | RESCUE exception_catch RUBY_BLOCK
       | RESCUE exception_catch RUBY_BLOCK rescues
       ;

exception_catch: CONSTANT
	       | CONSTANT HASH_REF IDENTIFIER
	       ;

conditional_exp_arg: expression
		   | PAREN_BLOCK
		   ;

aux_cond: ELSIF conditional_exp_arg opt_then RUBY_BLOCK
	| ELSIF conditional_exp_arg opt_then RUBY_BLOCK aux_cond
	| ELSE RUBY_BLOCK END
	;

conditional_exp: cond_kw conditional_exp_arg opt_then RUBY_BLOCK END
	       | cond_kw conditional_exp_arg opt_then RUBY_BLOCK aux_cond END
	       ;

cond_kw: IF
       | UNLESS
       ;

opt_then: ;; Empty
	| THEN
	;

ternary_exp: expression TERNARY_COND expression_term COLON expression_term
	   ;

case_exp: CASE IDENTIFIER when_blocks END
	;

when_blocks: WHEN IDENTIFIER RUBY_BLOCK
	   | WHEN IDENTIFIER RUBY_BLOCK when_blocks
	   | ELSE RUBY_BLOCK
	   ;

iteration_exp: cond_iter_kw conditional_exp_arg RUBY_BLOCK END
	     | FOR RUBY_BLOCK END
	     | LOOP DO RUBY_BLOCK END
	     | LOOP BRACE_BLOCK
	     ;

cond_iter_kw: WHILE
	    | UNTIL
	    ;

method_def: DEF IDENTIFIER opt_args RUBY_BLOCK END
	    (FUNCTION-TAG $2 "method" (if $3 (EXPANDFULL $3 parameters) nil))
	  ;

class_def: CLASS CONSTANT RUBY_BLOCK END
	   (TYPE-TAG $2 $1 (EXPANDFULL $3 stmts) nil)
	 | CLASS CONSTANT LT CONSTANT RUBY_BLOCK END
	   (TYPE-TAG $2 $1 (EXPANDFULL $5 stmts) (cons $4 nil))
	 ;

module_def: MODULE CONSTANT RUBY_BLOCK END
	    (TYPE-TAG $2 "module" (EXPANDFULL $3 stmts) nil)
	  ;

exception: RAISE 
	 | RAISE CONSTANT
	 | RAISE CONSTANT STRING_LITERAL
	 | RAISE STRING_LITERAL
	 ;






;; Infrastructure productions

cmp_op: EQUAL
      | NEQUAL
      | PLUS
      | MODULUS
      | BITXOR
      | BITOR
      | BITAND
      | MULT
      | EXP
      | MINUS
      | COMPLEMENT
      | REGEX_EQ
      | LT
      | GT
      | LTEQ
      | GTEQ
      | LTLT
      | GTGT
      | DIV
      | OBJ_EQ
      ;

bool_op: AND
       | OR
       | LOG_AND
       | LOG_OR
       ;

assn_op: EQUALS
       | PLUS_EQ
       | MOD_EQ
       | BITXOR_EQ
       | BITOR_EQ
       | BITAND_EQ
       | MULT_EQ
       | EXP_EQ
       | MINUS_EQ
       | LTLT_EQ
       | GTGT_EQ
       | DIV_EQ
       | LOGAND_EQ
       | LOGOR_EQ
       ;

;;; wisent-ruby.wy ends here