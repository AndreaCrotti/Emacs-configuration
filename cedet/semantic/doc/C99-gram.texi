\input texinfo   @c -*-texinfo-*-
@c
@c $Id: C99-gram.texi,v 1.2 2010-05-30 02:39:28 emacsman Exp $
@c
@setfilename C99-gram.info
@settitle The C99 context free grammar

@copying

Copyright @copyright{} 2003 David Ponce

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being list their titles, with the Front-Cover Texts
being list, and with the Back-Cover Texts being list.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License''.
@end quotation
@end copying

@dircategory Emacs
@direntry
* C99: (C99-gram).      The C99 context free grammar
@end direntry

@c Combine indices.
@synindex cp fn
@syncodeindex vr fn
@syncodeindex ky fn
@syncodeindex pg fn

@titlepage
@sp 6
@center @titlefont{The C99 context free grammar}
@sp 4
@author David Ponce (@email{david@dponce.com})
@page
@vskip 0pt plus 1 fill
@insertcopying
@end titlepage
@page

@node Top
@top The C99 context free grammar

This document contains the C context free grammar in
Wisent's input grammar format, for the C programming language as
defined in @cite{ISO/IEC 9899:1999 - Annex A - Language syntax
summary}.

@menu
* Lexical grammar::             
* Phrase structure grammar::    
* Preprocessing directives::    
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Lexical grammar

* Lexical elements::            
* Keywords::                    
* Identifiers::                 
* Universal character names::   
* Constants::                   
* String literals::             
* Punctuators::                 
* Header names::                
* Preprocessing numbers::       

Phrase structure grammar

* Expressions::                 
* Declarations::                
* Statements::                  
* External definitions::        

@end detailmenu
@end menu

@node Lexical grammar
@chapter Lexical grammar

@menu
* Lexical elements::            
* Keywords::                    
* Identifiers::                 
* Universal character names::   
* Constants::                   
* String literals::             
* Punctuators::                 
* Header names::                
* Preprocessing numbers::       
@end menu

@node Lexical elements
@section Lexical elements

@example
token:
    keyword
  | identifier
  | constant
  | string-literal
  | punctuator
  ;

preprocessing-token:
    header-name
  | identifier
  | pp-number
  | character-constant
  | string-literal
  | punctuator
  | ;; each non-white-space character that cannot be one of the above
  ;
@end example

@node Keywords
@section Keywords

@example
keyword:
    @code{auto}     | @code{_Bool}   | @code{_Complex} | @code{_Imaginary} | @code{break}
  | @code{case}     | @code{char}    | @code{const}    | @code{continue}   | @code{default}
  | @code{do}       | @code{double}  | @code{else}     | @code{enum}       | @code{extern}
  | @code{float}    | @code{for}     | @code{goto}     | @code{if}         | @code{inline}
  | @code{int}      | @code{long}    | @code{register} | @code{restrict}   | @code{return}
  | @code{short}    | @code{signed}  | @code{sizeof}   | @code{static}     | @code{struct}
  | @code{switch}   | @code{typedef} | @code{union}    | @code{unsigned}   | @code{void}
  | @code{volatile} | @code{while}
  ;
@end example

@node Identifiers
@section Identifiers

@example
identifier:
    identifier-nondigit
  | identifier identifier-nondigit
  | identifier digit
  ;

identifier-nondigit:
    nondigit
  | universal-character-name
  | ;; other implementation-defined characters
  ;

nondigit:
    @code{[_a-zA-Z]}
  ;

digit:
    @code{[0-9]}
  ;
@end example

@node Universal character names
@section Universal character names

@example
universal-character-name:
    @code{\u} hex-quad
  | @code{\U} hex-quad hex-quad
  ;

hex-quad:
    hexadecimal-digit hexadecimal-digit
    hexadecimal-digit hexadecimal-digit
  ;
@end example

@node Constants
@section Constants

@example
constant:
    integer-constant
  | floating-constant
  | enumeration-constant
  | character-constant
  ;

integer-constant:
    decimal-constant integer-suffix-opt
  | octal-constant integer-suffix-opt
  | hexadecimal-constant integer-suffix-opt
  ;

decimal-constant:
    nonzero-digit
  | decimal-constant digit
  ;

octal-constant:
    @code{0}
  | octal-constant octal-digit
  ;

hexadecimal-constant:
    hexadecimal-prefix hexadecimal-digit
  | hexadecimal-constant hexadecimal-digit
  ;

hexadecimal-prefix:
   @code{0x} | @code{0X}
  ;

nonzero-digit:
    @code{[1-9]}
  ;

octal-digit:
    @code{[0-7]}
  ;

hexadecimal-digit:
    @code{[0-9a-fA-F]}
  ;

integer-suffix:
    unsigned-suffix long-suffix-opt
  | unsigned-suffix long-long-suffix
  | long-suffix unsigned-suffix-opt
  | long-long-suffix unsigned-suffix-opt
  ;

unsigned-suffix:
    @code{[uU]}
  ;

long-suffix:
    @code{[lL]}
  ;

long-long-suffix:
    @code{ll} | @code{LL}
  ;

floating-constant:
    decimal-floating-constant
  | hexadecimal-floating-constant
  ;

decimal-floating-constant:
    fractional-constant exponent-part-opt floating-suffix-opt
  | digit-sequence exponent-part floating-suffix-opt
  ;

hexadecimal-floating-constant:
    hexadecimal-prefix hexadecimal-fractional-constant
    binary-exponent-part floating-suffix-opt
  | hexadecimal-prefix hexadecimal-digit-sequence
    binary-exponent-part floating-suffix-opt
  ;

fractional-constant:
    digit-sequence-opt @code{.} digit-sequence
  | digit-sequence @code{.}
  ;

exponent-part:
    @code{e} sign-opt digit-sequence
  | @code{E} sign-opt digit-sequence
  ;

sign:
    @code{[+-]}
  ;

digit-sequence:
    digit
  | digit-sequence digit
  ;

hexadecimal-fractional-constant:
    hexadecimal-digit-sequence-opt @code{.} hexadecimal-digit-sequence
  | hexadecimal-digit-sequence @code{.}
  ;

binary-exponent-part:
    @code{p} sign-opt digit-sequence
  | @code{P} sign-opt digit-sequence
  ;

hexadecimal-digit-sequence:
    hexadecimal-digit
  | hexadecimal-digit-sequence hexadecimal-digit
  ;

floating-suffix:
    @code{[flFL]}
  ;

enumeration-constant:
    identifier
  ;

character-constant:
    @code{'} c-char-sequence @code{'}
  | @code{L'} c-char-sequence @code{'}
  ;

c-char-sequence:
    c-char
  | c-char-sequence c-char
  ;

c-char:
 ;; any member of the source character set except the
 ;; single-quote ', backslash \, or new-line character
  | escape-sequence
  ;

escape-sequence:
    simple-escape-sequence
  | octal-escape-sequence
  | hexadecimal-escape-sequence
  | universal-character-name
  ;

simple-escape-sequence:
    @code{\'} | @code{\"} | @code{\?} | @code{\\}
  | @code{\a} | @code{\b} | @code{\f} | @code{\n} | @code{\r} | @code{\t} | @code{\v}
  ;

octal-escape-sequence:
    @code{\} octal-digit
  | @code{\} octal-digit octal-digit
  | @code{\} octal-digit octal-digit octal-digit
  ;

hexadecimal-escape-sequence:
    @code{\x} hexadecimal-digit
  | hexadecimal-escape-sequence hexadecimal-digit
  ;
@end example

@node String literals
@section String literals

@example
string-literal:
    @code{"} s-char-sequence-opt @code{"}
  | @code{L"} s-char-sequence-opt @code{"}
  ;

s-char-sequence:
    s-char
  | s-char-sequence s-char
  ;

s-char:
 ;; any member of the source character set except the
 ;; double-quote ", backslash \, or new-line character
  | escape-sequence
  ;
@end example

@node Punctuators
@section Punctuators

@example
punctuator:
  | @code{[}   | @code{]}   | @code{(}  | @code{)}  | @code{@{}  | @code{@}}   | @code{.}  | @code{->}
  | @code{++}  | @code{--}  | @code{&}  | @code{*}  | @code{+}  | @code{-}   | @code{~}  | @code{!}
  | @code{/}   | @code{%}   | @code{<<} | @code{>>} | @code{<}  | @code{>}   | @code{<=} | @code{>=}
  | @code{==}  | @code{!=}  | @code{^}  | @code{|}  | @code{&&} | @code{||}  | @code{?}  | @code{:}
  | @code{;}   | @code{@dots{}} | @code{=}  | @code{*=} | @code{/=} | @code{%=}  | @code{+=} | @code{-=}
  | @code{<<=} | @code{>>=} | @code{&=} | @code{^=} | @code{|=} | @code{,}   | @code{#}  | @code{##}
  | @code{<:}  | @code{:>}  | @code{<%} | @code{%>} | @code{%:} | @code{%:%:}
  ;
@end example

@node Header names
@section Header names

@example
header-name:
    @code{<} h-char-sequence @code{>}
  | @code{"} q-char-sequence @code{"}
  ;

h-char-sequence:
    h-char
  | h-char-sequence h-char
  ;

h-char:
 ;; any member of the source character set except
 ;; the new-line character and >
  ;

q-char-sequence:
    q-char
  | q-char-sequence q-char
  ;

q-char:
 ;; any member of the source character set except
 ;; the new-line character and '
  ;
@end example

@node Preprocessing numbers
@section Preprocessing numbers

@example
pp-number:
    digit
  | @code{.} digit
  | pp-number digit
  | pp-number identifier-nondigit
  | pp-number @code{e} sign
  | pp-number @code{E} sign
  | pp-number @code{p} sign
  | pp-number @code{P} sign
  | pp-number @code{.}
  ;
@end example

@node Phrase structure grammar
@chapter Phrase structure grammar

@menu
* Expressions::                 
* Declarations::                
* Statements::                  
* External definitions::        
@end menu

@node Expressions
@section Expressions

@example
primary-expr:
    identifier
  | constant
  | string-literal
  | @code{(} expression @code{)}
  ;

postfix-expr:
    primary-expr
  | postfix-expr @code{[} expression @code{]}
  | postfix-expr @code{(} argument-expr-list-opt @code{)}
  | postfix-expr @code{.}  identifier
  | postfix-expr @code{->} identifier
  | postfix-expr @code{++}
  | postfix-expr @code{--}
  | @code{(} type-name @code{)} @code{@{} initializer-list @code{@}}
  | @code{(} type-name @code{)} @code{@{} initializer-list @code{,} @code{@}}
  ;

argument-expr-list:
    assignment-expr
  | argument-expr-list @code{,} assignment-expr
  ;

unary-expr:
    postfix-expr
  | @code{++} unary-expr
  | @code{--} unary-expr
  | unary-operator cast-expr
  | @code{sizeof} unary-expr
  | @code{sizeof} @code{(} type-name @code{)}
  ;

unary-operator:
    @code{&} | @code{*} | @code{+} | @code{-} | @code{~} | @code{!}
  ;

cast-expr:
    unary-expr
  | @code{(} type-name @code{)} cast-expr
  ;

multiplicative-expr:
    cast-expr
  | multiplicative-expr @code{*} cast-expr
  | multiplicative-expr @code{/} cast-expr
  | multiplicative-expr @code{%} cast-expr
  ;

additive-expr:
    multiplicative-expr
  | additive-expr @code{+} multiplicative-expr
  | additive-expr @code{-} multiplicative-expr
  ;

shift-expr:
    additive-expr
  | shift-expr @code{<<} additive-expr
  | shift-expr @code{>>} additive-expr
  ;

relational-expr:
    shift-expr
  | relational-expr @code{<}  shift-expr
  | relational-expr @code{>}  shift-expr
  | relational-expr @code{<=} shift-expr
  | relational-expr @code{>=} shift-expr
  ;

equality-expr:
    relational-expr
  | equality-expr @code{==} relational-expr
  | equality-expr @code{!=} relational-expr
  ;

AND-expr:
    equality-expr
  | AND-expr @code{&} equality-expr
  ;

exclusive-OR-expr:
    AND-expr
  | exclusive-OR-expr @code{^} AND-expr
  ;

inclusive-OR-expr:
    exclusive-OR-expr
  | inclusive-OR-expr @code{|} exclusive-OR-expr
  ;

logical-AND-expr:
    inclusive-OR-expr
  | logical-AND-expr @code{&&} inclusive-OR-expr
  ;

logical-OR-expr:
    logical-AND-expr
  | logical-OR-expr @code{||} logical-AND-expr
  ;

conditional-expr:
    logical-OR-expr
  | logical-OR-expr @code{?} expression @code{:} conditional-expr
  ;

assignment-expr:
    conditional-expr
  | unary-expr assignment-operator assignment-expr
  ;

assignment-operator:
    @code{=}   | @code{*=}  | @code{/=} | @code{%=} | @code{+=} | @code{-=}
  | @code{<<=} | @code{>>=} | @code{&=} | @code{^=} | @code{|=}
  ;

expression:
    assignment-expr
  | expression @code{,} assignment-expr
  ;

constant-expr:
    conditional-expr
  ;
@end example

@node Declarations
@section Declarations

@example
declaration:
    declaration-specifiers init-declarator-list-opt @code{;}
  ;

declaration-specifiers:
    storage-class-specifier declaration-specifiers-opt
  | type-specifier declaration-specifiers-opt
  | type-qualifier declaration-specifiers-opt
  | function-specifier declaration-specifiers-opt
  ;

init-declarator-list:
    init-declarator
  | init-declarator-list @code{,} init-declarator
  ;

init-declarator:
    declarator
  | declarator @code{=} initializer
  ;

storage-class-specifier:
    @code{typedef} | @code{extern} | @code{static} | @code{auto} | @code{register}
  ;

type-specifier:
    @code{void}     | @code{char}  | @code{short}    | @code{int}
  | @code{long}     | @code{float} | @code{double}   | @code{signed}
  | @code{unsigned} | @code{_Bool} | @code{_Complex} | @code{_Imaginary}
  | struct-or-union-specifier
  | enum-specifier
  | typedef-name
  ;

struct-or-union-specifier:
    struct-or-union identifier-opt @code{@{} struct-declaration-list @code{@}}
  | struct-or-union identifier
  ;

struct-or-union:
    @code{struct} | @code{union}
  ;

struct-declaration-list:
    struct-declaration
  | struct-declaration-list struct-declaration
  ;

struct-declaration:
    specifier-qualifier-list struct-declarator-list @code{;}
  ;

specifier-qualifier-list:
    type-specifier specifier-qualifier-list-opt
  | type-qualifier specifier-qualifier-list-opt
  ;

struct-declarator-list:
    struct-declarator
  | struct-declarator-list @code{,} struct-declarator
  ;

struct-declarator:
    declarator
  | declarator-opt @code{:} constant-expr
  ;

enum-specifier:
    @code{enum} identifier-opt @code{@{} enumerator-list @code{@}}
  | @code{enum} identifier-opt @code{@{} enumerator-list @code{,} @code{@}}
  | @code{enum} identifier
  ;

enumerator-list:
    enumerator
  | enumerator-list @code{,} enumerator
  ;

enumerator:
    enumeration-constant
  | enumeration-constant @code{=} constant-expr
  ;

type-qualifier:
    @code{const} | @code{restrict} | @code{volatile}
  ;

function-specifier:
    @code{inline}
  ;

declarator:
    pointer-opt direct-declarator
  ;

direct-declarator:
    identifier
  | @code{(} declarator @code{)}
  | direct-declarator @code{[} type-qualifier-list-opt assignment-expr-opt @code{]}
  | direct-declarator @code{[} @code{static} type-qualifier-list-opt assignment-expr @code{]}
  | direct-declarator @code{[} type-qualifier-list @code{static}  assignment-expr @code{]}
  | direct-declarator @code{[} type-qualifier-list-opt @code{*} @code{]}
  | direct-declarator @code{(} parameter-type-list @code{)}
  | direct-declarator @code{(} identifier-list-opt @code{)}
  ;

pointer:
    @code{*} type-qualifier-list-opt
  | @code{*} type-qualifier-list-opt pointer
  ;

type-qualifier-list:
    type-qualifier
  | type-qualifier-list type-qualifier
  ;

parameter-type-list:
    parameter-list
  | parameter-list @code{,} @code{@dots{}}
  ;

parameter-list:
    parameter-declaration
  | parameter-list @code{,} parameter-declaration
  ;

parameter-declaration:
    declaration-specifiers declarator
  | declaration-specifiers abstract-declarator-opt
  ;

identifier-list:
    identifier
  | identifier-list @code{,} identifier
  ;

type-name:
    specifier-qualifier-list abstract-declarator-opt
  ;

abstract-declarator:
    pointer
  | pointer-opt direct-abstract-declarator
  ;

direct-abstract-declarator:
    @code{(} abstract-declarator @code{)}
  | direct-abstract-declarator-opt @code{[} assignment-expr-opt @code{]}
  | direct-abstract-declarator @code{[} @code{*} @code{]}
  | direct-abstract-declarator-opt @code{(} parameter-type-list-opt @code{)}
  ;

typedef-name:
    identifier
  ;

initializer:
    assignment-expr
  | @code{@{} initializer-list @code{@}}
  | @code{@{} initializer-list @code{,} @code{@}}
  ;

initializer-list:
    designation-opt initializer
  | initializer-list @code{,} designation-opt initializer
  ;

designation:
    designator-list @code{=}
  ;

designator-list:
    designator
  | designator-list designator
  ;

designator:
    @code{[} constant-expr @code{]}
  | @code{.} identifier
  ;
@end example

@node Statements
@section Statements

@example
statement:
    labeled-statement
  | compound-statement
  | expression-statement
  | selection-statement
  | iteration-statement
  | jump-statement
  ;

labeled-statement:
    identifier @code{:} statement
  | @code{case} constant-expr @code{:} statement
  | @code{default} @code{:} statement
  ;

compound-statement:
    @code{@{} block-item-list-opt @code{@}}
  ;

block-item-list:
    block-item
  | block-item-list block-item
  ;

block-item:
    declaration
  | statement
  ;

expression-statement:
    expr-opt @code{;}
  ;

selection-statement:
    @code{if} @code{(} expression @code{)} statement
  | @code{if} @code{(} expression @code{)} statement @code{else} statement
  | @code{switch} @code{(} expression @code{)} statement
  ;

iteration-statement:
    @code{while} @code{(} expression @code{)} statement
  | @code{do} statement @code{while} @code{(} expression @code{)} @code{;}
  | @code{for} @code{(} expr-opt @code{;} expr-opt @code{;} expr-opt @code{)} statement
  | @code{for} @code{(} declaration expr-opt @code{;} expr-opt @code{)} statement
  ;

jump-statement:
    @code{goto} identifier @code{;}
  | @code{continue} @code{;}
  | @code{break} @code{;}
  | @code{return} expr-opt @code{;}
  ;
@end example

@node External definitions
@section External definitions

@example
translation-unit:
    external-declaration
  | translation-unit external-declaration
  ;

external-declaration:
    function-definition
  | declaration
  ;

function-definition:
    declaration-specifiers declarator
    declaration-list-opt compound-statement
  ;

declaration-list:
    declaration
  | declaration-list declaration
  ;
@end example

@node Preprocessing directives
@chapter Preprocessing directives

@example
preprocessing-file:
    group-opt
  ;

group:
    group-part
  | group group-part
  ;

group-part:
    if-section
  | control-line
  | text-line
  | @code{#} non-directive
  ;

if-section:
    if-group elif-groups-opt else-group-opt endif-line
  ;

if-group:
    @code{#} @code{if}     constant-expr new-line group-opt
  | @code{#} @code{ifdef}  identifier new-line group-opt
  | @code{#} @code{ifndef} identifier new-line group-opt
  ;

elif-groups:
    elif-group
  | elif-groups elif-group
  ;

elif-group:
    @code{#} @code{elif}   constant-expr new-line group-opt
  ;

else-group:
    @code{#} @code{else}   new-line group-opt
  ;

endif-line:
    @code{#} @code{endif}  new-line
  ;

control-line:
    @code{#} @code{include} pp-tokens new-line
  | @code{#} @code{define}  identifier replacement-list new-line
  | @code{#} @code{define}  identifier lparen identifier-list-opt @code{)}
    replacement-list new-line
  | @code{#} @code{define}  identifier lparen @code{@dots{}} @code{)}
    replacement-list new-line
  | @code{#} @code{define}  identifier lparen identifier-list @code{,} @code{@dots{}} @code{)}
    replacement-list new-line
  | @code{#} @code{undef}   identifier new-line
  | @code{#} @code{line}    pp-tokens new-line
  | @code{#} @code{error}   pp-tokens-opt new-line
  | @code{#} @code{pragma}  pp-tokens-opt new-line
  | @code{#}           new-line
  ;

text-line:
    pp-tokens-opt new-line
  ;

non-directive:
    pp-tokens new-line
  ;

lparen:
 ;; a @code{(} character not immediately preceded by white-space
  ;

replacement-list:
    pp-tokens-opt
  ;

pp-tokens:
    preprocessing-token
    pp-tokens preprocessing-token
  ;

new-line:
 ;; the new-line character
  ;
@end example

@node Index
@unnumbered Index

@printindex fn

@c Print the tables of contents
@summarycontents
@contents
@c That's all
@bye

@c  LocalWords:  Wisent automagically wisent
