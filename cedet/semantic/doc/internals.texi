@ignore
@node Semantic Internals
@chapter Semantic Internals
@c This 'ignore' section fools texinfo-all-menus-update into creating
@c proper menus for this chapter.
@end ignore

This chapter provides an overview of the internals of @semantic{}.
This information would not be needed by neither application developers
nor grammar developers.

It would be useful mostly for the hackers who would like to learn
more about how @semantic{} works.

@menu
* Parser code ::        Code used for the parsers
* Tag handling ::       Code used for manipulating tags
* Semanticdb ::         Code used in the semantic database
* Analyzer ::           Code used in the code analyzer
* Tools ::              Code used in user tools.
* Tests ::              Code used for testing.
@end menu

@node Parser code
@section Parser code

@semantic{} parsing code is spread across a range of files.

@table @file
@item semantic.el
The core infrastructure sets up buffers for parsing, and has all the
core parsing routines.  Most parsing routines are overloadable, so the
actual implementation may be somewhere else.

@item semantic-edit.el
Incremental reparse based on user edits.

@item semantic-grammar.el
@itemx semantic-grammar.wy
Parser for the different grammar languages, and a major mode for
editing grammars in Emacs.

@item semantic-lex.el
Infrastructure for implementing lexical analyzers.  Provides macros
for creating individual analyzers for specific features, and a way to
combine them together.

@item semantic-lex-spp.el
Infrastructure for a lexical symbolic preprocessor.  This was written
to implement the C preprocessor, but could be used for other lexical
preprocessors.

@item bovine/bovine-grammar.el
@itemx bovine/bovine-grammar-macros.el
@itemx bovine/semantic-bovine.el
The ``bovine'' grammar.  This is the first grammar mode written for
@semantic{} and is useful for simple creating simple parsers.

@item wisent/wisent.el
@itemx wisent/bison-wisent.el
@itemx wisent/semantic-wisent.el
@itemx wisent/semantic-debug-grammar.el
A port of bison to Emacs.  This infrastructure lets you create LALR
based parsers for @semantic{}.

@item semantic-ast.el
Manage Abstract Syntax Trees for parsers.

@item semantic-debug.el
Infrastructure for debugging grammars.

@item semantic-util.el
Various utilities for manipulating tags, such as describing the tag
under point, adding labels, and the all important
@code{semantic-something-to-tag-table}.

@end table

@node Tag handling
@section Tag handling

A tag represents an individual item found in a buffer, such as a
function or variable.  Tag handling is handled in several source
files.

@table @file
@item semantic-tag.el
Basic tag creation, queries, cloning, binding, and unbinding.

@item semantic-tag-write.el
Write a tag or tag list to a stream.  These routines are used by
@file{semanticdb-file.el} when saving a list of tags.

@item semantic-tag-file.el
Files associated with tags.  Goto-tag, file for include, and file for
a prototype.

@item semantic-tag-ls.el
Language dependant features of a tag, such as parent calculation, slot
protection, and other states like abstract, virtual, static, and leaf.

@item semantic-dep.el
Include file handling.  Contains the include path concepts, and
routines for looking up file names in the include path.

@item semantic-format.el
Convert a tag into a nicely formatted and colored string.  Use
@code{semantic-test-all-format-tag-functions} to test different output
options.

@item semantic-find.el
Find tags matching different conditions in a tag table.
These routines are used by @file{semanticdb-find.el} once the database
has been converted into a simpler tag table.

@item semantic-sort.el
Sorting lists of tags in different ways.  Includes sorting a plain
list of tags forward or backward.  Includes binning tags based on
attributes (bucketize), and tag adoption for multiple references to
the same thing.

@item semantic-doc.el
Capture documentation comments from near a tag.

@end table

@node Semanticdb
@section Semanticdb

@acronym{Semanticdb} complexity is certainly an issue.  It is a rather
hairy problem to try and solve.

@table @file
@item semanticdb.el
Defines a @dfn{database} and a @dfn{table} base class.  You can
instantiate these classes, and use them, but they are not persistent.

This file also provides support for @code{semanticdb-minor-mode},
which automatically associates files with tables in databases so that
tags are @emph{saved} while a buffer is not in memory.

The database and tables both also provide applicate cache information,
and cache flushing system.  The semanticdb search routines use caches
to save datastructures that are complex to calculate.

Lastly, it provides the concept of @dfn{project root}.  It is a system
by which a file can be associated with the root of a project, so if
you have a tree of directories and source files, it can find the root,
and allow a tag-search to span all available databases in that
directory hierarchy.

@item semanticdb-file.el
Provides a subclass of the basic table so that it can be saved to
disk.  Implements all the code needed to unbind/rebind tags to a
buffer and writing them to a file.

@item semanticdb-el.el
Implements a special kind of @dfn{system} database that uses Emacs
internals to perform queries.

@item semanticdb-ebrowse.el
Implements a system database that uses Ebrowse to parse files into a
table that can be queried for tag names.  Successful tag hits during a
find causes @semantic{} to pick up and parse the reference files to
get the full details.

@item semanticdb-find.el
Infrastructure for searching groups @semantic{} databases, and dealing
with the search results format.

@item semanticdb-ref.el
Tracks crossreferences.   Cross references are needed when buffer is
reparsed, and must alert other tables that any dependant caches may
need to be flushed.  References are in the form of include files.

@end table

@node Analyzer
@section Analyzer

The @semantic{} analyzer is a complex engine which has been broken
down across several modules.  When the @semantic{} analyzer fails,
start with @code{semantic-analyze-debug-assist}, then dive into some
of these files.

@table @file
@item semantic-analyze.el
The core analyzer for defining the @dfn{current context}.  The
current context is an object that contains references to aspects of
the local context including the current prefix, and a tag list
defining what the prefix means.

@item semantic-analyze-complete.el
Provides @code{semantic-analyze-possible-completions}.

@item semantic-analyze-debug.el
The analyzer debugger.  Useful when attempting to get everything
configured.

@item semantic-analyze-fcn.el
Various support functions needed by the analyzer.

@item semantic-ctxt.el
Local context parser.  Contains overloadable functions used to move
around through different scopes, get local variables, and collect the
current prefix used when doing completion.

@item semantic-scope.el
Calculate @dfn{scope} for a location in a buffer.  The scope includes
local variables, and tag lists in scope for various reasons, such as
C++ using statements.

@item semanticdb-typecache.el
The typecache is part of @code{semanticdb}, but is used primarilly by
the analyzer to look up datatypes and complex names.  The typecache is
bound across source files and builds a master lookup table for data
type names.

@item semantic-ia.el
Interactive Analyzer functions.  Simple routines that do completion or
lookups based on the results from the Analyzer.  These routines are
meant as examples for application writers, but are quite useful as
they are.

@item semantic-ia-sb.el
Speedbar support for the analyzer, displaying context info, and
completion lists.

@end table

@node Tools
@section Tools

These files contain various tools a user can use.

@table @file
@item semantic-idle.el
Idle scheduler for @semantic{}.  Manages reparsing buffers after
edits, and large work tasks in idle time.  Includes modes for showing
summary help and pop-up completion.

@item senator.el
The @semantic{} navigator.  Provides many ways to move through a
buffer based on the active tag table.

@item semantic-decorate.el
A minor mode for decorating tags based on details from the parser.
Includes overlines for functions, or coloring class fields based on
protection.

@item semantic-decorate-include.el
A decoration mode for include files, which assists users in setting up
parsing for their includes.

@item semantic-complete.el
Advanced completion prompts for reading tag names in the minibuffer, or
inline in a buffer.

@item semantic-imenu.el
Imenu support for using @semantic{} tags in imenu.

@item semantic-mru-bookmark.el
Automatic bookmarking based on tags.  Jump to locations you've been
before based on tag name.

@item semantic-sb.el
Support for @semantic{} tag usage in Speedbar.

@item semantic-util-modes.el
A bunch of small minor-modes that exposes aspects of the semantic
parser state.  Includes @code{semantic-stickyfunc-mode}.

@item document.el
@itemx document-vars.el
Create an update comments for tags.

@item semantic-adebug.el
Extensions of @file{data-debug.el} for @semantic{}.

@item semantic-chart.el
Draw some charts from stats generated from parsing.


@item semantic-elp.el
Profiler for helping to optimize the @semantic{} analyzer.


@end table

@node Tests
@section Tests

@table @file

@item semantic-utest.el
Basic testing of parsing and incremental parsing for most supported
languages.

@item semantic-ia-utest.el
Test the semantic analyzer's ability to provide smart completions.

@item semantic-utest-c.el
Tests for the C parser's lexical pre-processor.

@item semantic-regtest.el
Regression tests from the older Semantic 1.x API.

@end table

@c  LocalWords:  Cscope JDEE BeanShell JavaScript MySQL Semanticdb
