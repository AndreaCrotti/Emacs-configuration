@ignore
@node Installation
@chapter Installation and Basic Configuration
@c This 'ignore' section fools texinfo-all-menus-update into creating
@c proper menus for this chapter.
@end ignore

Semantic should be installed as a part of the CEDET distribution.  See
the cedet/INSTALL file in the cedet distribution for basic
installation instructions of the CEDET suite, plus canned
configurations for the entire CEDET suite.

These chapters dig into more detail for configuring @semantic{}
components beyond the basics of CEDET.

@menu
* Canned Configuration::
* Search Optimization::
* Parsing Optimization::
@end menu

@node Canned Configuration
@section Canned Configuration

As described briefly in the cedet/INSTALL file, there are several
canned configurations you can use.  These configuration files just
turn different semantic modes on and off, but don't change intrinsic
semantic parsing behaviors.

You can optionally skip using any of the canned configurations by
enabling your preferred subset individually in your @file{.emacs} file.

@deffn Command semantic-load-enable-minimum-features
@anchor{semantic-load-enable-minimum-features}
Enable the minimum number of semantic features for basic usage.

These minimum features are designed to allow @semantic{} to 
maintain the parsing data necessary needed by various tools while
intruding on your typical editing practices as little as possible.

The features enabled are:
@table @asis
@item @dfn{semantic-idle-scheduler-mode}
Keeps a buffer's parse tree up to date.
(@pxref{(semantic-user)Idle Scheduler}.)
@item @code{semanticdb-minor-mode}
Stores tags in when a buffer is not in memory.
Also stores tags in save files when Emacs is not running.
(@pxref{(semantic-user)semanticdb}.)
@item @dfn{semanticdb-load-system-caches}
Loads any systemdbs created earlier, such as EBrowse databases.
This loading features makes the database available, but won't spend
time reading in large database files.
@item @dfn{semanticdb-load-ebrowse-caches}
Loads any ebrowse dbs created earlier.
(@pxref{(semantic-user)Create System Databases}.)
(@pxref{(semantic-user)semanticdb}.)
@end table
@end deffn

@deffn Command semantic-load-enable-all-exuberent-ctags-support
@anchor{semantic-enable-all-exuberent-ctags-support}
Enable all ectag supported backend support features.
This includes:
@table @asis
@item semanticdb backend support 
Using exuberent ctags as a semanticdb backend allows for faster
first-time parsing of files for supported languages, such as C/C++.
@item buffer parsing using ectags for some modes.
Some languages do not have regular all Lisp Semantic parsers.  This
command enables the use of Exuberent ctags as the main parser for some
languages, such as for Borne Shell scripts.
@end table

Any mode that has been tested to work will be added to this function.
@end deffn

@deffn Command semantic-load-enable-code-helpers
@anchor{semantic-load-enable-code-helpers}
Enable some semantic features that provide minimal coding assistance.

This feature set is setup to provide useful features for code writing
that do not change the typical Emacs editing experience very much.

This includes @dfn{semantic-load-enable-minimum-features} plus:
@table @dfn
@item imenu
Lists Semantic generated tags in the menubar.
@item semantic-idle-summary-mode
Show a summary for the tag indicated by code under point.
Some code editors call this intellisense.
(@pxref{(semantic-user)Idle Summary Mode}.)
@item senator-minor-mode
Semantic Navigator Mode.  This mode provides a keymap and global menu
for navigation by tags, and modifying a buffer based on tag structure.
It also provides access to various other minor @semantic{}-enabled
features that do not have their own minor mode, or their own
keybindings.  (@pxref{(semantic-user)senator}.)
@item semantic-mru-bookmark-mode
Provides a `switch-to-buffer' like keybinding for tag names.  This
mode automatically creates a bookmark ring as you edit, and allows
your to navigate back through places you've been.
(@pxref{(semantic-user)MRU Bookmarks Mode}.)
@end table
@end deffn

@deffn Command semantic-load-enable-gaudy-code-helpers
@anchor{semantic-load-enable-gaudy-code-helpers}
Enable semantic features that provide gaudy coding assistance.

These features modify the Emacs display of your code, or can change
your editing experience.

This includes @dfn{semantic-load-enable-code-helpers}.
@table @dfn
@item semantic-idle-completions-mode
Provide smart symbol completion automatically at idle time.
The default behavior is to cause suggestions to appear next to the
cursor when the cursor sits idle.
(@pxref{(semantic-user)Idle Completions Mode}.)
@item semantic-stickyfunc-mode
Tracks current function in header-line (when available).
Requires Emacs 21 or later.
(@pxref{(semantic-user)Sticky Function Mode}.)
@item semantic-decoration-mode
Decorate tags based on various attributes.
By default, this includes drawing a line in front of functions, and
highlighting include files.
(@pxref{(semantic-user)Tag Decoration Mode}.)
@end table

@obsolete{semantic-load-enable-guady-code-helpers,semantic-load-enable-gaudy-code-helpers}
@end deffn

@deffn Command semantic-load-enable-excessive-code-helpers
@anchor{semantic-load-enable-excessive-code-helpers}
Enable all semantic features that provide coding assistance.
This includes all features of @dfn{semantic-load-enable-code-helpers} plus:
@table @dfn
@item protected/private decoration
Enables the decoration styles for highlighting struct/class members
that are either protected, or privately scoped.  Requires that
@code{semantic-decoration-mode} is enabled.
@item which-func-mode
Display the current function in the mode line.
@end table


@end deffn

@deffn Command semantic-load-enable-semantic-debugging-helpers
@anchor{semantic-load-enable-semantic-debugging-helpers}
Enable all semantic features that assist with debugging semantic.
These modes include:
@table @dfn
@item semantic-highlight-edits-mode
Highlight text that has been edited since the last parse step.
(@pxref{(semantic-user)Highlight Edits Mode}.)
@item semantic-show-unmatched-syntax-mode
Highlight lexical tokens which failed to be parsed.
(@pxref{(semantic-user)Unmatched Syntax Highlighting}.)
@item semantic-show-parser-state-mode
Show the current buffer state via small indicators in the mode line.
(@pxref{(semantic-user)Parser State}.)
@end table

@end deffn


@node Search Optimization
@section Search Optimization

A common use of @semantic{} is for smart completion and tag browsing.
These operations involve searching through the tags of your files.
For complete documentation on configuring your searches,
@ref{(semantic-user)Semanticdb Search Configuration}.

The default configuration is for the most complete set of searches
possible.  During idle services, the slowest options are disabled.

@subsection Search Throttle

Searching is controlled with @code{semanticdb-find-default-throttle}.
If you want to speed up parsing by disabling searches in system
headers, you might add code like this for C mode.

@example
(setq-mode-local c-mode
                 semanticdb-find-default-throttle
                 '(project unloaded recursive))
                 ;; Remove 'system from the throttle
@end example


@subsection System Include Paths

If you want @semantic{} to find symbols from system libraries, you
will need to update the system include path.

You can find headers at a system level by configuring an include path.
@xref{(semantic-user)Include paths}.

For C/C++ code, @semantic{} will automatically try to setup the system
include path based on the output of @code{gcc -v} using
@code{semantic-gcc-setup}.  If you want to use a different version of
GCC than what is found with ``gcc'', you will need to call the setup
function in your @file{.emacs} before loading your first @file{.c}
file.

@example
(semantic-gcc-setup "mygcc")
@end example

You can customize your include paths with the function
@code{semantic-add-system-include}.  For example, if you were to be
working on a linux kernel, you might opt to configure your search path
in your @file{.emacs} file with code like this:

@example
(semantic-reset-system-include 'c-mode)
(semantic-add-system-include "/usr/src/linux-2.4/include" 'c-mode)
@end example

It is also useful to find and install extra search engine back-ends,
such @xref{(semantic-user)Create System Databases}.  Ebrowse is one
such back-end for C and C++ code.

You might create an ebrowse database for your C include files like
this:

@example
M-x semanticdb-create-ebrowse-database RET /usr/include/ RET
@end example

This will create the database, save it, and add it to the database
search list for your C and C++ based projects.  These databases will
be created in your @file{~/.semanticdb} directory to be reloaded in
future Emacs sessions.

Unfortunately, EBROWSE does not support all the features needed by
@semantic{}, so you will find that @semantic{} will need to go and
reparse those files later when they are needed.

@subsection Project Include Path

Finding files included into a program file requires knowing the
include path.

Finding files within a project path is more complex.  One way is to
teach @semantic{} about your project, and add an entry to
@code{semanticdb-project-roots}.  See
@xref{(semantic-user)Semanticdb Search Configuration}, or 
@xref{(semantic-user)SemanticDB project roots}.
@refill

Alternately, setup an EDE project.  Using the 
@inforef{top, EDE project system, ede} to allow finer grained control
on how Semantic will find header files.  You can use EDE to create a
project and create your Makefiles for you, or you can create a simple
project that allows configuration of just this piece is covered in
@xref{(ede)Simple projects}.
@refill

One style of a simple project is the
@inforef{ede-cpp-root, EDE CPP Root, ede} project.  This is a simple
way to provide access to a C/C++ project via EDE to Semantic.

@node Parsing Optimization
@section Parsing Optimization

The @semantic{} parsers generate the tags that form the basis of all the
semantic based tools, such as browsers and completion.  Keeping those
tags up to date can have performance implications.

Here are some common tasks you may be interested in:

@subsection Don't parse certain buffers

You can inhibit parsing using the @code{semantic-inhibit-functions}
variable. 

@defvar semantic-inhibit-functions
@anchor{semantic-inhibit-functions}
List of functions to call with no arguments before @semantic{} sets up
a buffer.
If any of these functions returns non-@code{nil}, the current buffer is not
setup to use Semantic.
@end defvar

You could have this inhibit parsing in very large files, or files
which cause particular problems to semantic.


@subsection Parsing in idle time

Tags are usually kept up to date when Emacs is idle
@ref{(semantic-user)Idle Scheduler}.  The @semantic{} idle-scheduler
automatically updates the tags in various buffers before executing
specific idle modes, such as summary mode.

You might choose to tune the scheduler with some code like this in
your @file{.emacs} file:

@example
;; Increase the delay before activation
(setq semantic-idle-scheduler-idle-time 10)
;; Don't reparse really big buffers.
(setq semantic-idle-scheduler-max-buffer-size 100000)
@end example

There is also a secondary idle services that runs after a longer
delay.  The secondary idle service will perform large scale parsing of
any file @semantic{} thinks you may need to reference, and then saves
all the databases.

You might want to tune the scheduler timer in your @file{.emacs} file
like this:

@example
;; Increase the delay before doing slow work to 2 minutes.
(setq semantic-idle-scheduler-work-idle-time 120)
@end example

