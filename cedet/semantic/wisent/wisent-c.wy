;;; wisent-c.wy -- LALR grammar that produces Semantic tags for C
;;
;; Copyright (C) 2003 David Ponce
;;
;; Author: David Ponce <david@dponce.com>
;; Maintainer: David Ponce <david@dponce.com>
;; Created: 13 Jun 2003
;; Keywords: syntax
;; X-RCS: $Id: wisent-c.wy,v 1.4 2005/09/30 20:23:15 zappo Exp $
;;
;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:
;;
;; The context free grammar of the C programming language, defined in
;; document "ISO/IEC 9899:1999 - Annex A - Language syntax summary",
;; served as a starting point to write this WY grammar.  The info
;; file doc/C99-gram.info describes the C99 syntax in WY format.
;;

%{
  (require 'semantic-ast)
  %}

;;%package wisent-c-wy

%languagemode  c-mode

;; Tokens
%token <symbol>        IDENTIFIER  "an ordinary identifier"
%token <symbol>        TYPEDEFNAME "a typedef name"
%token <symbol>        PP_INCLUDE  "#include"
%token <number>        NUMBER
%token <string>        CHAR_OR_STRING

%token <open-paren>    LPAREN-DECL "(" ;; around declarator
%token <close-paren>   RPAREN-DECL ")" ;; around declarator
%token <open-paren>    LPAREN      "(" ;; around parameter list
%token <close-paren>   RPAREN      ")" ;; around parameter list
%token <open-paren>    LBRACK      "[" ;; or <:
%token <close-paren>   RBRACK      "]" ;; or :>
%token <open-paren>    LBRACE      "{" ;; or <%
%token <close-paren>   RBRACE      "}" ;; or %>

%token <semantic-list> PAREN_BLOCK "()"
%token <semantic-list> BRACE_BLOCK "{}"
%token <semantic-list> BRACK_BLOCK "[]"

%token <punctuation>   ELIPSIS     "..."
%token <punctuation>   COMMA       ","
%token <punctuation>   EQ          "="
%token <punctuation>   SEMIC       ";"
%token <punctuation>   COLON       ":"
%token <punctuation>   QUESTION    "?"
%token <punctuation>   DOT         "."
%token <punctuation>   PLUS        "+"
%token <punctuation>   MINUS       "-"
%token <punctuation>   STAR        "*"
%token <punctuation>   SLASH       "/"
%token <punctuation>   PERCENT     "%"
%token <punctuation>   HAT         "^" ;; or xor
%token <punctuation>   AND         "&" ;; or bitand
%token <punctuation>   OR          "|" ;; or bitor
%token <punctuation>   TILDE       "~" ;; or compl
%token <punctuation>   NOT         "!" ;; or not
%token <punctuation>   PLUS_EQ     "+="
%token <punctuation>   MINUS_EQ    "-="
%token <punctuation>   STAR_EQ     "*="
%token <punctuation>   SLASH_EQ    "/="
%token <punctuation>   PERCENT_EQ  "%="
%token <punctuation>   HAT_EQ      "^=" ;; or xor_eq
%token <punctuation>   AND_EQ      "&=" ;; or and_eq
%token <punctuation>   OR_EQ       "|=" ;; or or_eq
%token <punctuation>   LT          "<"
%token <punctuation>   GT          ">"
%token <punctuation>   LTLT        "<<"
%token <punctuation>   GTGT        ">>"
%token <punctuation>   GTGT_EQ     ">>="
%token <punctuation>   LTLT_EQ     "<<="
%token <punctuation>   EQEQ        "=="
%token <punctuation>   NE          "!=" ;; or not_eq
%token <punctuation>   LE          "<="
%token <punctuation>   GE          ">="
%token <punctuation>   ANDAND      "&&" ;; or and
%token <punctuation>   OROR        "||" ;; or or
%token <punctuation>   INCR        "++"
%token <punctuation>   DECR        "--"
%token <punctuation>   ARROW       "->"
%token <punctuation>   HASHHASH    "##" ;; or %:%:
%token <punctuation>   HASH        "#"  ;; or %:

%token TYPEDEF         "typedef"
%token ENUM            "enum"
%token STRUCT          "struct"
%token UNION           "union"
%token AUTO            "auto"
%token REGISTER        "register"
%token EXTERN          "extern"
%token ASM             "asm"
%token INLINE          "inline"
%token STATIC          "static"
%token CONST           "const"
%token RESTRICT        "restrict"
%token VOLATILE        "volatile"
%token CHAR            "char"
%token SHORT           "short"
%token INT             "int"
%token LONG            "long"
%token SIGNED          "signed"
%token UNSIGNED        "unsigned"
%token FLOAT           "float"
%token DOUBLE          "double"
%token VOID            "void"
%token BOOL            "_Bool"
%token COMPLEX         "_Complex"
%token IMAGINARY       "_Imaginary"
%token CASE            "case"
%token DEFAULT         "default"
%token IF              "if"
%token ELSE            "else"
%token SWITCH          "switch"
%token WHILE           "while"
%token DO              "do"
%token FOR             "for"
%token BREAK           "break"
%token CONTINUE        "continue"
%token GOTO            "goto"
%token RETURN          "return"
%token SIZEOF          "sizeof"

%start goal

%%

;;; Expressions (Semantic just eat expressions)
;;

assignment-expr:
    constant-expr
  ;

constant-expr:
    term
  | constant-expr term
  ;

term:
    operand
  | operator
  ;

operand:
    identifier-or-typedef-name
  | NUMBER
  | CHAR_OR_STRING
  | skip-paren-block
  | skip-brack-block
  | skip-brace-block
  ;

operator:
    AND
  | ANDAND
  | AND_EQ
  | ARROW
  | COLON
  | DECR
  | DOT
  | EQ
  | EQEQ
  | GE
  | GT
  | GTGT
  | GTGT_EQ
  | HAT
  | HAT_EQ
  | INCR
  | LE
  | LT
  | LTLT
  | LTLT_EQ
  | MINUS
  | MINUS_EQ
  | NE
  | NOT
  | OR
  | OROR
  | OR_EQ
  | PERCENT
  | PERCENT_EQ
  | PLUS
  | PLUS_EQ
  | QUESTION
  | SIZEOF
  | SLASH
  | SLASH_EQ
  | STAR
  | STAR_EQ
  | TILDE
  ;

;;; Declarations
;;

declaration:
    declaration-0
    (let ((decl (AST-GET        $1 :decl-list))
          (type (AST-GET-STRING $1 :type))
          (spec (AST-GET        $1 :specifiers))
          ;; TBD: variable default-value, arrays and pointers.
          )
      ;; Function prototypes in `decl-list' will be expanded as
      ;; function tag by `wisent-c-expand-tag'.
      (EXPANDTAG
       (VARIABLE-TAG decl type nil :typemodifiers spec))
      )
  ;

declaration-0:
    declaration-specifiers init-declarator-list SEMIC
    (AST-MERGE $1 $2)
  | declaration-specifiers SEMIC
    (let ((decl (AST-ADD nil :id "*anonymous*" :location $region)))
      (AST-ADD $1 :decl-list decl)
      )
  ;

declaration-specifiers:
    storage-class-specifier declaration-specifiers
    (AST-ADD $2  :specifiers $1)
  | storage-class-specifier
    (AST-ADD nil :specifiers $1)
  | type-specifier declaration-specifiers
    (AST-ADD $2  :type $1)
  | type-specifier
    (AST-ADD nil :type $1)
  | type-qualifier declaration-specifiers
    (AST-ADD $2  :specifiers $1)
  | type-qualifier
    (AST-ADD nil :specifiers $1)
  | function-specifier declaration-specifiers
    (AST-ADD $2  :specifiers $1)
  | function-specifier
    (AST-ADD nil :specifiers $1)
  ;

init-declarator-list:
    init-declarator
    (AST-ADD nil :decl-list $1)
  | init-declarator-list COMMA init-declarator
    (AST-ADD $1  :decl-list $3)
  ;

init-declarator:
    declarator
    (AST-ADD $1 :location $region)
  | declarator EQ initializer
 ;; TBD: variable default-value
    (AST-ADD $1 :location $region)
  ;

storage-class-specifier:
    TYPEDEF
  | EXTERN
  | STATIC
  | AUTO
  | REGISTER
  ;

type-specifier:
    simple-type-specifier
  | struct-or-union-specifier
  | enum-specifier
  ;

simple-type-specifier:
    VOID
  | CHAR
  | SHORT
  | INT
  | LONG
  | FLOAT
  | DOUBLE
  | SIGNED
  | UNSIGNED
  | BOOL
  | COMPLEX
  | IMAGINARY
  | typedef-name
  ;

struct-or-union-specifier:
    struct-or-union skip-brace-block
    (AST-ADD nil :type "*anonymous*" :specifiers $1)
  | struct-or-union identifier-or-typedef-name skip-brace-block
    (AST-ADD nil :type $2 :specifiers $1)
  | struct-or-union identifier-or-typedef-name
    (AST-ADD nil :type $2 :specifiers $1)
  ;

struct-or-union:
    STRUCT
    (progn
      (setq wisent-c-identifier t)
      $1)
  | UNION
    (progn
      (setq wisent-c-identifier t)
      $1)
  ;

enum-specifier:
    enum skip-brace-block
    (AST-ADD nil :type "*anonymous*" :specifiers $1)
  | enum identifier-or-typedef-name skip-brace-block
    (AST-ADD nil :type $2 :specifiers $1)
  | enum identifier-or-typedef-name
    (AST-ADD nil :type $2 :specifiers $1)
  ;

enum:
    ENUM
    (progn
      (setq wisent-c-identifier t)
      $1)
  ;

identifier-or-typedef-name:
    IDENTIFIER
  | typedef-name
  ;

typedef-name:
    TYPEDEFNAME
  ;

type-qualifier:
    CONST
  | RESTRICT
  | VOLATILE
  ;

function-specifier:
    INLINE
  ;

declarator:
    pointer direct-declarator
    (AST-MERGE $1 $2)
  | direct-declarator
  ;

direct-declarator:
    IDENTIFIER
    (AST-ADD nil :id $1)
  | LPAREN-DECL declarator RPAREN-DECL
    (progn $2)
  | direct-declarator skip-brack-block
  | direct-declarator LPAREN parameter-list-opt RPAREN
    (AST-MERGE $1 $3)
  ;

pointer:
    STAR type-qualifier-list
    (AST-ADD $2 :pointer $1)
  | STAR
    (AST-ADD nil :pointer $1)
  | STAR type-qualifier-list pointer
    (AST-MERGE (AST-ADD $2 :pointer $1) $3)
  | STAR pointer
    (AST-ADD $2 :pointer $1)
  ;

type-qualifier-list:
    type-qualifier
    (AST-ADD nil :specifiers $1)
  | type-qualifier-list type-qualifier
    (AST-ADD $2  :specifiers $1)
  ;

;; To avoid conflicts, parameter-type-list and identifier-list are
;; unified.  Only function declaration in K&R style use an
;; identifier-list (followed by a corresponding declaration-list) for
;; parameters.  This is not an issue because this grammar only use the
;; declaration-list to produce tags for parameters.
parameter-list-opt:
 ;;EMPTY
    (AST-PUT nil :parms nil)
  | parameter-list
    (AST-PUT nil :parms $1)
  ;

parameter-list:
    parameter-declaration
  | parameter-list COMMA parameter-declaration
    (nconc $1 $3)
  ;

parameter-declaration:
 ;; Normally `...' must be the last item after a non empty parameter
 ;; type list.  For simplicity, this grammar relaxes that constraint,
 ;; and consider `...' like other parameters.
    ELIPSIS
    (EXPANDTAG
     (VARIABLE-TAG "..." "va_list" nil)
     )
  | declaration-specifiers parameter-declarator
    (let* ((ast  (AST-MERGE $1 $2))
           (decl (AST-GET        ast :decl-list))
           (type (AST-GET-STRING ast :type))
           (spec (AST-GET        ast :specifiers))
           ;; TBD: variable default-value, arrays and pointers.
           )
      ;; Function prototypes in `decl-list' will be expanded as
      ;; function tag by `wisent-c-expand-tag'.
      (EXPANDTAG
       (VARIABLE-TAG decl type nil :typemodifiers spec))
      )
  | declaration-specifiers
    (let ((ast $1))
      (EXPANDTAG
       (VARIABLE-TAG
        "*empty*"
        (AST-GET-STRING ast :type)
        nil                     ;; TBD: default-value
        :typemodifiers (AST-GET ast :specifiers))
       ))
  ;

parameter-declarator:
    declarator
    (AST-ADD nil :decl-list (AST-ADD $1 :location $region))
  | abstract-declarator
    (AST-ADD nil :decl-list (AST-ADD $1 :id "*abstract*"
                                     :location $region))
  ;

abstract-declarator:
    pointer
  | pointer direct-abstract-declarator
    (AST-MERGE $1 $2)
  | direct-abstract-declarator
  ;

direct-abstract-declarator:
    LPAREN-DECL abstract-declarator RPAREN-DECL
    (progn $2)
  | direct-abstract-declarator skip-brack-block
  | skip-brack-block
  | direct-abstract-declarator LPAREN parameter-list-opt RPAREN
    (AST-MERGE $1 $3)
  | LPAREN parameter-list-opt RPAREN
    (progn $2)
  ;

initializer:
    assignment-expr
  ;

compound-statement:
    skip-brace-block
  ;

;;; External definitions
;;

goal
  : translation-unit
 ;; Generate a special token 'goal that will be post-processed by
 ;; `wisent-c-expand-tag' to extract the actual tags in $1.
    (TAG "goal" 'goal :tree $1)
  ;

translation-unit:
    external-declaration
  | translation-unit external-declaration
    (nconc $2 $1)
  ;

external-declaration:
    function-definition
  | declaration
  | include
  | error
    (wisent-c-skip 'statement)
  ;

function-definition:
    function-definition-0
    (let* ((name (AST-GET1       $1 :id))
           (type (AST-GET-STRING $1 :type))
           (args (AST-GET1       $1 :parms))
           (spec (AST-GET        $1 :specifiers)))
      (EXPANDTAG
       (FUNCTION-TAG name type args :typemodifiers spec))
      )
  ;

function-definition-0:
    declaration-specifiers declarator declaration-list compound-statement
    (let ((ast (AST-MERGE $1 $2)))
      (AST-PUT ast :parms (nreverse $3)))
  | declaration-specifiers declarator compound-statement
    (AST-MERGE $1 $2)
  ;

declaration-list:
    declaration
  | declaration-list declaration
    (nconc $2 $1)
  ;

;;;  Preprocessing directives
;;

include:
    include-0
    (when $1
      (EXPANDTAG
       (INCLUDE-TAG $1 nil)
       ))
  ;

include-0:
    PP_INCLUDE LT pp-tokens GT
    (concat $2 $3 $4)
  | PP_INCLUDE CHAR_OR_STRING
    (progn $2)
  | PP_INCLUDE error
    (wisent-c-skip 'line)
  ;

pp-tokens:
    pp-token
  | pp-tokens pp-token
    (concat $1 $2)
  ;

pp-token:
    any-symbol
  | DOT
  | SLASH
  ;

any-symbol:
    IDENTIFIER
  | TYPEDEFNAME
  | TYPEDEF
  | ENUM
  | STRUCT
  | UNION
  | AUTO
  | REGISTER
  | EXTERN
  | ASM
  | INLINE
  | STATIC
  | CONST
  | RESTRICT
  | VOLATILE
  | CHAR
  | SHORT
  | INT
  | LONG
  | SIGNED
  | UNSIGNED
  | FLOAT
  | DOUBLE
  | VOID
  | BOOL
  | COMPLEX
  | IMAGINARY
  | CASE
  | DEFAULT
  | IF
  | ELSE
  | SWITCH
  | WHILE
  | DO
  | FOR
  | BREAK
  | CONTINUE
  | GOTO
  | RETURN
  | SIZEOF
  ;

;;; Misc.
;;
skip-paren-block:
    LPAREN RPAREN
    ()
  | LPAREN-DECL RPAREN-DECL
    ()
 ;; Any token encountered after the left parenthesis causes a parse
 ;; error that skips the block.
  | LPAREN error
    (wisent-skip-block)
  | LPAREN-DECL error
    (wisent-skip-block)
  ;

skip-brace-block:
    LBRACE RBRACE
    ()
 ;; Any token encountered after the left brace causes a parse error
 ;; that skips the block.
  | LBRACE error
    (wisent-skip-block)
  ;

skip-brack-block:
    LBRACK RBRACK
    ()
 ;; Any token encountered after the left bracket causes a parse error
 ;; that skips the block.
  | LBRACK error
    (wisent-skip-block)
  ;

%%

;;; wisent-c.wy ends here
