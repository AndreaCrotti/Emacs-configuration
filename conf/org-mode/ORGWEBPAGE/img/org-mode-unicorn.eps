%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: org-mode-unicorn.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: greg newman
%%CreationDate: 6/17/09
%%BoundingBox: 0 0 145 160
%%HiResBoundingBox: 0 0 144.9874 159.5621
%%CropBox: 0 0 144.9874 159.5621
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-06-17T18:49:27-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2009-06-17T18:49:27-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2009-06-17T18:49:27-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>236</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADsAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXi/8Azkv+a935T8vQeXdAuDH5r8wfu4GiP7y3ta8ZJgf2&#xA;WY/Ah+ZG64kqA8o/5xluPMWn/nBJodrqF1eabLYTXOuRSyO0XqkIVm4klefNkAY70YjIwlYtlIUa&#xA;fX+SYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpZ5o1+&#xA;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&#xA;3vU8VdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:028011740720681195FEA3D28F371B88</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:028011740720681195FEA3D28F371B88</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:018011740720681195FEA3D28F371B88</stRef:instanceID>
            <stRef:documentID>xmp.did:018011740720681195FEA3D28F371B88</stRef:documentID>
            <stRef:originalDocumentID>uuid:77EA639A2458DE1187B5976BC1A2F96D</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:77EA639A2458DE1187B5976BC1A2F96D</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:018011740720681195FEA3D28F371B88</stEvt:instanceID>
                  <stEvt:when>2009-06-17T18:48:37-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:028011740720681195FEA3D28F371B88</stEvt:instanceID>
                  <stEvt:when>2009-06-17T18:49:27-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>162.121094</stDim:w>
            <stDim:h>175.757324</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=49 G=75 B=73 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>49</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>73</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=187 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>187</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=119 G=170 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=160 G=77 B=50 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>160</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>50</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -159.562 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 159.562 li
144.987 159.562 li
144.987 0 li
cp
clp
[1 0 0 1 0 0 ]ct
68.0312 44.3398 mo
68.7768 45.4639 69.6934 46.5186 69.6934 46.5186 cv
69.6934 46.5186 68.8179 45.7295 68.0312 44.3398 cv
57.3379 50.6729 mo
57.2651 51.1015 57.1948 51.5015 57.126 51.8892 cv
57.1631 51.0571 57.211 50.1753 57.2686 49.2431 cv
57.2935 49.6782 57.3193 50.1475 57.3379 50.6729 cv
70.751 46.1499 mo
70.6255 46.2056 li
70.7407 46.104 li
70.751 46.1499 li
141.044 59.4487 mo
140.839 56.2983 138.202 55.0825 135.051 57.3237 cv
127.832 56.0268 120.746 56.6372 117.251 56.3428 cv
109.589 55.27 103.21 51.2144 103.21 51.2144 cv
104.142 49.9756 103.696 47.2969 97.7119 47.1138 cv
96.0664 46.5722 94.376 45.7871 92.7793 45.1343 cv
93.3232 43.9897 92.6465 42.2983 92.6465 42.2983 cv
95.081 41.6264 95.4541 38.456 94.4941 36.5894 cv
97.6006 36.6733 97.1064 31.8711 96.6768 30.2085 cv
99.1113 29.2852 99.4473 26.3779 98.4395 24.0796 cv
101.378 23.4082 101.462 19.9658 101.21 17.5312 cv
104.232 17.3633 103.813 12.0742 103.813 10.9824 cv
106.416 9.3037 105.828 7.03663 106.237 4.40965 cv
107.843 1.15965 105.66 .236347 104.121 3.6992 cv
102.47 6.7007 100.353 8.00975 100.371 10.227 cv
101.126 11.4863 94.7461 13.3335 96.7607 17.2793 cv
95.333 19.0425 91.9756 21.3091 93.169 24.0127 cv
92.5625 25.3389 88.2812 28.4453 90.1279 31.3838 cv
86.0986 34.0703 86.3389 34.7187 87.1894 37.1767 cv
86.042 37.9126 84.8711 39.0391 84.1943 40.2705 cv
82.875 38.7026 81.5918 35.8413 81.6104 31.9766 cv
81.6104 28.7012 75.5117 32.2949 75.5117 38.7603 cv
75.5117 39.3164 75.4551 39.8208 75.377 40.3027 cv
73.2666 40.5459 70.6255 41.0093 67.2974 41.7964 cv
67.1909 41.8696 67.1401 41.9824 67.1152 42.1128 cv
66.9844 41.6275 66.8838 41.1113 66.8379 40.56 cv
66.2563 36.77 61.9038 31.0005 59.7813 38.1265 cv
58.6851 40.7373 58.0415 42.5181 57.6665 43.915 cv
57.6665 43.9145 li
57.6665 43.9145 57.3306 44.1402 56.71 44.5244 cv
54.0908 46.146 53.1479 51.2105 43.6348 54.4077 cv
40.4234 55.4868 36.2349 56.353 30.6758 56.8022 cv
21.1074 57.5757 2.78857 74.1172 1.56251 89.8999 cv
1.2793 93.8638 1.87208 103.637 5.15821 112.209 cv
5.16358 112.229 li
5.21141 112.351 li
5.26316 112.485 5.31447 112.618 5.36719 112.75 cv
5.64697 113.467 5.9458 114.155 6.26171 114.812 cv
8.14696 118.84 10.7222 122.402 14.1958 124.694 cv
15.96 126.07 17.5381 126.952 18.5674 127.456 cv
24.4746 137.205 37.0093 149.708 60.6421 142.315 cv
96.8975 132.031 116.905 156.124 119.21 157.815 cv
122.609 161.248 110.424 127.98 84.6231 113.027 cv
69.3701 104.705 78.9453 90.3706 80.0381 85.3091 cv
80.0381 85.3091 92.2647 93.8657 101.125 80.7891 cv
104.979 81.7818 108.22 81.4796 111.314 81.1774 cv
114.646 80.852 117.806 80.5266 121.376 81.8189 cv
125.559 83.6519 143.146 82.5444 136.61 72.7144 cv
140.721 70.0312 141.154 70.8989 143.21 66.8145 cv
144.315 61.8628 141.808 60.8032 141.044 59.4487 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.266697 .769772 .868132 .18674 cmyk
f
68.0312 44.3398 mo
66.7812 45.169 li
67.5985 46.3983 68.5391 47.4753 68.5611 47.5025 cv
69.6934 46.5186 li
70.6976 45.4043 li
70.3578 45.7813 li
70.7027 45.409 li
70.6976 45.4043 li
70.3578 45.7813 li
70.7027 45.409 li
70.6797 45.3897 69.9645 44.714 69.3366 43.6009 cv
68.0312 44.3398 li
66.7812 45.169 li
68.0312 44.3398 li
66.7259 45.0788 li
67.6296 46.6706 68.6107 47.5597 68.6891 47.6328 cv
70.8256 45.5347 li
70.7929 45.4966 li
70.6287 45.3057 69.8704 44.4009 69.2812 43.5107 cv
66.7259 45.0788 li
68.0312 44.3398 li
57.3379 50.6729 mo
55.859 50.4219 li
55.7872 50.8451 55.7176 51.2409 55.6491 51.6269 cv
57.126 51.8892 li
58.6245 51.956 li
58.6611 51.1342 58.7085 50.2607 58.7657 49.3357 cv
57.2686 49.2431 li
55.771 49.3289 li
55.7958 49.7617 55.8209 50.2181 55.8388 50.7258 cv
57.3379 50.6729 li
55.859 50.4219 li
57.3379 50.6729 li
58.837 50.6199 li
58.8178 50.0768 58.7911 49.5947 58.7661 49.1574 cv
55.7714 49.1506 li
55.7134 50.0898 55.665 50.9801 55.6275 51.8223 cv
58.6029 52.1514 li
58.672 51.762 58.7431 51.358 58.8167 50.9238 cv
58.8424 50.7729 li
58.837 50.6199 li
57.3379 50.6729 li
70.751 46.1499 mo
70.1428 44.7788 li
70.0173 44.8344 li
70.6255 46.2056 li
71.6173 47.3309 li
71.7325 47.2293 li
70.7407 46.104 li
69.2768 46.431 li
69.287 46.4769 li
70.751 46.1499 li
70.1428 44.7788 li
70.751 46.1499 li
72.2149 45.8228 li
72.2046 45.7769 li
71.6516 43.3017 li
69.6337 45.0803 li
71.2337 47.5767 li
71.3592 47.5211 li
72.4829 47.0226 li
72.2149 45.8228 li
70.751 46.1499 li
141.044 59.4487 mo
142.541 59.3513 li
142.458 58.0735 142.044 56.9086 141.251 56.0357 cv
140.466 55.1584 139.296 54.6644 138.099 54.6756 cv
136.794 54.6796 135.472 55.1854 134.181 56.1014 cv
135.051 57.3237 li
135.316 55.8474 li
131.583 55.1771 127.926 55.0049 124.777 54.9575 cv
121.636 54.9126 118.968 54.9857 117.377 54.8481 cv
117.251 56.3428 li
117.459 54.8573 li
113.828 54.3506 110.436 53.1178 107.972 52.0083 cv
106.74 51.4541 105.739 50.9322 105.052 50.5522 cv
104.709 50.3622 104.444 50.2077 104.268 50.1026 cv
104.071 49.9834 li
104.025 49.9548 li
104.015 49.9486 li
103.21 51.2144 li
104.409 52.1159 li
104.824 51.5625 105.084 50.8656 105.086 50.0948 cv
105.087 49.5084 104.924 48.8864 104.587 48.3307 cv
104.079 47.4901 103.228 46.8329 102.111 46.386 cv
100.987 45.9369 99.574 45.6715 97.7578 45.6145 cv
97.7119 47.1138 li
98.1808 45.6889 li
96.6514 45.1874 94.9873 44.4182 93.347 43.7459 cv
92.7793 45.1343 li
94.1341 45.7781 li
94.4187 45.1728 94.4891 44.5828 94.4908 44.0679 cv
94.4891 43.4249 94.3761 42.8739 94.2698 42.4623 cv
94.1621 42.052 94.056 41.7837 94.0391 41.7411 cv
92.6465 42.2983 li
93.0455 43.7443 li
94.2486 43.4206 95.1802 42.6152 95.717 41.6896 cv
96.2629 40.7605 96.4806 39.7285 96.4828 38.7285 cv
96.4801 37.7402 96.2702 36.77 95.8281 35.9034 cv
94.4941 36.5894 li
94.4537 38.0888 li
94.574 38.0904 li
95.3012 38.0946 96.0155 37.8954 96.5859 37.5163 cv
97.0147 37.2352 97.3539 36.8704 97.6076 36.4854 cv
97.9891 35.9046 98.1967 35.2834 98.3247 34.6708 cv
98.4509 34.0568 98.4944 33.4432 98.4949 32.8541 cv
98.4919 31.6552 98.3172 30.5714 98.129 29.8332 cv
96.6768 30.2085 li
97.2087 31.611 li
98.3206 31.1957 99.1937 30.4176 99.7207 29.5011 cv
100.254 28.5837 100.471 27.5577 100.472 26.5485 cv
100.47 25.4962 100.238 24.4479 99.8132 23.4772 cv
98.4395 24.0796 li
98.7735 25.5419 li
99.5669 25.3628 100.275 25.0091 100.836 24.5306 cv
101.685 23.8103 102.174 22.8652 102.446 21.9371 cv
102.72 21.0025 102.8 20.055 102.801 19.1624 cv
102.801 18.5303 102.759 17.9253 102.702 17.3769 cv
101.21 17.5312 li
101.293 19.029 li
102.23 18.9878 103.1 18.5669 103.676 17.9775 cv
104.115 17.5389 104.415 17.035 104.635 16.5278 cv
104.964 15.7645 105.124 14.9781 105.219 14.2313 cv
105.311 13.4852 105.332 12.7772 105.332 12.1942 cv
105.332 11.6253 105.312 11.1511 105.312 10.9824 cv
103.813 10.9824 li
104.625 12.2431 li
105.426 11.7288 106.052 11.1127 106.491 10.4325 cv
107.155 9.40676 107.365 8.32271 107.468 7.36174 cv
107.57 6.39113 107.584 5.49564 107.719 4.64051 cv
106.237 4.40965 li
107.582 5.07401 li
108.048 4.12055 108.294 3.2766 108.3 2.45332 cv
108.297 1.93853 108.203 1.39838 107.846 .880962 cv
107.668 .626773 107.414 .390628 107.109 .232916 cv
106.806 .0732655 106.464 -.0010899 106.15 .000282566 cv
105.703 .00185687 105.318 .13208 104.99 .306342 cv
104.497 .572964 104.103 .945346 103.738 1.40545 cv
103.375 1.86716 103.047 2.42398 102.75 3.09003 cv
104.121 3.6992 li
102.807 2.97615 li
102.071 4.3156 101.215 5.30228 100.429 6.34451 cv
100.039 6.86709 99.6622 7.40849 99.366 8.0414 cv
99.0702 8.67051 98.8686 9.40627 98.8709 10.1981 cv
98.8712 10.2425 li
98.8753 10.6493 li
99.0845 10.9983 li
100.006 10.4458 li
98.9335 10.4458 li
98.9299 10.637 98.9975 10.8603 99.0845 10.9983 cv
100.006 10.4458 li
98.9335 10.4458 li
99.8984 10.4458 li
99.0057 10.0693 li
98.9748 10.142 98.9335 10.2738 98.9335 10.4458 cv
99.8984 10.4458 li
99.0057 10.0693 li
99.4387 10.2519 li
99.0561 9.97351 li
99.0057 10.0693 li
99.4387 10.2519 li
99.0561 9.97351 li
99.0587 9.98764 98.7825 10.2586 98.4008 10.5549 cv
97.8243 11.02 97.0091 11.6205 96.2807 12.4324 cv
95.917 12.8407 95.5708 13.3094 95.3058 13.8654 cv
95.0411 14.4189 94.8643 15.0688 94.8654 15.767 cv
94.8638 16.4895 95.055 17.2412 95.4248 17.9614 cv
96.7607 17.2793 li
95.595 16.3353 li
95.3601 16.627 94.9951 17.003 94.5803 17.4207 cv
93.9574 18.0522 93.2212 18.7777 92.5945 19.6449 cv
92.2818 20.08 91.9948 20.5546 91.7777 21.0877 cv
91.5613 21.6192 91.4168 22.2161 91.4171 22.8538 cv
91.4157 23.4357 91.5411 24.0428 91.7967 24.6185 cv
93.169 24.0127 li
91.8048 23.3889 li
91.806 23.3894 li
91.8046 23.3886 li
91.8048 23.3889 li
91.806 23.3894 li
91.8046 23.3886 li
91.7756 23.455 91.5189 23.7906 91.1785 24.1749 cv
90.6644 24.7685 89.9557 25.542 89.3427 26.4638 cv
89.0363 26.9267 88.7514 27.4309 88.5342 27.9899 cv
88.3181 28.5478 88.1691 29.1674 88.1689 29.834 cv
88.1646 30.612 88.3887 31.4434 88.8579 32.182 cv
90.1279 31.3838 li
89.2958 30.1358 li
87.9353 31.0471 87.0011 31.7428 86.306 32.492 cv
85.9608 32.8676 85.6727 33.2699 85.472 33.7239 cv
85.27 34.1755 85.1747 34.6721 85.1772 35.129 cv
85.1782 35.6096 85.2665 36.0404 85.3769 36.4469 cv
85.4889 36.8545 85.6265 37.2459 85.7719 37.6673 cv
87.1894 37.1767 li
86.3797 35.9141 li
85.0432 36.78 83.7293 38.0214 82.8798 39.5481 cv
84.1943 40.2705 li
85.3421 39.3047 li
84.8194 38.6853 84.2521 37.7396 83.8271 36.5199 cv
83.4006 35.2993 83.1102 33.8038 83.1102 32.0593 cv
83.1103 31.9848 li
83.1104 31.9793 li
83.1104 31.9766 li
83.11 31.646 83.0718 31.317 82.9722 30.9896 cv
82.8288 30.5024 82.5116 30.0065 82.0528 29.6871 cv
81.5968 29.3631 81.0658 29.242 80.6037 29.2445 cv
79.7073 29.2583 78.9641 29.6008 78.2389 30.0783 cv
77.1631 30.8083 76.14 31.934 75.345 33.4048 cv
74.5548 34.8736 74.0116 36.6961 74.0117 38.7603 cv
74.0116 39.2143 73.9662 39.6306 73.8963 40.0627 cv
75.377 40.3027 li
75.2052 38.8126 li
73.0211 39.0644 70.325 39.5391 66.9521 40.3366 cv
66.6786 40.4014 li
66.4471 40.5606 li
66.1868 40.7373 65.9804 40.9864 65.8573 41.2177 cv
65.7317 41.4508 65.6749 41.661 65.6418 41.8313 cv
67.1152 42.1128 li
68.5635 41.7223 li
68.4519 41.3084 68.37 40.8833 68.3327 40.4356 cv
68.3284 40.3839 li
68.3205 40.3326 li
68.0789 38.8086 67.4181 37.2159 66.4983 35.8697 cv
66.0339 35.1992 65.5033 34.5917 64.8658 34.1076 cv
64.2331 33.6311 63.4531 33.2494 62.5271 33.2449 cv
62.0457 33.2432 61.5444 33.3606 61.0968 33.5883 cv
60.4199 33.9311 59.8805 34.4841 59.4423 35.1647 cv
59.003 35.8499 58.648 36.6799 58.3436 37.6983 cv
59.7813 38.1265 li
58.3982 37.5458 li
57.2895 40.1877 56.6224 42.0215 56.2178 43.5261 cv
57.6665 43.915 li
59.1665 43.915 li
59.1665 43.9145 li
59.1665 41.1005 li
56.8303 42.6693 li
56.7787 42.7034 li
56.6661 42.7777 56.3727 42.969 55.9203 43.2491 cv
54.9995 43.826 54.3623 44.585 53.7309 45.3632 cv
52.7872 46.5399 51.8452 47.8366 50.2899 49.1606 cv
48.7361 50.4799 46.5665 51.8377 43.1569 52.9859 cv
40.0898 54.0168 36.0205 54.8657 30.555 55.3071 cv
27.7789 55.5423 24.6888 56.8256 21.4736 58.8049 cv
16.6638 61.7834 11.6106 66.3841 7.58554 71.8018 cv
3.57035 77.2203 .566344 83.4605 .0670086 89.7837 cv
.0666453 89.7883 li
.0663224 89.793 li
.0232108 90.3972 .0001211 91.1039 4.03666e-05 91.9038 cv
.00585316 96.764 .843259 105.123 3.75757 112.746 cv
5.15821 112.209 li
3.71191 112.607 li
3.71728 112.627 li
3.73819 112.703 li
3.81489 112.899 li
3.81364 112.895 li
3.81247 112.892 li
3.86398 113.025 3.91722 113.163 3.97446 113.307 cv
3.972 113.3 li
3.96962 113.294 li
4.26296 114.047 4.57693 114.769 4.90979 115.462 cv
6.26171 114.812 li
4.90313 115.448 li
6.86616 119.638 9.5805 123.441 13.3697 125.946 cv
14.1958 124.694 li
13.2733 125.877 li
15.1346 127.328 16.8018 128.261 17.9078 128.803 cv
18.5674 127.456 li
17.2845 128.233 li
19.6904 132.201 23.1697 136.639 28.0561 140.11 cv
32.9366 143.581 39.2476 146.055 47.1132 146.05 cv
51.3232 146.05 55.9723 145.347 61.0899 143.747 cv
60.6421 142.315 li
61.0514 143.758 li
67.2618 141.997 72.9618 141.27 78.1589 141.27 cv
90.4189 141.272 99.9141 145.312 106.618 149.538 cv
109.968 151.65 112.612 153.808 114.538 155.526 cv
115.501 156.385 116.284 157.134 116.894 157.72 cv
117.2 158.014 117.462 158.267 117.689 158.479 cv
117.92 158.693 118.1 158.859 118.322 159.024 cv
119.21 157.815 li
118.144 158.87 li
118.28 159.006 118.422 159.135 118.624 159.266 cv
118.827 159.388 119.105 159.551 119.595 159.562 cv
119.898 159.568 120.278 159.458 120.553 159.251 cv
120.761 159.1 120.907 158.918 121.003 158.756 cv
121.147 158.51 121.198 158.308 121.23 158.139 cv
121.261 157.969 121.268 157.826 121.269 157.691 cv
121.265 157.262 121.194 156.876 121.086 156.409 cv
120.881 155.545 120.518 154.447 119.993 153.111 cv
118.158 148.453 114.328 140.944 108.547 133.158 cv
102.765 125.378 95.0356 117.331 85.3752 111.729 cv
85.3581 111.719 li
85.3415 111.71 li
82.2258 110.007 80.3185 108.113 79.1602 106.167 cv
78.0055 104.219 77.573 102.18 77.5702 100.08 cv
77.5669 97.3341 78.3435 94.511 79.2354 92.0047 cv
79.6802 90.7507 80.1502 89.5767 80.5574 88.5142 cv
80.9639 87.4474 81.3111 86.5074 81.5043 85.6256 cv
80.0381 85.3091 li
79.178 86.538 li
79.24 86.5807 80.3021 87.3201 82.0404 88.0633 cv
83.7782 88.8038 86.1993 89.5563 88.984 89.5585 cv
91.1083 89.5604 93.4484 89.1077 95.7598 87.8708 cv
98.0728 86.6366 100.336 84.6311 102.367 81.6305 cv
101.125 80.7891 li
100.751 82.2416 li
102.882 82.7912 104.849 82.97 106.675 82.9694 cv
110.091 82.9619 112.993 82.3768 115.746 82.3855 cv
117.444 82.387 119.087 82.587 120.865 83.2292 cv
121.376 81.8189 li
120.774 83.1927 li
121.496 83.5058 122.329 83.7004 123.286 83.8418 cv
124.241 83.9799 125.311 84.0517 126.444 84.0519 cv
129.143 84.0464 132.182 83.6567 134.727 82.6175 cv
135.997 82.0923 137.16 81.3995 138.06 80.4175 cv
138.962 79.4463 139.56 78.1217 139.55 76.6537 cv
139.547 75.1364 138.971 73.5567 137.859 71.8839 cv
136.61 72.7144 li
137.43 73.9704 li
139.405 72.6761 140.435 72.2931 141.553 71.5098 cv
142.106 71.1186 142.627 70.6151 143.097 69.9716 cv
143.572 69.3261 144.016 68.5469 144.55 67.4888 cv
144.633 67.3227 li
144.674 67.1413 li
144.889 66.1798 144.987 65.3196 144.987 64.5398 cv
145.001 62.7145 144.397 61.3245 143.725 60.3984 cv
143.395 59.9326 143.063 59.5709 142.812 59.288 cv
142.558 59.0071 142.396 58.7999 142.351 58.7121 cv
141.044 59.4487 li
142.541 59.3513 li
141.044 59.4487 li
139.737 60.1854 li
140.007 60.6557 140.307 60.9815 140.57 61.2819 cv
140.971 61.7291 141.306 62.1089 141.553 62.5783 cv
141.796 63.0487 141.983 63.6132 141.987 64.5398 cv
141.987 65.0659 141.92 65.707 141.746 66.4876 cv
143.21 66.8145 li
141.87 66.1401 li
141.376 67.1242 140.995 67.7682 140.682 68.1927 cv
140.445 68.5128 140.253 68.7119 140.038 68.8926 cv
139.721 69.16 139.294 69.409 138.599 69.7906 cv
137.909 70.1713 136.991 70.674 135.79 71.4583 cv
134.524 72.2851 li
135.361 73.5448 li
136.261 74.8972 136.553 75.9297 136.55 76.6537 cv
136.541 77.3558 136.324 77.8535 135.845 78.395 cv
135.483 78.7927 134.955 79.1804 134.29 79.5198 cv
132.297 80.5559 129.133 81.0624 126.444 81.0519 cv
125.44 81.0521 124.5 80.9867 123.716 80.8728 cv
122.935 80.7623 122.302 80.5904 121.978 80.445 cv
121.933 80.4252 li
121.887 80.4085 li
119.728 79.6253 117.683 79.3839 115.746 79.3855 cv
112.588 79.3942 109.721 79.9769 106.675 79.9694 cv
105.042 79.9689 103.353 79.8133 101.499 79.3365 cv
100.476 79.0729 li
99.8832 79.9477 li
98.0765 82.6111 96.1857 84.2403 94.3461 85.2248 cv
92.505 86.2067 90.6935 86.5566 88.984 86.5585 cv
86.7514 86.5607 84.6996 85.9385 83.2187 85.3044 cv
82.4788 84.9884 81.8828 84.6719 81.48 84.4395 cv
81.2786 84.3232 81.1254 84.228 81.0265 84.1646 cv
80.9194 84.0945 li
80.8978 84.0799 li
80.8719 84.1177 li
80.8981 84.0801 li
80.8978 84.0799 li
80.8719 84.1177 li
80.8981 84.0801 li
79.0484 82.7856 li
78.5718 84.9925 li
78.4551 85.5461 78.1514 86.4141 77.7559 87.441 cv
77.1634 88.9894 76.3729 90.9232 75.7258 93.0738 cv
75.0797 95.226 74.5714 97.6039 74.5702 100.08 cv
74.5674 102.595 75.1102 105.229 76.5812 107.7 cv
78.0487 110.173 80.4178 112.444 83.9046 114.344 cv
84.6231 113.027 li
83.8709 114.325 li
95.0622 120.804 103.726 130.916 109.553 139.847 cv
112.466 144.309 114.673 148.474 116.141 151.714 cv
116.874 153.332 117.422 154.721 117.779 155.782 cv
117.957 156.311 118.086 156.76 118.166 157.099 cv
118.248 157.433 118.272 157.678 118.269 157.691 cv
119.129 157.691 li
118.365 157.336 li
118.245 157.617 118.276 157.69 118.269 157.691 cv
119.129 157.691 li
118.365 157.336 li
119.566 157.893 li
118.789 156.825 li
118.553 156.997 118.428 157.2 118.365 157.336 cv
119.566 157.893 li
118.789 156.825 li
119.595 157.933 li
119.595 156.562 li
119.35 156.556 119.021 156.649 118.789 156.825 cv
119.595 157.933 li
119.595 156.562 li
119.595 157.742 li
120.236 156.736 li
120.161 156.696 119.993 156.572 119.595 156.562 cv
119.595 157.742 li
120.236 156.736 li
119.947 157.189 li
120.294 156.777 li
120.236 156.736 li
119.947 157.189 li
120.294 156.777 li
120.292 156.776 li
120.276 156.759 li
120.193 156.676 li
120.097 156.606 li
120.082 156.596 119.93 156.469 119.736 156.286 cv
118.979 155.581 117.472 154.058 115.322 152.231 cv
112.088 149.482 107.353 145.994 101.145 143.19 cv
94.9381 140.386 87.2496 138.269 78.1589 138.27 cv
72.6815 138.27 66.6985 139.038 60.2328 140.872 cv
60.213 140.877 li
60.1943 140.883 li
55.3309 142.404 50.9888 143.05 47.1132 143.05 cv
39.8766 143.045 34.2446 140.817 29.7926 137.663 cv
25.3467 134.51 22.1042 130.4 19.8503 126.678 cv
19.6222 126.302 li
19.2269 126.108 li
18.2744 125.642 16.7853 124.811 15.1183 123.511 cv
15.0714 123.474 li
15.0219 123.442 li
11.8638 121.363 9.42779 118.043 7.62029 114.176 cv
7.61706 114.169 li
7.61363 114.162 li
7.31468 113.54 7.03102 112.888 6.76476 112.205 cv
6.76234 112.199 li
6.75992 112.192 li
6.71168 112.072 6.66239 111.944 6.6104 111.81 cv
6.60895 111.806 li
6.5601 111.682 li
5.16358 112.229 li
6.60988 111.831 li
6.60451 111.812 li
6.58505 111.741 li
6.55881 111.673 li
3.82769 104.569 2.99424 96.4287 3.00005 91.9038 cv
2.99997 91.1628 3.02193 90.5205 3.0587 90.0068 cv
3.05834 90.0114 li
3.05797 90.0161 li
3.34183 86.3393 4.63801 82.5334 6.60346 78.8907 cv
9.54627 73.426 13.9893 68.3459 18.5353 64.6116 cv
20.8063 62.7436 23.1024 61.211 25.2239 60.127 cv
27.3425 59.0397 29.2931 58.4143 30.7966 58.2974 cv
36.4492 57.8404 40.7569 56.9568 44.1125 55.8296 cv
49.0789 54.1696 51.968 51.9213 53.8518 49.9013 cv
54.7932 48.8968 55.488 47.9638 56.0687 47.2432 cv
56.648 46.5158 57.1108 46.0336 57.4996 45.7997 cv
58.1377 45.4047 58.4889 45.1691 58.5027 45.1598 cv
57.6665 43.9145 li
56.1665 43.9145 li
56.1665 43.915 li
59.1152 44.3039 li
59.4606 43.0147 60.0806 41.2869 61.1643 38.7071 cv
61.1957 38.6324 li
61.2188 38.5547 li
61.5431 37.453 61.9186 36.7906 62.1795 36.4982 cv
62.3093 36.3492 62.4015 36.2903 62.4476 36.267 cv
62.5271 36.2449 li
62.5664 36.2404 62.7602 36.2753 63.0573 36.5012 cv
63.5 36.8269 64.0643 37.5258 64.4935 38.3378 cv
64.93 39.1463 65.2482 40.0706 65.3552 40.7875 cv
66.8379 40.56 li
65.3431 40.6845 li
65.3975 41.3394 65.5168 41.9465 65.667 42.5033 cv
68.5886 42.3942 li
67.7194 42.2282 li
68.4941 42.6486 li
68.5615 42.5228 68.5804 42.4342 68.5886 42.3942 cv
67.7194 42.2282 li
68.4941 42.6486 li
67.52 42.12 li
68.1477 43.0321 li
68.3015 42.9287 68.4293 42.7727 68.4941 42.6486 cv
67.52 42.12 li
68.1477 43.0321 li
67.2974 41.7964 li
67.6426 43.2561 li
70.926 42.4795 73.5121 42.0274 75.5486 41.7929 cv
76.676 41.663 li
76.8576 40.5428 li
76.9439 40.011 77.0119 39.4185 77.0117 38.7603 cv
77.0105 36.7166 77.7293 35.021 78.6068 33.8547 cv
79.0425 33.2738 79.5184 32.8324 79.9159 32.5658 cv
80.1135 32.4322 80.2906 32.3429 80.4178 32.2952 cv
80.5645 32.2508 li
80.5994 32.245 li
80.6037 32.2445 li
80.6037 31.8348 li
80.4525 32.2089 li
80.6037 32.2445 li
80.6037 31.8348 li
80.4525 32.2089 li
80.6888 31.6244 li
80.1287 31.9249 li
80.169 32.0163 80.3239 32.165 80.4525 32.2089 cv
80.6888 31.6244 li
80.1287 31.9249 li
80.4525 31.7511 li
80.1059 31.8747 li
80.1287 31.9249 li
80.4525 31.7511 li
80.1059 31.8747 li
80.1091 31.8735 li
80.1042 31.8743 li
80.1059 31.8747 li
80.1091 31.8735 li
80.1042 31.8743 li
80.1103 31.9766 li
80.1103 31.9738 li
80.1104 31.9683 li
80.1101 32.0593 li
80.1101 34.1377 80.4568 35.9694 80.995 37.5095 cv
81.5346 39.0506 82.2594 40.299 83.0466 41.2363 cv
84.4552 42.9103 li
85.5089 40.9929 li
86.0128 40.0567 87.0408 39.0452 87.9992 38.4394 cv
88.9931 37.802 li
88.607 36.6862 li
88.4603 36.2635 88.3418 35.9177 88.2707 35.6557 cv
88.198 35.3925 88.1763 35.2215 88.1773 35.129 cv
88.1798 35.038 88.1852 35.013 88.2167 34.9352 cv
88.2619 34.8254 88.4285 34.5675 88.8718 34.1746 cv
89.3097 33.7827 89.9965 33.2733 90.9601 32.6318 cv
92.1749 31.8218 li
91.3979 30.5856 li
91.2199 30.2943 91.1731 30.0855 91.1689 29.834 cv
91.1671 29.5424 91.2648 29.1663 91.4851 28.7309 cv
91.8098 28.0782 92.3938 27.3454 92.9753 26.6787 cv
93.2662 26.3427 93.5547 26.0211 93.8177 25.7025 cv
94.0805 25.3761 94.3218 25.0822 94.5331 24.6365 cv
94.8134 24.0235 li
94.5412 23.4069 li
94.4474 23.1912 94.4184 23.0255 94.4171 22.8538 cv
94.4169 22.6077 94.4897 22.3194 94.6761 21.9614 cv
94.9502 21.427 95.4823 20.7922 96.0901 20.1649 cv
96.6978 19.5297 97.3658 18.9104 97.9265 18.2232 cv
98.5401 17.4655 li
98.0967 16.5971 li
97.9125 16.2325 97.867 15.9785 97.8654 15.767 cv
97.8671 15.4639 97.9675 15.1708 98.2289 14.7926 cv
98.6143 14.2306 99.357 13.618 100.078 13.054 cv
100.44 12.7652 100.794 12.4899 101.129 12.1505 cv
101.297 11.9779 101.465 11.7884 101.622 11.5268 cv
101.774 11.2692 101.931 10.9098 101.933 10.4458 cv
101.937 10.1047 101.83 9.73579 101.658 9.45584 cv
100.371 10.227 li
101.871 10.2116 li
101.871 10.1981 li
101.873 9.89007 101.935 9.63709 102.085 9.30835 cv
102.307 8.82047 102.776 8.19838 103.395 7.41071 cv
104.01 6.62126 104.754 5.65985 105.435 4.42229 cv
105.466 4.3667 li
105.492 4.30841 li
105.773 3.67179 106.066 3.26671 106.252 3.08082 cv
106.344 2.98709 106.403 2.9531 106.403 2.95262 cv
106.15 2.47823 li
106.15 3.00029 li
106.323 2.99872 106.401 2.95278 106.403 2.95262 cv
106.15 2.47823 li
106.15 3.00029 li
106.15 2.07198 li
105.722 2.89263 li
105.867 2.96961 106.03 3.00166 106.15 3.00029 cv
106.15 2.07198 li
105.722 2.89263 li
106.114 2.14121 li
105.327 2.49135 li
105.364 2.58552 105.497 2.77852 105.722 2.89263 cv
106.114 2.14121 li
105.327 2.49135 li
105.665 2.34062 li
105.298 2.40799 li
105.327 2.49135 li
105.665 2.34062 li
105.298 2.40799 li
105.299 2.4151 li
105.3 2.45332 li
105.306 2.60664 105.222 3.08781 104.892 3.74534 cv
104.791 3.95153 li
104.755 4.17879 li
104.533 5.66651 104.567 6.8987 104.379 7.74644 cv
104.289 8.17412 104.167 8.50045 103.973 8.80073 cv
103.778 9.09989 103.5 9.39667 103 9.72174 cv
102.312 10.1648 li
102.312 10.9824 li
102.313 11.2886 102.333 11.6861 102.332 12.1942 cv
102.338 13.0916 102.256 14.2784 101.986 15.0642 cv
101.856 15.4584 101.687 15.7284 101.559 15.8513 cv
101.422 15.9721 101.372 16.0089 101.127 16.0335 cv
99.556 16.1209 li
99.7179 17.6856 li
99.767 18.1591 99.801 18.6649 99.8009 19.1624 cv
99.8058 20.1001 99.666 21.0008 99.3853 21.5771 cv
99.2464 21.8687 99.0865 22.0802 98.896 22.2424 cv
98.7031 22.4033 98.4728 22.5312 98.1053 22.6173 cv
96.3375 23.0212 li
97.0657 24.6819 li
97.3309 25.2839 97.473 25.9507 97.4718 26.5485 cv
97.4724 27.1258 97.343 27.626 97.129 27.9902 cv
96.909 28.3552 96.6346 28.6138 96.1448 28.806 cv
94.8882 29.2826 li
95.2245 30.5838 li
95.346 31.0442 95.4977 31.9746 95.4948 32.8541 cv
95.5027 33.6265 95.3641 34.3684 95.1721 34.7159 cv
95.0785 34.8945 94.9995 34.9684 94.9391 35.0086 cv
94.8756 35.0459 94.8072 35.0863 94.574 35.0904 cv
94.5346 35.0899 li
92.0013 35.0216 li
93.1601 37.2753 li
93.3521 37.6417 93.4855 38.1889 93.4828 38.7285 cv
93.485 39.2777 93.3498 39.8056 93.1352 40.1617 cv
92.9115 40.5211 92.6749 40.7261 92.2474 40.8524 cv
90.6308 41.2985 li
91.2538 42.8556 li
91.8102 42.6329 li
91.2512 42.849 li
91.2538 42.8556 li
91.8102 42.6329 li
91.2512 42.849 li
91.2614 42.8542 91.5014 43.5616 91.4908 44.0679 cv
91.4926 44.2834 91.4517 44.4395 91.4245 44.4904 cv
90.7438 45.9226 li
92.2116 46.5227 li
93.7647 47.156 95.4814 47.9571 97.243 48.5386 cv
97.4492 48.6064 li
97.666 48.6131 li
99.7565 48.672 100.979 49.0817 101.543 49.444 cv
101.829 49.6242 101.956 49.7791 102.017 49.8794 cv
102.077 49.9818 102.084 50.0372 102.086 50.0948 cv
102.011 50.3128 li
101.036 51.6096 li
102.405 52.4802 li
102.45 52.5085 104.102 53.5565 106.742 54.7443 cv
109.383 55.9308 113.012 57.2622 117.043 57.8283 cv
117.084 57.834 li
117.125 57.8375 li
119.029 57.9943 121.652 57.9094 124.732 57.9572 cv
127.804 58.0025 131.3 58.1735 134.786 58.8001 cv
135.406 58.9116 li
135.92 58.5461 li
136.844 57.8872 137.609 57.6717 138.099 57.6756 cv
138.557 57.6868 138.793 57.8076 139.033 58.056 cv
139.266 58.3088 139.497 58.7804 139.547 59.5462 cv
139.569 59.8875 li
139.737 60.1854 li
141.044 59.4487 li
.75021 .679683 .670222 .90164 cmyk
f
14.0928 117.635 mo
14.0928 117.635 24.1143 153.741 60.6421 142.315 cv
96.8975 132.031 116.905 156.124 119.21 157.815 cv
122.609 161.248 110.424 127.98 84.6231 113.027 cv
69.3701 104.705 78.9453 90.3706 80.0381 85.3091 cv
80.0381 85.3091 92.2647 93.8657 101.125 80.7891 cv
104.979 81.7818 108.22 81.4796 111.314 81.1774 cv
114.646 80.852 117.806 80.5266 121.376 81.8189 cv
125.559 83.6519 143.146 82.5444 136.61 72.7144 cv
140.721 70.0312 141.154 70.8989 143.21 66.8145 cv
144.315 61.8628 141.808 60.8032 141.044 59.4487 cv
140.839 56.2983 138.202 55.0825 135.051 57.3237 cv
127.832 56.0268 120.746 56.6372 117.251 56.3428 cv
109.589 55.27 103.21 51.2144 103.21 51.2144 cv
104.142 49.9756 103.696 47.2969 97.7119 47.1138 cv
94.4248 46.0322 90.96 43.978 88.4238 43.9516 cv
85.8565 43.9516 85.5097 41.4146 85.5097 41.4146 cv
83.9033 40.5449 81.5859 37.1621 81.6104 31.9766 cv
81.6104 28.7012 75.5117 32.2949 75.5117 38.7603 cv
75.5117 45.2256 69.6934 46.5186 69.6934 46.5186 cv
69.6934 46.5186 67.1445 44.2373 66.8379 40.56 cv
66.2563 36.77 61.9038 31.0005 59.7813 38.1265 cv
56.5556 45.772 56.2964 47.5566 55.6665 51.2803 cv
54.3569 58.9912 55.3213 59.2925 55.3213 59.2925 cv
22.4975 82.7232 li
14.0928 117.635 li
.564385 .180514 .439796 .00402838 cmyk
f
14.0928 117.635 mo
13.8519 117.702 li
13.8575 117.72 15.7311 124.473 20.822 131.243 cv
25.9082 138.01 34.2444 144.802 47.1137 144.8 cv
51.1843 144.8 55.7054 144.121 60.7167 142.554 cv
60.6421 142.315 li
60.7103 142.555 li
67.0271 140.764 72.845 140.02 78.1589 140.02 cv
90.6993 140.02 100.438 144.162 107.285 148.48 cv
110.708 150.64 113.408 152.842 115.37 154.593 cv
116.351 155.468 117.148 156.231 117.76 156.819 cv
118.375 157.409 118.794 157.818 119.062 158.016 cv
119.21 157.815 li
119.032 157.991 li
119.219 158.169 119.358 158.298 119.595 158.312 cv
119.753 158.32 119.908 158.191 119.952 158.073 cv
120.006 157.953 120.017 157.832 120.019 157.691 cv
120.016 157.186 119.818 156.364 119.437 155.225 cv
116.768 147.298 104.929 124.516 84.7484 112.811 cv
84.7457 112.809 li
84.7428 112.807 li
78.208 109.231 76.3298 104.624 76.3202 100.08 cv
76.3197 97.1026 77.1466 94.1529 78.0573 91.5868 cv
78.9676 89.0172 79.9594 86.8469 80.2824 85.3618 cv
80.0381 85.3091 li
79.8947 85.5139 li
79.916 85.5257 83.8746 88.3045 88.984 88.3085 cv
92.8884 88.3143 97.4606 86.6534 101.332 80.9293 cv
101.125 80.7891 li
101.063 81.0311 li
103.078 81.5504 104.929 81.7195 106.675 81.7194 cv
109.937 81.7181 112.824 81.134 115.746 81.1355 cv
117.543 81.1357 119.354 81.353 121.291 82.0539 cv
121.376 81.8189 li
121.276 82.0478 li
122.385 82.5307 124.284 82.7997 126.444 82.8019 cv
129.015 82.801 131.939 82.4114 134.251 81.4615 cv
135.407 80.9857 136.412 80.3688 137.137 79.5748 cv
137.863 78.7826 138.302 77.8025 138.3 76.6537 cv
138.3 75.467 137.842 74.1152 136.819 72.576 cv
136.61 72.7144 li
136.747 72.9237 li
138.789 71.59 139.907 71.148 140.826 70.4932 cv
141.75 69.8338 142.404 68.9759 143.433 66.9268 cv
143.447 66.8991 li
143.454 66.8689 li
143.652 65.9828 143.737 65.2139 143.737 64.5398 cv
143.746 61.3751 141.803 60.3274 141.262 59.326 cv
141.044 59.4487 li
141.293 59.4325 li
141.224 58.3681 140.887 57.492 140.327 56.8775 cv
139.769 56.2623 138.988 55.9237 138.099 55.9256 cv
137.134 55.9263 136.044 56.3112 134.906 57.12 cv
135.051 57.3237 li
135.095 57.0777 li
127.84 55.7749 120.724 56.387 117.272 56.0936 cv
117.251 56.3428 li
117.286 56.0952 li
113.488 55.5638 109.997 54.2899 107.46 53.1483 cv
106.191 52.5776 105.16 52.0402 104.447 51.646 cv
104.091 51.449 103.814 51.2877 103.627 51.176 cv
103.44 51.0643 103.344 51.0035 103.344 51.0034 cv
103.21 51.2144 li
103.41 51.3646 li
103.67 51.0179 103.835 50.5744 103.836 50.0948 cv
103.839 49.3597 103.434 48.5588 102.472 47.9611 cv
101.511 47.36 100.002 46.9345 97.7196 46.8639 cv
97.7119 47.1138 li
97.79 46.8763 li
96.1659 46.3422 94.4822 45.5609 92.8809 44.9056 cv
91.278 44.2517 89.7601 43.7178 88.4264 43.7017 cv
88.425 43.7017 li
88.4238 43.7017 li
87.2275 43.6965 86.5966 43.1314 86.2143 42.5479 cv
86.0266 42.256 85.9107 41.9595 85.8431 41.738 cv
85.8093 41.6273 85.7875 41.5353 85.7744 41.4724 cv
85.7575 41.3807 li
85.7403 41.2551 li
85.6288 41.1947 li
84.8996 40.8036 83.9407 39.7831 83.1854 38.2295 cv
82.4272 36.6757 81.8601 34.5901 81.8602 32.0578 cv
81.8604 31.9779 li
81.8604 31.9765 li
81.8604 31.9766 li
81.8605 31.5165 81.7502 31.1436 81.5211 30.8797 cv
81.2923 30.6148 80.956 30.4922 80.6037 30.4945 cv
80.0935 30.4968 79.524 30.7214 78.9377 31.1148 cv
77.1887 32.2974 75.2657 35.0698 75.2617 38.7603 cv
75.2579 41.9149 73.857 43.7659 72.449 44.8666 cv
71.7446 45.4146 71.0373 45.7685 70.5081 45.984 cv
70.2436 46.0918 70.0237 46.165 69.8712 46.211 cv
69.696 46.2605 li
69.6391 46.2745 li
69.6934 46.5186 li
69.8601 46.3323 li
69.7591 46.2356 li
69.2866 45.7703 67.3442 43.6612 67.087 40.5393 cv
67.0863 40.5307 li
67.085 40.5221 li
66.886 39.2336 66.28 37.7567 65.4694 36.5795 cv
64.6565 35.4109 63.6438 34.5072 62.5271 34.4949 cv
61.9401 34.4926 61.3582 34.7713 60.8589 35.35 cv
60.3565 35.9291 59.9146 36.805 59.5416 38.0551 cv
59.7813 38.1265 li
59.5509 38.0293 li
56.3229 45.6751 56.0482 47.5153 55.42 51.2386 cv
55.419 51.2443 li
55.42 51.2384 li
54.8891 54.3655 54.7294 56.2829 54.7292 57.47 cv
54.7298 58.3447 54.8144 58.8231 54.9146 59.1081 cv
55.0115 59.389 55.1483 59.501 55.2468 59.5311 cv
55.3213 59.2925 li
55.176 59.089 li
22.2763 82.5739 li
13.8346 117.64 li
13.8519 117.702 li
14.0928 117.635 li
14.3358 117.694 li
22.7188 82.8724 li
55.8758 59.2038 li
55.3958 59.0539 li
55.3387 59.2366 li
55.4458 59.0769 li
55.3958 59.0539 li
55.3387 59.2366 li
55.4458 59.0769 li
55.4117 59.1277 li
55.4571 59.0857 li
55.4458 59.0769 li
55.4117 59.1277 li
55.4571 59.0857 li
55.4427 59.0842 55.2237 58.7597 55.2292 57.47 cv
55.229 56.3274 55.3847 54.4317 55.913 51.3221 cv
55.914 51.3163 li
55.913 51.322 li
56.5446 47.5979 56.7884 45.8689 60.0116 38.2237 cv
60.0169 38.211 li
60.0208 38.1978 li
60.3799 36.9901 60.8028 36.1753 61.2362 35.6781 cv
61.6727 35.1804 62.0977 34.9972 62.5271 34.9949 cv
63.341 34.9826 64.2932 35.7451 65.0578 36.8634 cv
65.8247 37.973 66.4088 39.4037 66.5908 40.598 cv
66.8379 40.56 li
66.5887 40.5808 li
66.9097 44.3677 69.5077 46.6843 69.5266 46.7048 cv
69.6223 46.7904 li
69.7476 46.7626 li
69.7687 46.7571 71.255 46.4273 72.756 45.2612 cv
74.2572 44.0991 75.7655 42.071 75.7617 38.7603 cv
75.7615 36.4201 76.5813 34.4675 77.608 33.1031 cv
78.1208 32.4212 78.6854 31.8876 79.2171 31.5294 cv
79.748 31.1696 80.248 30.9921 80.6037 30.9945 cv
80.853 30.9968 81.0199 31.0681 81.1441 31.2082 cv
81.2679 31.3493 81.3602 31.5924 81.3603 31.9766 cv
81.3603 31.9752 li
81.3601 32.0578 li
81.3602 34.6651 81.9439 36.8253 82.736 38.4487 cv
83.531 40.0724 84.5219 41.1604 85.3907 41.6344 cv
85.5097 41.4146 li
85.2621 41.4484 li
85.2658 41.4687 85.3551 42.1331 85.7937 42.8183 cv
86.2266 43.5034 87.0528 44.2068 88.4238 44.2017 cv
88.4238 43.9516 li
88.4212 44.2016 li
89.6236 44.2118 91.1063 44.7182 92.6916 45.3684 cv
94.2785 46.0172 95.9708 46.8038 97.6338 47.3512 cv
97.6681 47.3625 li
97.7043 47.3636 li
99.9316 47.431 101.359 47.8519 102.207 48.3848 cv
103.055 48.9211 103.332 49.5419 103.336 50.0948 cv
103.336 50.458 103.209 50.8001 103.01 51.0641 cv
102.848 51.2802 li
103.076 51.4253 li
103.092 51.4338 109.489 55.5062 117.216 56.5904 cv
117.223 56.5913 li
117.23 56.5919 li
120.768 56.8874 127.824 56.2788 135.007 57.5698 cv
135.11 57.5884 li
135.196 57.5275 li
136.272 56.7615 137.269 56.425 138.099 56.4256 cv
138.865 56.4275 139.49 56.7038 139.958 57.2142 cv
140.424 57.7253 140.731 58.4859 140.794 59.465 cv
140.798 59.5219 li
140.826 59.5715 li
141.543 60.8025 143.228 61.5866 143.237 64.5398 cv
143.237 65.1716 143.157 65.904 142.966 66.76 cv
143.21 66.8145 li
142.987 66.702 li
141.961 68.7374 141.37 69.4879 140.535 70.0866 cv
139.696 70.6899 138.542 71.1556 136.474 72.505 cv
136.263 72.6428 li
136.402 72.8527 li
137.39 74.3387 137.801 75.5992 137.8 76.6537 cv
137.799 77.6749 137.423 78.5172 136.768 79.2377 cv
134.808 81.4078 130.224 82.311 126.444 82.3019 cv
124.331 82.3041 122.46 82.024 121.476 81.5899 cv
121.469 81.5865 li
121.461 81.5838 li
119.461 80.8593 117.583 80.6352 115.746 80.6355 cv
112.757 80.6369 109.875 81.2207 106.675 81.2194 cv
104.962 81.2193 103.156 81.0541 101.187 80.547 cv
101.017 80.503 li
100.918 80.6488 li
97.1137 86.2529 92.7471 87.8027 88.984 87.8085 cv
86.5214 87.8089 84.3157 87.1324 82.7278 86.4539 cv
81.9339 86.1148 81.2947 85.7757 80.8553 85.5221 cv
80.6356 85.3954 80.4658 85.29 80.3517 85.2168 cv
80.2375 85.1435 80.1817 85.1043 80.1814 85.1043 cv
79.8731 84.8885 li
79.7937 85.2563 li
79.497 86.6418 78.5048 88.8333 77.5861 91.4197 cv
76.6679 94.0096 75.8208 97.01 75.8202 100.08 cv
75.8107 104.767 77.8333 109.618 84.5033 113.246 cv
84.6231 113.027 li
84.4977 113.243 li
95.9326 119.869 104.699 130.124 110.599 139.164 cv
113.55 143.683 115.784 147.897 117.279 151.198 cv
118.027 152.848 118.589 154.27 118.963 155.384 cv
119.339 156.494 119.522 157.313 119.519 157.691 cv
119.52 157.792 119.503 157.857 119.498 157.862 cv
119.566 157.893 li
119.524 157.836 li
119.498 157.862 li
119.566 157.893 li
119.524 157.836 li
119.595 157.933 li
119.595 157.812 li
119.524 157.836 li
119.595 157.933 li
119.595 157.812 li
119.595 157.877 li
119.608 157.813 li
119.595 157.812 li
119.595 157.877 li
119.608 157.813 li
119.595 157.807 li
119.562 157.793 119.484 157.737 119.388 157.639 cv
119.374 157.625 li
119.358 157.613 li
119.15 157.463 118.717 157.046 118.107 156.459 cv
113.809 152.328 100.303 139.519 78.1589 139.52 cv
72.7983 139.52 66.9332 140.27 60.5739 142.074 cv
60.5706 142.075 li
60.5674 142.076 li
55.5985 143.631 51.1286 144.3 47.1137 144.3 cv
34.4324 144.297 26.2581 137.632 21.2215 130.942 cv
18.706 127.598 16.982 124.25 15.8884 121.741 cv
15.3416 120.486 14.9522 119.441 14.7 118.71 cv
14.5738 118.345 14.4819 118.058 14.4217 117.864 cv
14.3615 117.669 14.3338 117.569 14.3337 117.568 cv
14.0928 117.635 li
14.3358 117.694 li
14.0928 117.635 li
.75021 .679683 .670222 .90164 cmyk
f
91.7559 56.2148 mo
93.3037 55.6528 92.6514 55.8003 92.9082 55.6343 cv
89.9492 56.209 83.2734 56.248 78.5908 54.5015 cv
78.9824 54.7314 81.1592 55.4639 81.4355 55.6294 cv
81.6533 56.3442 81.5352 57.0669 84.3672 58.3389 cv
86.9258 59.1323 90.2119 58.7998 91.2021 57.8101 cv
91.3115 56.1255 91.3291 56.7437 91.7559 56.2148 cv
cp
.784359 .531151 .605524 .403998 cmyk
f
91.7559 56.2148 mo
91.8838 56.5673 li
92.3946 56.3817 92.6688 56.2733 92.8365 56.1948 cv
93.0492 56.07 li
93.1607 55.94 li
93.2143 55.7364 li
93.2103 55.6772 li
92.9286 55.7135 li
93.2124 55.7135 li
93.2103 55.6772 li
92.9286 55.7135 li
93.2124 55.7135 li
92.8893 55.7135 li
93.1432 55.9156 li
93.2124 55.7135 li
92.8893 55.7135 li
93.1432 55.9156 li
92.9647 55.7734 li
93.1107 55.9495 li
93.1432 55.9156 li
92.9647 55.7734 li
93.1107 55.9495 li
93.1117 55.9492 li
93.2629 55.8515 93.3233 55.6612 93.2561 55.4942 cv
93.1888 55.3272 93.0134 55.2318 92.8367 55.2662 cv
91.7672 55.4743 90.1586 55.6143 88.3332 55.6139 cv
85.2715 55.6153 81.5862 55.2204 78.7219 54.1501 cv
78.5395 54.0821 78.3358 54.1646 78.2522 54.3404 cv
78.1686 54.5161 78.2331 54.7263 78.4009 54.8248 cv
78.5465 54.9085 78.7526 54.9925 79.0244 55.1004 cv
79.4266 55.2586 79.9441 55.4472 80.3865 55.6119 cv
80.6074 55.6941 80.8095 55.7702 80.9658 55.8322 cv
81.1181 55.8913 81.2423 55.9486 81.2429 55.9511 cv
81.4355 55.6294 li
81.0768 55.7387 li
81.1703 56.0336 81.2139 56.5077 81.631 57.0129 cv
82.0462 57.5159 82.7737 58.0326 84.2135 58.6809 cv
84.2561 58.697 li
85.2797 59.0141 86.3991 59.1561 87.4561 59.1564 cv
88.3083 59.1561 89.1192 59.064 89.811 58.8882 cv
90.5024 58.7093 91.0782 58.4585 91.4672 58.0753 cv
91.5318 58.0107 91.5704 57.9255 91.5764 57.8344 cv
91.6035 57.4157 91.6252 57.1417 91.6468 56.9716 cv
91.6623 56.8444 91.6803 56.777 91.6856 56.7652 cv
91.6863 56.7636 li
91.5861 56.7152 li
91.6595 56.7978 li
91.6863 56.7636 li
91.5861 56.7152 li
91.6595 56.7978 li
91.6597 56.798 li
91.6841 56.7793 91.8767 56.6704 92.0477 56.4503 cv
91.7559 56.2148 li
91.8838 56.5673 li
91.7559 56.2148 li
91.464 55.9793 li
91.3779 56.0836 91.3423 56.1061 91.295 56.1394 cv
91.2613 56.1642 91.1916 56.1991 91.1083 56.2903 cv
90.9742 56.5276 li
90.8958 56.7753 90.8778 57.0664 90.8279 57.7858 cv
91.2021 57.8101 li
90.937 57.5448 li
90.715 57.7724 90.2424 58.0073 89.6259 58.1614 cv
89.0098 58.3185 88.2533 58.4066 87.4561 58.4064 cv
86.4668 58.4067 85.4137 58.2712 84.4783 57.9807 cv
84.3672 58.3389 li
84.5208 57.9968 li
83.1287 57.3731 82.4992 56.8926 82.211 56.5375 cv
81.9248 56.1847 81.9186 55.9401 81.7943 55.5201 cv
81.6282 55.3077 li
81.5566 55.2658 81.4894 55.2372 81.3949 55.1969 cv
81.0738 55.0627 80.4976 54.8541 79.9521 54.6509 cv
79.6803 54.5496 79.4174 54.4503 79.2048 54.3652 cv
78.9949 54.282 78.8234 54.2046 78.7807 54.1781 cv
78.5908 54.5015 li
78.4598 54.8528 li
81.4618 55.9707 85.207 56.3626 88.3332 56.3639 cv
90.1983 56.3636 91.8382 56.2237 92.9797 56.0024 cv
92.9082 55.6343 li
92.7047 55.3193 li
92.5564 55.4485 li
92.4624 55.7135 li
92.4664 55.7729 li
92.75 55.7364 li
92.4643 55.7364 li
92.4664 55.7729 li
92.75 55.7364 li
92.4643 55.7364 li
92.8008 55.7364 li
92.5079 55.5707 li
92.4643 55.7364 li
92.8008 55.7364 li
92.5079 55.5707 li
92.7639 55.7155 li
92.5703 55.4929 li
92.5079 55.5707 li
92.7639 55.7155 li
92.5703 55.4929 li
92.649 55.5834 li
92.5848 55.4815 li
92.5703 55.4929 li
92.649 55.5834 li
92.5848 55.4815 li
92.5607 55.501 92.2953 55.6223 91.6279 55.8624 cv
91.464 55.9793 li
91.7559 56.2148 li
cp
f
124.124 75.3608 mo
121.295 73.2754 119.243 75.0967 117.655 74.9478 cv
118.646 74.3027 121.417 72.8862 125.9 72.8862 cv
128.433 72.8862 129.779 75.0825 131.471 75.0928 cv
132.611 75.0996 135.942 73.3823 136.61 72.7144 cv
135.642 73.5522 137.064 74.4697 136.121 75.7178 cv
135.839 76.0771 135.284 77.229 133.458 77.769 cv
131.408 78.7402 128.047 79.5308 124.124 75.3608 cv
cp
f
124.124 75.3608 mo
124.272 75.1596 li
123.19 74.3594 122.185 74.101 121.289 74.1028 cv
119.862 74.1099 118.708 74.7188 117.849 74.7065 cv
117.679 74.6988 li
117.655 74.9478 li
117.792 75.1572 li
118.746 74.5357 121.471 73.1361 125.9 73.1362 cv
127.091 73.1363 128.008 73.6498 128.867 74.1966 cv
129.723 74.7359 130.509 75.3296 131.469 75.3428 cv
131.478 75.3428 li
131.823 75.3406 132.256 75.225 132.753 75.0506 cv
133.495 74.7877 134.363 74.3837 135.114 73.9801 cv
135.868 73.5724 136.491 73.183 136.787 72.8911 cv
136.447 72.5253 li
136.126 72.795 135.999 73.1366 136.005 73.4456 cv
136.014 73.93 136.218 74.3452 136.211 74.7552 cv
136.209 75.0096 136.15 75.261 135.922 75.567 cv
136.121 75.7178 li
135.924 75.5634 li
135.76 75.7754 135.572 76.1198 135.192 76.4985 cv
134.815 76.8735 134.26 77.2704 133.387 77.5293 cv
133.368 77.5348 li
133.351 77.5431 li
132.521 77.9365 131.483 78.2933 130.286 78.2932 cv
128.598 78.2907 126.571 77.5933 124.306 75.1895 cv
124.291 75.173 li
124.272 75.1596 li
124.124 75.3608 li
123.942 75.5321 li
126.27 78.011 128.452 78.7957 130.286 78.7932 cv
131.583 78.7931 132.696 78.4068 133.565 77.995 cv
133.458 77.769 li
133.529 78.0088 li
134.482 77.7276 135.118 77.2786 135.545 76.8528 cv
135.969 76.4308 136.199 76.0196 136.318 75.8722 cv
136.319 75.8706 li
136.321 75.8685 li
136.612 75.486 136.713 75.0992 136.711 74.7552 cv
136.705 74.2041 136.496 73.7607 136.505 73.4456 cv
136.51 73.247 136.55 73.1048 136.774 72.9034 cv
136.61 72.7144 li
136.434 72.5376 li
136.3 72.6732 135.973 72.9055 135.56 73.153 cv
134.937 73.5274 134.106 73.9553 133.332 74.2861 cv
132.562 74.6184 131.825 74.8479 131.478 74.8428 cv
131.472 74.8428 li
130.741 74.8457 130.008 74.3361 129.135 73.7747 cv
128.265 73.2208 127.242 72.6362 125.9 72.6362 cv
121.363 72.6364 118.545 74.0698 117.519 74.7383 cv
116.918 75.1298 li
117.632 75.1967 li
117.849 75.2065 li
118.909 75.1943 120.005 74.5957 121.289 74.6028 cv
122.091 74.6046 122.966 74.8202 123.976 75.5621 cv
124.124 75.3608 li
123.942 75.5321 li
124.124 75.3608 li
cp
f
62.5771 37.4146 mo
62.5771 37.4146 59.2222 45.4106 62.8887 52.7437 cv
66.5552 60.0767 63.4106 45.915 67.5771 48.5815 cv
70.9746 48.9663 65.1904 45.3662 65.5444 40.7627 cv
65.3677 37.8706 63.7739 35.5688 62.5771 37.4146 cv
cp
f
126.981 63.7993 mo
126.981 64.9204 125.618 65.8296 123.937 65.8296 cv
127.51 64.709 123.735 61.1763 120.892 63.7993 cv
120.892 62.6782 122.255 61.769 123.937 61.769 cv
125.618 61.769 126.981 62.6782 126.981 63.7993 cv
cp
f
121.814 61.2153 mo
125.587 60.9839 128.15 61.5381 127.351 64.353 cv
127.898 63.2271 128.643 61.5229 126.305 60.8462 cv
124.558 60.4585 123.005 60.4683 121.814 61.2153 cv
cp
f
67.5742 82.6157 mo
67.5742 79.0952 66.0654 75.4502 60.5342 68.0327 cv
58.8989 65.8403 57.9145 63.6968 57.3233 61.7578 cv
55.9219 58.4624 53.8975 53.7393 56.71 44.5244 cv
56.71 44.5244 57.3306 44.1402 56.71 44.5244 cv
54.0908 46.146 53.1479 51.2105 43.6348 54.4077 cv
40.4234 55.4868 36.2349 56.353 30.6758 56.8022 cv
21.1074 57.5757 2.78857 74.1172 1.56251 89.8999 cv
1.2793 93.8638 1.87208 103.637 5.15821 112.209 cv
5.16358 112.229 li
5.21141 112.351 li
5.26316 112.485 5.31447 112.618 5.36719 112.75 cv
5.64697 113.467 5.9458 114.155 6.26171 114.812 cv
8.14696 118.84 10.7222 122.402 14.1958 124.694 cv
17.2798 127.098 19.8018 128 19.8018 128 cv
17.2139 124.421 16.0317 120.437 17.5391 115.679 cv
18.1904 118.316 19.4424 119.841 21.1851 120.457 cv
20.5698 118.573 20.3584 116.908 21.1851 115.805 cv
23.7519 122.54 26.5381 124.836 29.3564 126.491 cv
26.7251 121.577 25.3242 116.486 25.5849 111.154 cv
28.1543 117.182 32.1806 121.099 36.145 125.108 cv
32.3648 119.142 29.2344 113.004 29.168 106.062 cv
30.8608 108.84 33.1025 110.994 35.7681 112.663 cv
34.0849 109.954 33.2627 107.153 33.5049 104.24 cv
37.9292 109.185 42.8657 110.847 47.8369 112.286 cv
42.6396 108.661 37.9941 104.749 35.5166 99.7134 cv
38.4883 101.177 41.4644 101.407 44.4424 101.096 cv
40.7363 99.2241 39.3731 95.8443 38.6597 92.0444 cv
43.8364 97.3237 49.2471 100.872 54.751 103.737 cv
49.2954 98.477 45.2724 93.0864 43.185 87.519 cv
45.2852 88.6987 47.3418 89.2554 49.3452 89.0278 cv
46.5796 85.9038 45.8799 82.8462 45.1338 79.7871 cv
47.771 83.7027 50.0933 85.8091 52.2368 86.8901 cv
50.0479 82.4077 50.2026 78.458 51.7339 74.8218 cv
54.2578 76.4971 56.6362 79.1167 58.6485 84.1245 cv
59.3799 81.7388 58.2017 77.7607 56.7627 73.5644 cv
58.9375 74.186 61.542 76.915 64.9341 83.4966 cv
64.604 79.6314 62.7949 75.7212 60.7856 71.8047 cv
63.813 75.3164 68.3433 84.519 67.5742 82.6157 cv
.266697 .769772 .868132 .18674 cmyk
f
67.5742 82.6157 mo
67.8242 82.6157 li
67.8234 79.0088 66.2714 75.3072 60.7346 67.8832 cv
59.1174 65.7149 58.1462 63.599 57.5623 61.6849 cv
57.5585 61.6722 li
57.5533 61.66 li
56.6662 59.5724 55.5494 56.9629 55.5479 52.9984 cv
55.548 50.7043 55.9242 47.9554 56.9491 44.5974 cv
56.71 44.5244 li
56.8416 44.737 li
57.1174 44.5662 li
57.2348 44.4935 57.271 44.3394 57.1983 44.222 cv
57.1257 44.1046 56.9715 44.0684 56.8542 44.1411 cv
56.8542 44.1411 56.7852 44.1838 56.5783 44.3119 cv
56.5518 44.3283 li
56.5784 44.3118 li
55.1839 45.1871 54.3098 46.8629 52.5753 48.7042 cv
50.8449 50.5474 48.2768 52.5823 43.5551 54.1707 cv
40.3677 55.2418 36.1992 56.1052 30.6556 56.5531 cv
25.752 56.9596 18.773 61.3193 12.81 67.5499 cv
6.85599 73.7842 1.93683 81.8994 1.31325 89.8805 cv
1.31321 89.8812 li
1.31313 89.8821 li
1.27268 90.4486 1.25007 91.1285 1.25003 91.9038 cv
1.251 96.6243 2.08679 104.892 4.92477 112.299 cv
5.15821 112.209 li
4.91714 112.276 li
4.92251 112.295 li
4.92602 112.308 li
4.97866 112.442 li
4.97826 112.441 li
5.02997 112.575 5.08159 112.709 5.13508 112.842 cv
5.1346 112.841 li
5.13427 112.84 li
5.41632 113.564 5.71765 114.257 6.03639 114.92 cv
6.26171 114.812 li
6.0353 114.918 li
7.9335 118.973 10.5319 122.575 14.0581 124.903 cv
14.1958 124.694 li
14.0421 124.891 li
17.1545 127.317 19.6998 128.228 19.7176 128.235 cv
20.4768 128.506 li
20.0043 127.853 li
18.219 125.383 17.1245 122.743 17.1239 119.788 cv
17.124 118.509 17.3293 117.169 17.7774 115.755 cv
17.5391 115.679 li
17.2963 115.739 li
17.9541 118.422 19.2637 120.047 21.1018 120.692 cv
21.5802 120.861 li
21.4227 120.379 li
21.0969 119.383 20.8908 118.457 20.8915 117.668 cv
20.892 116.985 21.0423 116.413 21.3851 115.955 cv
21.1851 115.805 li
20.9515 115.894 li
23.5247 122.665 26.3791 125.04 29.2299 126.706 cv
29.9964 127.156 li
29.5768 126.373 li
27.1693 121.876 25.8043 117.244 25.8041 112.417 cv
25.8041 112.002 25.8142 111.585 25.8347 111.166 cv
25.5849 111.154 li
25.355 111.252 li
27.947 117.333 32.0069 121.278 35.9672 125.284 cv
36.3562 124.974 li
32.5822 119.019 29.4825 112.925 29.418 106.06 cv
29.168 106.062 li
28.9545 106.192 li
30.6684 109.006 32.9414 111.188 35.6354 112.874 cv
35.9804 112.531 li
34.5099 110.163 33.7135 107.742 33.7132 105.241 cv
33.7132 104.915 33.7267 104.589 33.754 104.26 cv
33.5049 104.24 li
33.3185 104.406 li
37.7871 109.404 42.7923 111.087 47.7674 112.526 cv
47.9799 112.081 li
42.7928 108.464 38.1839 104.572 35.7409 99.603 cv
35.5166 99.7134 li
35.4061 99.9376 li
37.6787 101.058 39.959 101.467 42.2272 101.467 cv
42.9753 101.467 43.7224 101.423 44.4683 101.345 cv
45.3145 101.257 li
44.5551 100.873 li
40.9463 99.0478 39.6185 95.7755 38.9054 91.9983 cv
38.6597 92.0444 li
38.4812 92.2195 li
43.6797 97.5213 49.1163 101.086 54.6355 103.959 cv
54.9245 103.557 li
49.4855 98.3136 45.4874 92.9491 43.4191 87.4313 cv
43.185 87.519 li
43.0626 87.737 li
44.8795 88.7576 46.6805 89.3277 48.4564 89.3279 cv
48.7631 89.3279 49.0688 89.3108 49.3734 89.2762 cv
49.851 89.222 li
49.5324 88.8621 li
46.8098 85.7844 46.1246 82.7925 45.3767 79.7279 cv
45.1338 79.7871 li
44.9264 79.9268 li
47.5778 83.863 49.9275 86.005 52.1242 87.1133 cv
52.7874 87.4478 li
52.4615 86.7804 li
51.33 84.4628 50.8375 82.3021 50.8372 80.2565 cv
50.8373 78.3948 51.2456 76.6258 51.9643 74.9188 cv
51.7339 74.8218 li
51.5956 75.0301 li
54.0768 76.6793 56.4158 79.2441 58.4165 84.2177 cv
58.6801 84.874 li
58.8875 84.1978 li
59.0509 83.6642 59.1217 83.0668 59.1219 82.4175 cv
59.119 79.9875 58.1355 76.8028 56.9992 73.4834 cv
56.7627 73.5644 li
56.694 73.8048 li
58.7319 74.3734 61.3355 77.0446 64.7118 83.6111 cv
65.1832 83.4753 li
64.8459 79.5466 63.0191 75.6133 61.0081 71.6906 cv
60.7856 71.8047 li
60.5963 71.9679 li
61.9465 73.5326 63.6311 76.2958 64.9843 78.6583 cv
65.6617 79.8402 66.258 80.9234 66.694 81.7121 cv
66.912 82.1066 67.0898 82.4272 67.2189 82.6519 cv
67.2836 82.7645 67.3357 82.8525 67.3771 82.9174 cv
67.4355 83.0024 li
67.4754 83.0472 li
67.5207 83.0826 li
67.6572 83.1221 li
67.7486 83.1309 67.8649 83.0425 67.8843 82.9804 cv
67.9107 82.8649 li
67.9053 82.772 67.8914 82.7593 67.8757 82.7041 cv
67.806 82.5221 li
67.5742 82.6157 li
67.8242 82.6157 li
67.5742 82.6157 li
67.3424 82.7094 li
67.4032 82.8679 li
67.414 82.9014 li
67.5499 82.8649 li
67.4107 82.8649 li
67.414 82.9014 li
67.5499 82.8649 li
67.4107 82.8649 li
67.6487 82.8649 li
67.4353 82.7602 li
67.4107 82.8649 li
67.6487 82.8649 li
67.4353 82.7602 li
67.6572 82.869 li
67.6572 82.6221 li
67.4353 82.7602 li
67.6572 82.869 li
67.6572 82.6221 li
67.6572 82.8644 li
67.7859 82.6587 li
67.6572 82.6221 li
67.6572 82.8644 li
67.7859 82.6587 li
67.6827 82.8237 li
67.8304 82.6957 li
67.7859 82.6587 li
67.6827 82.8237 li
67.8304 82.6957 li
67.8273 82.6913 li
67.7929 82.6449 67.6847 82.4628 67.5395 82.204 cv
66.5039 80.3678 63.3215 74.3671 60.975 71.6415 cv
60.5632 71.9188 li
62.5707 75.8291 64.362 79.7161 64.685 83.5179 cv
64.9341 83.4966 li
65.1563 83.3821 li
61.7485 76.7855 59.1431 73.9987 56.8314 73.3241 cv
56.3708 73.1924 li
56.5262 73.6455 li
57.6615 76.9506 58.6247 80.1184 58.6218 82.4175 cv
58.622 83.0304 58.5542 83.5796 58.4094 84.0512 cv
58.6485 84.1245 li
58.8804 84.0313 li
56.8567 78.9893 54.4388 76.3149 51.8721 74.6135 cv
51.6206 74.4465 li
51.5035 74.7247 li
50.7629 76.4828 50.337 78.3211 50.3372 80.2565 cv
50.3369 82.3832 50.8516 84.6241 52.0122 86.9998 cv
52.2368 86.8901 li
52.3494 86.6669 li
50.2591 85.6132 47.9642 83.5422 45.3411 79.6475 cv
44.8909 79.8463 li
45.6351 82.8999 46.3494 86.0232 49.158 89.1935 cv
49.3452 89.0278 li
49.317 88.7794 li
49.0314 88.8119 48.7445 88.8278 48.4564 88.8278 cv
46.7894 88.828 45.072 88.2922 43.3075 87.3011 cv
42.7107 86.9658 li
42.951 87.6068 li
45.0576 93.2238 49.1053 98.6404 54.5775 103.917 cv
54.751 103.737 li
54.8664 103.515 li
49.3778 100.658 43.9932 97.1262 38.8382 91.8694 cv
38.2622 91.282 li
38.4139 92.0906 li
39.1275 95.913 40.5263 99.4004 44.3297 101.319 cv
44.4424 101.096 li
44.4165 100.848 li
43.6853 100.924 42.9556 100.967 42.2272 100.967 cv
40.0182 100.967 37.8239 100.571 35.6271 99.4891 cv
34.9678 99.1644 li
35.2923 99.8238 li
37.8044 104.925 42.4865 108.857 47.6939 112.491 cv
47.8369 112.286 li
47.9064 112.045 li
42.9392 110.607 38.0713 108.966 33.6912 104.073 cv
33.3039 103.64 li
33.2557 104.219 li
33.2273 104.561 33.2132 104.902 33.2132 105.241 cv
33.2129 107.85 34.0472 110.367 35.5557 112.795 cv
35.7681 112.663 li
35.9007 112.451 li
33.2637 110.799 31.0533 108.675 29.3815 105.932 cv
28.9093 105.157 li
28.918 106.064 li
28.9862 113.084 32.1473 119.265 35.9339 125.242 cv
36.145 125.108 li
36.3228 124.932 li
32.3544 120.92 28.3616 117.031 25.815 111.056 cv
25.3353 111.142 li
25.3144 111.568 25.3041 111.994 25.3041 112.417 cv
25.3039 117.34 26.6981 122.056 29.136 126.609 cv
29.3564 126.491 li
29.483 126.275 li
26.697 124.633 23.9792 122.414 21.4187 115.716 cv
21.2571 115.292 li
20.985 115.655 li
20.5608 116.221 20.3909 116.914 20.3915 117.668 cv
20.3921 118.542 20.6136 119.511 20.9474 120.534 cv
21.1851 120.457 li
21.2683 120.221 li
19.6211 119.636 18.4268 118.21 17.7817 115.619 cv
17.5689 114.757 li
17.3007 115.604 li
16.8384 117.063 16.6239 118.455 16.6239 119.788 cv
16.6234 122.87 17.7718 125.621 19.5992 128.146 cv
19.8018 128 li
19.8859 127.764 li
19.7785 127.723 li
19.2703 127.525 17.0231 126.581 14.3495 124.497 cv
14.3418 124.491 li
14.3335 124.485 li
10.9124 122.229 8.36046 118.707 6.48813 114.706 cv
6.48752 114.705 li
6.48704 114.704 li
6.17396 114.052 5.87762 113.371 5.6001 112.659 cv
5.59974 112.658 li
5.5993 112.657 li
5.54731 112.527 5.4964 112.395 5.44457 112.261 cv
5.44413 112.26 li
5.40114 112.15 li
5.39924 112.143 li
5.39601 112.131 li
5.39165 112.12 li
2.58419 104.8 1.74909 96.5684 1.75006 91.9038 cv
1.75002 91.1383 1.77246 90.4692 1.81186 89.9177 cv
1.81182 89.9184 li
1.81174 89.9193 li
2.41425 82.1177 7.26753 74.0708 13.1715 67.8953 cv
19.0666 61.7161 26.0312 57.4184 30.6959 57.0514 cv
36.2706 56.6009 40.4789 55.7318 43.7144 54.6447 cv
48.506 53.0358 51.1658 50.9399 52.94 49.0462 cv
54.7099 47.1505 55.6169 45.4832 56.8416 44.737 cv
57.0484 44.6089 57.1171 44.5663 57.1174 44.5662 cv
57.2291 44.4109 li
57.1983 44.222 li
57.043 44.1102 li
56.8542 44.1411 li
56.5783 44.3119 li
56.4983 44.3614 li
56.4708 44.4514 li
55.4337 47.8493 55.0479 50.6492 55.0479 52.9984 cv
55.0465 57.0575 56.2049 59.7684 57.0932 61.8557 cv
57.3233 61.7578 li
57.0841 61.8307 li
57.6829 63.7946 58.6805 65.9658 60.3338 68.1822 cv
65.8595 75.5932 67.325 79.1816 67.3242 82.6157 cv
67.3242 82.6643 li
67.3424 82.7094 li
67.5742 82.6157 li
.75021 .679683 .670222 .90164 cmyk
f
83.915 43.5576 mo
83.915 43.5576 83.6631 51.0298 90.6318 46.1601 cv
94.2422 46.2441 92.6465 42.2983 92.6465 42.2983 cv
95.081 41.6264 95.4541 38.456 94.4941 36.5894 cv
97.6006 36.6733 97.1064 31.8711 96.6768 30.2085 cv
99.1113 29.2852 99.4473 26.3779 98.4395 24.0796 cv
101.378 23.4082 101.462 19.9658 101.21 17.5312 cv
104.232 17.3633 103.813 12.0742 103.813 10.9824 cv
106.416 9.3037 105.828 7.03663 106.237 4.40965 cv
107.843 1.15965 105.66 .236347 104.121 3.6992 cv
102.47 6.7007 100.353 8.00975 100.371 10.227 cv
101.126 11.4863 94.7461 13.3335 96.7607 17.2793 cv
95.333 19.0425 91.9756 21.3091 93.169 24.0127 cv
92.5625 25.3389 88.2812 28.4453 90.1279 31.3838 cv
86.0986 34.0703 86.3389 34.7187 87.1894 37.1767 cv
85.0381 38.5566 82.7842 41.3076 83.915 43.5576 cv
.485664 .508232 .629236 .209598 cmyk
f
83.915 43.5576 mo
83.6652 43.5492 li
83.6639 43.6535 li
83.6649 43.9849 83.692 45.0445 84.0717 46.0554 cv
84.2625 46.5605 84.5436 47.0574 84.9702 47.435 cv
85.3954 47.8133 85.9712 48.0601 86.6912 48.0583 cv
87.7234 48.0562 89.0391 47.5766 90.775 46.3651 cv
90.6318 46.1601 li
90.6261 46.4101 li
90.7442 46.4115 li
91.7003 46.4141 92.3534 46.124 92.7443 45.6631 cv
93.1346 45.2034 93.2474 44.62 93.2478 44.0805 cv
93.2456 43.1049 92.8829 42.2203 92.8782 42.2046 cv
92.6465 42.2983 li
92.713 42.5393 li
93.5929 42.2979 94.2349 41.7427 94.6412 41.053 cv
95.0491 40.3626 95.2325 39.5407 95.2328 38.7285 cv
95.2324 37.9272 95.0544 37.1332 94.7164 36.475 cv
94.4941 36.5894 li
94.4874 36.8392 li
94.574 36.8405 li
95.6225 36.8485 96.3404 36.2869 96.7268 35.5192 cv
97.1208 34.7526 97.2436 33.7865 97.2449 32.8541 cv
97.2444 31.7883 97.0792 30.7683 96.9188 30.1459 cv
96.6768 30.2085 li
96.7654 30.4423 li
98.4811 29.7948 99.2287 28.201 99.2218 26.5485 cv
99.2215 25.6856 99.0264 24.7962 98.6684 23.9792 cv
98.4395 24.0796 li
98.4951 24.3233 li
99.7305 24.0451 100.521 23.2768 100.967 22.3265 cv
101.416 21.3758 101.55 20.2465 101.551 19.1624 cv
101.551 18.5863 101.512 18.0227 101.459 17.5055 cv
101.21 17.5312 li
101.224 17.7809 li
101.873 17.7466 102.401 17.4857 102.794 17.0916 cv
103.385 16.4994 103.695 15.6379 103.872 14.7481 cv
104.046 13.8571 104.082 12.9296 104.082 12.1942 cv
104.082 11.6506 104.062 11.2084 104.063 10.9824 cv
103.813 10.9824 li
103.948 11.1925 li
105.304 10.3248 105.86 9.24973 106.093 8.10251 cv
106.329 6.95465 106.283 5.73259 106.484 4.44816 cv
106.237 4.40965 li
106.461 4.52038 li
106.871 3.69024 107.049 2.99747 107.05 2.45332 cv
107.05 2.11146 106.98 1.82292 106.825 1.60211 cv
106.673 1.38026 106.418 1.24648 106.15 1.25028 cv
105.771 1.25419 105.388 1.46757 105.006 1.85259 cv
104.624 2.24063 104.241 2.81448 103.893 3.59768 cv
104.121 3.6992 li
103.902 3.5787 li
103.094 5.04712 102.17 6.10719 101.429 7.0944 cv
100.692 8.07773 100.121 9.01157 100.121 10.1981 cv
100.121 10.2293 li
100.122 10.2972 li
100.157 10.3556 li
100.184 10.4458 li
100.202 10.5489 100.01 10.8377 99.6329 11.1568 cv
99.0794 11.6445 98.2115 12.2428 97.4749 12.9868 cv
96.7405 13.7293 96.1169 14.6408 96.1154 15.767 cv
96.1152 16.2766 96.2456 16.8209 96.5381 17.393 cv
96.7607 17.2793 li
96.5665 17.122 li
95.9797 17.8486 95.0164 18.6966 94.1931 19.643 cv
93.3732 20.5899 92.671 21.6501 92.6671 22.8538 cv
92.6669 23.2648 92.7521 23.6879 92.9402 24.1137 cv
93.169 24.0127 li
92.9416 23.9087 li
92.8427 24.1305 92.5702 24.4779 92.2217 24.8797 cv
91.1814 26.1012 89.4349 27.8604 89.4189 29.834 cv
89.4182 30.3926 89.5684 30.9646 89.9163 31.5168 cv
90.1279 31.3838 li
89.9892 31.1758 li
88.6601 32.0627 87.7855 32.7306 87.2264 33.3378 cv
86.6674 33.9403 86.4238 34.5157 86.4273 35.129 cv
86.4298 35.768 86.6631 36.4151 86.9532 37.2585 cv
87.1894 37.1767 li
87.0545 36.9663 li
85.2609 38.1274 83.3799 40.1795 83.3628 42.2721 cv
83.3626 42.7452 83.4648 43.219 83.6917 43.6699 cv
83.915 43.5576 li
83.6652 43.5492 li
83.915 43.5576 li
84.1384 43.4454 li
83.9478 43.0655 83.8632 42.6744 83.8629 42.2721 cv
83.8458 40.4977 85.6096 38.4764 87.3244 37.3872 cv
87.4901 37.2809 li
87.4257 37.095 li
87.1316 36.2504 86.9248 35.6361 86.9273 35.129 cv
86.9308 34.6464 87.0896 34.2313 87.5945 33.6761 cv
88.0993 33.1257 88.95 32.4689 90.2666 31.5918 cv
90.4691 31.4568 li
90.3396 31.2508 li
90.0403 30.7731 89.9196 30.3049 89.9189 29.834 cv
89.9137 28.7294 90.6226 27.5815 91.4266 26.5812 cv
91.8268 26.0807 92.2459 25.6173 92.6004 25.2063 cv
92.955 24.7926 93.2451 24.4418 93.3963 24.1166 cv
93.443 24.0145 li
93.3977 23.9117 li
93.2364 23.546 93.1673 23.1964 93.1671 22.8538 cv
93.1632 21.86 93.7734 20.8856 94.5706 19.9709 cv
95.3645 19.0556 96.323 18.2151 96.955 17.4366 cv
97.0573 17.3103 li
96.9834 17.1656 li
96.7219 16.6528 96.6157 16.1915 96.6155 15.767 cv
96.6085 14.5334 97.5512 13.5166 98.5602 12.673 cv
99.0614 12.252 99.5686 11.8785 99.9629 11.5323 cv
100.348 11.1812 100.665 10.879 100.684 10.4458 cv
100.684 10.3265 100.65 10.2043 100.586 10.0985 cv
100.371 10.227 li
100.621 10.2248 li
100.621 10.1981 li
100.621 9.18486 101.103 8.36348 101.829 7.39436 cv
102.553 6.42915 103.504 5.3397 104.34 3.81973 cv
104.345 3.81045 li
104.35 3.80076 li
104.679 3.05943 105.036 2.53381 105.362 2.20349 cv
105.687 1.87019 105.98 1.74638 106.15 1.7503 cv
106.271 1.75409 106.341 1.78957 106.417 1.89057 cv
106.49 1.9927 106.551 2.18065 106.55 2.45332 cv
106.551 2.88577 106.4 3.51811 106.013 4.29893 cv
105.996 4.33332 li
105.99 4.37118 li
105.783 5.7137 105.826 6.93866 105.603 8.00079 cv
105.377 9.06348 104.925 9.96132 103.677 10.7723 cv
103.563 10.8462 li
103.563 10.9824 li
103.563 11.2313 103.582 11.6608 103.582 12.1942 cv
103.583 13.1513 103.516 14.4336 103.171 15.4609 cv
102.999 15.9747 102.76 16.4208 102.441 16.7373 cv
102.121 17.0533 101.73 17.2502 101.196 17.2816 cv
100.934 17.2962 li
100.961 17.557 li
101.014 18.0617 101.051 18.6088 101.051 19.1624 cv
101.052 20.2046 100.916 21.2687 100.515 22.1124 cv
100.11 22.9564 99.4702 23.5836 98.3838 23.8359 cv
98.0891 23.9032 li
98.2105 24.18 li
98.542 24.9356 98.722 25.7613 98.7217 26.5485 cv
98.7148 28.069 98.0757 29.4073 96.5881 29.9747 cv
96.3787 30.0542 li
96.4347 30.2711 li
96.584 30.8471 96.7454 31.8415 96.7449 32.8541 cv
96.7462 33.7408 96.6189 34.6428 96.2826 35.2896 cv
95.9388 35.9354 95.4462 36.3324 94.574 36.3404 cv
94.5009 36.3394 li
94.0787 36.328 li
94.2718 36.7037 li
94.568 37.2785 94.7333 38.002 94.7328 38.7285 cv
94.7332 39.4655 94.5636 40.2035 94.2109 40.7983 cv
93.8568 41.3937 93.3306 41.8488 92.58 42.0574 cv
92.3095 42.132 li
92.4147 42.3921 li
92.4148 42.3922 92.4337 42.4388 92.465 42.5297 cv
92.5594 42.8017 92.7488 43.4427 92.7478 44.0805 cv
92.7481 44.554 92.645 45.011 92.3639 45.3386 cv
92.0834 45.6649 91.6097 45.9088 90.7442 45.9115 cv
90.6376 45.9102 li
90.5557 45.9083 li
90.4886 45.9552 li
88.7991 47.1373 87.5617 47.5604 86.6912 47.5583 cv
86.082 47.5565 85.6461 47.3627 85.3013 47.0604 cv
84.7856 46.6079 84.4892 45.8755 84.3355 45.1898 cv
84.1804 44.5058 84.1637 43.8779 84.1639 43.6535 cv
84.1649 43.566 li
84.167 43.5023 li
84.1384 43.4454 li
83.915 43.5576 li
.75021 .679683 .670222 .90164 cmyk
f
101.923 10.929 mo
101.406 10.929 101.004 10.7751 101.004 10.4282 cv
101.004 9.61913 101.739 8.29494 101.739 8.29494 cv
101.135 10.0108 101.821 10.2233 102.926 10.2233 cv
103.234 10.2233 103.576 10.2067 103.931 10.2017 cv
103.507 10.6558 102.612 10.929 101.923 10.929 cv
.273045 .24979 .293309 3.0518e-05 cmyk
f
99.0327 17.6324 mo
98.2528 17.6324 97.499 17.3925 97.2949 16.8819 cv
96.665 15.6333 97.4775 14.5654 97.4775 14.5654 cv
96.7287 16.6908 99.0616 17.0505 100.686 17.0505 cv
100.739 17.0505 100.792 17.0501 100.844 17.0493 cv
100.488 17.43 99.7495 17.6324 99.0327 17.6324 cv
f
95.5928 24.3084 mo
94.7013 24.3084 93.8506 24.064 93.8506 23.6211 cv
93.3447 22.3657 94.3428 21.0195 94.3428 21.0195 cv
93.7978 23.2467 95.7218 23.7825 97.3277 23.7825 cv
97.3621 23.7825 97.3965 23.7822 97.4307 23.7817 cv
97.0948 24.1415 96.3299 24.3084 95.5928 24.3084 cv
f
92.5925 31.4724 mo
92.066 31.4724 91.5513 31.3712 91.1162 31.1265 cv
89.8623 29.7241 91.2656 28.1816 91.2656 28.1816 cv
90.7714 30.2012 93.2917 30.3859 95.0007 30.3859 cv
95.2168 30.3859 95.4201 30.383 95.6025 30.3804 cv
95.0849 30.9348 93.8067 31.4724 92.5925 31.4724 cv
f
90.0922 37.5969 mo
89.388 37.5969 88.7205 37.4849 88.2412 37.2153 cv
86.6855 35.3164 88.2607 33.9028 88.2607 33.9028 cv
87.5702 35.2612 91.8569 36.6189 93.5128 36.6189 cv
93.5265 36.6189 93.5403 36.6188 93.5537 36.6186 cv
93.0588 37.1487 91.5016 37.5969 90.0922 37.5969 cv
f
86.6238 43.8893 mo
85.9378 43.8893 85.3424 43.8012 84.9648 43.5889 cv
83.7109 42.1865 85.1143 40.644 85.1143 40.644 cv
84.6821 42.4101 87.936 42.6315 90.1739 42.6315 cv
90.8187 42.6315 91.3797 42.613 91.7432 42.6079 cv
91.1958 43.1942 88.5514 43.8893 86.6238 43.8893 cv
f
83.9971 43.6723 mo
83.5469 43.2222 83.4629 42.7764 83.6299 41.9541 cv
83.6299 41.9541 83.999 37.8467 67.2974 41.7964 cv
66.2251 42.5366 69.6934 46.5186 69.6934 46.5186 cv
69.6934 46.5186 70.1113 46.7334 70.7407 46.104 cv
70.9941 47.2265 71.5928 50.1851 70.9741 50.6826 cv
72.2187 49.9116 72.8423 48.7368 72.6499 46.5571 cv
74.7715 47.0181 76.3916 48.1968 77.3418 50.3359 cv
77.6455 48.936 77.9444 47.5366 76.958 46.21 cv
79.1396 46.4946 80.8379 47.7061 82.3203 49.3335 cv
82.541 48.4009 82.6748 47.4507 82.3203 46.4028 cv
83.7109 46.8755 84.9072 48.0103 86.0303 49.3911 cv
86.0303 49.3911 86.2402 45.5293 83.9971 43.6723 cv
.266697 .769772 .868132 .18674 cmyk
f
83.9971 43.6723 mo
84.1739 43.4956 li
83.8992 43.2124 83.8064 43.0004 83.8003 42.6227 cv
83.8003 42.4523 83.825 42.2489 83.8749 42.0039 cv
83.8776 41.9902 li
83.8789 41.9763 li
83.8805 41.9329 li
83.886 41.7724 83.8065 41.2048 83.1097 40.7245 cv
82.4162 40.2432 81.151 39.8321 78.7639 39.8309 cv
76.3139 39.8312 72.6749 40.268 67.2398 41.5531 cv
67.1941 41.5639 li
67.1553 41.5906 li
66.9304 41.7425 66.8372 42.0054 66.8416 42.2507 cv
66.8456 42.653 67.0268 43.0967 67.2773 43.575 cv
68.0328 44.9967 69.4995 46.6749 69.5048 46.6828 cv
69.5363 46.7189 li
69.579 46.7409 li
69.6057 46.7547 69.714 46.8039 69.886 46.8039 cv
70.1394 46.8057 70.511 46.6903 70.9175 46.2808 cv
70.7407 46.104 li
70.4969 46.1591 li
70.6682 46.9137 70.9967 48.5256 70.9953 49.5911 cv
70.9955 49.8401 70.977 50.0579 70.9402 50.217 cv
70.905 50.3782 70.8462 50.4687 70.8174 50.4878 cv
71.1058 50.8951 li
72.2668 50.1878 72.9449 49.0691 72.9342 47.2971 cv
72.9342 47.056 72.9225 46.8024 72.8989 46.5351 cv
72.6499 46.5571 li
72.5968 46.8014 li
74.6576 47.2547 76.1882 48.3674 77.1133 50.4374 cv
77.4239 51.1366 li
77.5861 50.389 li
77.7325 49.7121 77.8837 49.0195 77.8842 48.3149 cv
77.8859 47.5627 77.7037 46.7913 77.1586 46.0608 cv
76.958 46.21 li
76.9257 46.4578 li
79.0296 46.7329 80.6727 47.8975 82.1355 49.5019 cv
82.4545 49.852 li
82.5636 49.391 li
82.6881 48.8644 82.7887 48.3207 82.7888 47.7479 cv
82.789 47.2907 82.7239 46.8154 82.5571 46.3227 cv
82.3203 46.4028 li
82.2398 46.6395 li
83.5549 47.0842 84.7259 48.1813 85.8363 49.5488 cv
86.2448 50.0511 li
86.2799 49.4047 li
86.2801 49.4007 86.2855 49.3002 86.2855 49.126 cv
86.2852 48.6607 86.2479 47.6701 85.9668 46.5844 cv
85.6852 45.5004 85.1597 44.312 84.1565 43.4798 cv
83.9971 43.6723 li
84.1739 43.4956 li
83.9971 43.6723 li
83.8376 43.8649 li
84.7238 44.5969 85.2176 45.6839 85.4828 46.7099 cv
85.7486 47.7342 85.7857 48.6884 85.7855 49.126 cv
85.7855 49.29 85.7804 49.3773 85.7806 49.3776 cv
86.0303 49.3911 li
86.2242 49.2334 li
85.0886 47.8392 83.8669 46.6668 82.4007 46.1661 cv
81.9212 46.0032 li
82.0835 46.483 li
82.2315 46.9209 82.2887 47.3376 82.2888 47.7479 cv
82.2889 48.2614 82.1979 48.7656 82.077 49.2759 cv
82.3203 49.3335 li
82.5051 49.1652 li
81.0031 47.5146 79.2496 46.2563 76.9903 45.9621 cv
76.4054 45.8858 li
76.7574 46.3591 li
77.2316 46.9997 77.3825 47.6382 77.3842 48.3149 cv
77.3847 48.9465 77.2446 49.6067 77.0975 50.2829 cv
77.3418 50.3359 li
77.5703 50.2345 li
76.5949 48.0262 74.8853 46.7815 72.703 46.3128 cv
72.371 46.2407 li
72.4009 46.5791 li
72.4233 46.8332 72.4342 47.0723 72.4342 47.2971 cv
72.4236 48.955 71.873 49.8198 70.8424 50.4701 cv
70.9741 50.6826 li
71.1308 50.8774 li
71.2998 50.7374 71.3765 50.5432 71.4275 50.3288 cv
71.4768 50.1124 71.495 49.8639 71.4953 49.5911 cv
71.4938 48.4364 71.158 46.8216 70.9846 46.0489 cv
70.8847 45.6065 li
70.564 45.9272 li
70.2223 46.2657 69.9952 46.3021 69.886 46.3039 cv
69.8085 46.2949 li
69.8076 46.2962 li
69.6934 46.5186 li
69.8819 46.3543 li
69.8815 46.3539 69.7224 46.1714 69.4808 45.8741 cv
69.1185 45.4285 68.574 44.7285 68.1252 44.0289 cv
67.6733 43.3362 67.3315 42.614 67.3416 42.2507 cv
67.346 42.1001 67.3772 42.0485 67.4394 42.0021 cv
67.2974 41.7964 li
67.3549 42.0397 li
72.7655 40.7599 76.373 40.3306 78.7639 40.3309 cv
81.0956 40.3298 82.2637 40.7415 82.8237 41.1346 cv
83.3806 41.5288 83.3751 41.8871 83.3805 41.9329 cv
83.3925 41.9329 li
83.3809 41.9319 li
83.3805 41.9329 li
83.3925 41.9329 li
83.3809 41.9319 li
83.6299 41.9541 li
83.3849 41.9043 li
83.331 42.17 83.3004 42.4047 83.3004 42.6227 cv
83.2943 43.1069 83.4741 43.5115 83.8203 43.8492 cv
83.8286 43.8575 li
83.8376 43.8649 li
83.9971 43.6723 li
.75021 .679683 .670222 .90164 cmyk
f
87.4111 85.3446 mo
86.8352 85.3446 86.2213 85.3332 85.5693 85.3091 cv
74.7354 84.9077 67.9746 71.3179 67.9746 71.3179 cv
77.0221 81.3522 87.3592 82.8508 92.7289 82.8508 cv
95.0166 82.8508 96.4033 82.5786 96.4033 82.5786 cv
96.4033 82.5786 96.4044 85.3446 87.4111 85.3446 cv
.678767 .35581 .560235 .118166 cmyk
f
115.721 151.627 mo
115.721 151.627 98.7326 138.124 87.1456 138.124 cv
86.8601 138.124 86.5794 138.132 86.3008 138.149 cv
86.3008 138.149 83.6143 128.481 75.7158 120.583 cv
64.4707 109.337 59.5469 94.7066 71.1304 79.0122 cv
73.4092 82.1167 75.9863 84.2329 78.8525 85.3941 cv
78.8525 85.3941 71.4873 96.5024 75.2412 105.417 cv
78.9951 114.332 88.3662 116.47 98.5625 126.666 cv
106.505 134.609 115.721 151.627 115.721 151.627 cv
f
8.06102 114.354 mo
8.06102 114.354 5.51759 107.492 4.16991 100.174 cv
.51415 86.395 10.8984 66.4937 27.9473 59.71 cv
43.9429 58.7226 48.4888 54.1284 52.3623 51.627 cv
32.6694 66.9155 38.2861 70.2304 41.0942 71.9092 cv
40.6323 71.9582 40.1708 71.9848 39.7098 71.9848 cv
38.0603 71.9848 36.4171 71.6451 34.7842 70.7822 cv
33.1338 72.2954 32.8828 73.6719 34.7842 74.8389 cv
34.422 74.7658 34.0706 74.7301 33.7292 74.7301 cv
32.0542 74.7301 30.6232 75.5883 29.376 77.0923 cv
30.5938 82.0298 33.4756 84.103 36.1367 86.5571 cv
32.8843 85.7739 29.6182 85.0903 26.6714 82.0503 cv
25.7466 83.6294 25.4141 85.2066 26.6714 86.7827 cv
26.0339 87.1145 25.387 87.2981 24.7285 87.2981 cv
24.1099 87.2981 23.481 87.1361 22.8403 86.7827 cv
21.604 91.1811 23.5625 95.52 25.77 99.853 cv
22.5703 97.6167 19.4961 95.186 18.1079 90.1636 cv
16.2412 92.5268 15.9795 94.9253 18.1079 97.3745 cv
17.675 97.5255 17.2432 97.6042 16.8123 97.6042 cv
15.735 97.6042 14.664 97.1115 13.6006 96.022 cv
11.8125 98.4263 12.0107 100.83 13.6006 103.234 cv
12.063 103.223 10.5288 103.139 9.09376 100.755 cv
6.67822 102.957 7.17384 108.435 8.06102 114.354 cv
.258885 .620569 .664363 .0861524 cmyk
f
76.7021 39.3755 mo
76.8105 37.1055 76.9502 34.582 78.9228 32.7715 cv
79.3445 32.3639 79.6145 32.1848 79.7635 32.1848 cv
79.9664 32.1848 79.9447 32.517 79.7764 33.0562 cv
78.7939 35.416 80.1289 37.7036 80.5732 39.2617 cv
76.7021 39.3755 li
.398169 .111482 .305821 3.0518e-05 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (greg newman) ()%%Title: (org-mode-unicorn.eps)%%CreationDate: 6/17/09 6:49 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&q-NVaegUIP!;?IC1.)[@!iX0K$7ZD."#<847K`#5chkbnp2<rB%[e11m/<OD?U'NAAQ@9\2:l#3?>k;$ReDNc6%8O"Zo_#/%h%W;fBpNq_PGHCfXUag0Kt^9G8>^@DBJMk"TQN@hYUg*Q&5eml)>L?ol`DMhFP5Sb4`7MQbf2GfO`hQ?FJeK,c2c^Cgs=c#4T!m(%+*W#UQT',NBU=KaXut_lSY_f$U',d5;XOBs3::.W-=)XemMQd'NjgaaqZXb:YirRcpgVqrYPMK+J9(UH$+sT;(Mk&jDK<oH9E[h:%-<I^'Y,MYnFq[_25u8j)5Js@cA/tUl.#NTu.=u)D\,Z,])[mNU^9\g)VXFP*0`5`Nl0ont*%0EQMFk'jMMt'c.2q[XBH^8A'(D*B%OpNliI+.(%o5SEb@B@l[&P]d7<!rV)r>&T=>&^MV+?E99h2rBlALW@RZU@-)!Za`Z2GOW%.+m_^)KL>*!Th#RF?*QQ$YX;aHNM'*%r3A?\+2B!j6a+AA_OJ0fR,dY5_^/!56'"p\VcU2g2ob%p^FtX0#bM8!0<+k"1h_%,!Oi1MRZ1AS@;0p`l2aqmhYG&4Z=&@rDW]`]%21*+`NfZpkaX0sS6rNqK7cT`&,SRPSAOnbJ`8.Y;2bBk,hFZs=TaLu7JWosCrW>gN!+NIsLP+PBSKuu&L(K0:_@QMNNNeX/.K"g2%'MYV,Q]h=q$luRV>]NaT0gN+".g6Eak>`0V/PZ+rf`Wl8d%iT2F>O0l)p\`*48Cga".udZ_DLc>mHYXsL/eADY&!q^fkuaMn>a@O%<qD76f?E@&ok.RU%AVlB\*u02p>\B6s,V>Xo75rS7ICP.;#+@@>+5H0NG!;I=SYO$g35c)ppiP$@*<8>GN7jAjSJ@!Ggh5C.Bo(M%p-;hEU@*U0VYe:(QLM0S5jmQ>4C2HVSak+Qghqq=jYt7+DVAI=!/*SEUD'6PO07/'Pek!'r+bchDTud')6EOs$se7>T;)&ZN]nBV%KB^W[5gXgQ@KV$S+<pf-]g-B)*oQ.p)1%u4*Y/L'BDt'\)0K?V?LCC0[g?LAR<3*%iF8P.PNk`7__6eY1"Z?0=E5'*BF#Pa_eC1u%Z+1c*3G#S(aW+G"mcJ_+c=**`mkSe6PQ<,b+<B#'0+tN*N#R8.'&FaR\GS,eP9EtrcMjEp5MTt>rtT'RB/O#0#McTMc@g7o?*WN'%oJ\-T+l#"/;"O1K3&2RLIgH(&lG*XK/phY,:i&ofQ_[jEO$E-S-2dOh7t8-bpQbXKST+>^l-l126gqWrJil29\RR=8pjYCt^ksm9%><Fc(@o-U($[(1e3ZbBZ6Gb5Jl$lrRQ;aQ6?mb,_!\)Pc*-=8s:*^Gd!/o8n4I&7EQ:t.dJqY:GMC(peKM"!6Rm:ZZhjr.DGNB84%b+Bhm5_Me98MZPBN.EBKJ7XAQai;_X">o+VaWq69'C[RsI[FO,GVXh68eMFCO!C6J$0*>-#mtfN1[lJC+@c>R_'@?88/=K:'6+U2%Qtj\dK`9s1=>Z*bP9f0&mY,(H-SQV\:HqU9.0^;D`=Qi`K$+^=Ot;,X&E4rSH$KjqV:pUDl`_.>b$H;)ggD(=+pm4n+=e"js%e"N%J92;rJ;[p&%,#*&fl;;l1$NUa3:th,LIeD^s"XG@E6%MljkThFaK#<FXLCp9@i+XB^Gd,'_@p#\iDG(gN!bX*N&u4'Fl:/_Vr&;^%OV4b7I's_1al"P;`CP5q!b1Q6SQd[Ym^itM6lp/[?"97jHOcd1G;"]7eJRn0gdL?@/.8UfkJ!5mSahT$qo>I"T7bY\c8p@1h*VCW%r%WY]*0D5eF`N"h^Vk&#3M,[F..Isgl+\L087;'_%L^6J%SALM3%\)ppe:6jiZs>qk)r4=QT/Qe:Xk@`>UBp^65m/:C5't*YKijk%,:3&*<PJ`f_Jo/Jn:)eF.D1[kb3+Q9eWO.<:$B>$@Lqs.Xa8m_amtt3i"G-CDp^em5B@Dsro<7;rE"b]S1"Zp2#U(@%fC]_dV]Eg%8g[?=@JG=8G.L$\Ortbf#ET5:e29^J4bhIgpI(h3c>bn7RLNC_^[\BaiqcF4-FMXXo'\PbdW5&AeofX0N]AJ?DnD24Ri"<eQXa&d%:&eWO7ap[Ss#lkLZ]a[i7u-=t#IsoW8-.,sPT9_hHi[aQ(CfL+"YO).rV\D#`r@_3/B5Tas)qNrDJl6q;quJK*Ne`o/UGAVR\\bU%r]$=jT7;/Fi5.u_8]GpjrZ:d"hbIc/2Z/>CPt4=W%*@/HlC/_&^7E>d\`H%<0?N01Ro"=;"Hrhr\\^OhPGt[6o.Nr?=RJ%Z/&''_%NRGLr_#Ms1).E#8NNjed'U8=3/rEDiIf5acfW;2[P_H5S#6r#2]W^^5Wp818lQ(+P3O%R+e&As%i-LFUOLG*P9*BEk5+X>AN[?&1%r5WG[]i<J6(#"'d#[p7#=_ZXj_u+g_`rC%oXcn_k3Vh9#d<>JC6>fJj1Dce2p63sTnZSSCP2gQEO0cqWXoIJrj(IEBln=C6_Rg07%DNBuARXFl`T5J;LSDA2`<R9&4eZJlAM-9+r^U\7RHhb!bE*t4l*>nrpTDZT9Zp4Kb=tRt;LO-Q1iUWJuF5t)qLL1]Bdp;k3+80.L%]-S0r]YT3b559mX":<([Iach88D\Han<M#n0UXQ'0dgjig6*nGA-X%,7[.Z[ec0r2h-RuO9)n/J*"fd;oO$OOj.5`VMF@L%F3af$%P7`!.*-:5VI6)UiY`:5.TrI&`npbLAG+S[4[=N"$*rkkGB&EbbLAul^<rO[\>($;I:CgmN/N`pVZErjV;EKp!YV0VA30DIc`q\TG%/$;*A:#&@850@u[T+65;V$&Ao6'?+G!t4:i]>_F,Nd!F,DS[p\9&]u;8Al1=BhN?lh3A5Kb)V'+Up7Ic0UU.KK8(@@p98?qRY"Y3%Xd8C+OBdgt2BaGJTb1OLMf1U1$e)@q_SR)qMFRIhAqQr\3la6tb=eF<SC!5TB!n/H5cmOCW?A6O?8-t>hn>,8W,+ttT\4KW<0OY*%.o22TX9U'Sr\)RQir69+Qb_>BFGJo8nrM?h18:UkB0'.;#+W:[S'*=\!`$8?A87T,h&tm(N`$)uldVX-!%;>>S9"$D%*KQre8hhT%B-Tt[RPjMmLN>]egA_*_TO\&G-[rl]f[G5aj&M0<"m.8lZ.g.?VR#6^[f\MA\&jW1SL*3q53m@2LsHj:N'!63(F[:C;,k#(^W%T4%l;a&NKTm0!rD3fak!Pu)MJ;Xfs#`H&m7Gm)+j(+EL/lc1P\oGNAO"H^-POm\R%KbA`Lk/B.>+=hd"/4E.!JNpNQ2["4`EN(>iDeY%.]S0FenhM3\(&.8j*`<(f6:nkg13p7=IS>AG6-)^CPGae0ak)q.V_rZc[<_c;6rTqBgN<@^QjW_+KDQE\i\g6NK=:5p>*7<%G.qB%_dZ`6V+?:mNBU6/1.h@tmcLg]>SlC?qtgOE%O8GZI4Q&+0keP;E.S;]0T3"-Gh>Ae!u2JYFl^hhhjqN:d^8p>>SS+&UJD_>F4L5X%NDZC$U<.NCWD#p%CckUQedS[;2@<I%_R0nQ,l_&@kM:%ZOUst]VVfd*IMWg895aMF-/p5YiHM)(#rq]R<(G4t=h'a`iY24?-Hekm%3s41;.PVrOdMVd<?a3g``GG3I_@VJ\+48)DD"Eo[;&ap/OqU9#oG)'cV<gAi[)TQ18&k13hV=KkFHTN#VR(A/%]B9Yhs7_/^>2ee%B./\fD89EVO)Cnrf0cq`VUnYNq4BP7X;d.$=RCRKC?R^pL_,]C(#@BN#*Bf0'(i1[8(NWr#f?:nQ?mW*ZurF*m0U0(@KjD)n+=CZ%-r&jI56Ype2I7$`2jG71"I7=q2V&YT3J\Vh@MuD&ET(@YFZP'7O?bbHp&f.rh<GFHO4eX.)*@g#XJdEnfWgPKf<2jc:2T00hLcEj%S+1p0^Wnb*f_''[GqCU+R!rT`ZBfB![9ldG1u1)O^HcYO;srEEEl,&Khc-*@KNY@Alo*LT;Hh82&k\)\bdpYjS&Vb5UmN5"Aof)7%E:sJs!af_tB%@i\X]mAH_g*'rMc%91BKQO0>&\-b]X)K%B2HO8Im$i*s&/\[27F7P@mlT>Qa8:o'm2%PLh]M8V6KI]`&1n+/5fbs%24Z2QU3el=DVJt^>cnBsPhn3eGGa0J1/t!*Ol4&Z`'r6*&c2e:d>,@jo-&*P+_2.2&=geRg3M2d3eZ'!^=+0u=eGhE+o%`=12$_&%_FJa%5ua\>5/L(-rZcb(#g;0<#=;pA,cnI4A6h'qKP$7,,rFKn>JaJ8kctd;`j,S(AJ#ZW-HoVu2i1:[kJUB2O#Ed$8$35%"@:L\%^\O@[2iY:sq_-*\568uuT:r>BXk)(260T"L-"<gQLphmE@ZSFUf.?n>r5E[rm0aI[InGmF7^Si7`:cfNe&aQ?5/Q*"l?H.s^16*<%ZH6Ip1o"qITCYqHLIT>>f@!O6j\1Vi0u0`R/U>=r@8f($Kp5c!!VB4C^Lpn\$dNLW\Cn?oR@t8XF,T!bg0'JY)JYbEQr7_#Q;e!'%f!D$`(>[qid[=;u(#&.<<]4^K)tT`XVk@.XW&Am/h,79=?$,@o79dJJ"ksHVP@W-*2#IF.q*!d<7goZm[)0Cl^"R_5f=t-[e3*Tp%Yh`[KA"*uUUF8&i0h,g2K0Kq"7p/P6hnYC,LJ)pkUK#*ll;:JfBV[aiaoA5*8&j0mN"VUl]]rT$S#//ihX0e?.um+/]-sffgghoV%1lZ&YiLhd+nVca;X2P3Og)M2cV&csr`en01DlXeaK@]<b)[R&B**3LXlolE:[G^&Jkq^s7chXctRfB5c%I+ms!(`3*2-DK)+>M:;%^_E6;m#8?<s-ZB&]g0GXN)@cL'@@!N7*2:Y'sVF"m"q)s`+Fp^j%6"G_Tel.ObJL2a/4]te'jfaZ'(GG_\pV#Z9UD5.6GES[1O.g%XiaWM&dr9O0$<^:kl_Wtn*^0p(]!#sBXF'<%_c!Q'al=i&SYi,g)qHBed1_'3qhqt@l)V\MNqqZ:ABCRb(2IF\fhC/<f:9sbXo$T%gKCI.U!\8CqdVpb\4pnQYX0eG=UrL;%;]NGZp:l;Rl4APfkD=Q2E)_`+M]g,@b>:tl:SC?)[if'pQsqVRu"N@&@jri9r?^=URY=n%.S@OmRp*9=P<BnB>P$D;iqC"5kBPOsY$ii_6tVF;.M.N,m9;Bo$.bN@%%b^j(+'6'YcsKUDU;`nqW8P5%%g`[YTU#Ke".e8J6R5p%e!ZBoVi('+UkYm/c_`,lEnmSg:h^?PefR*?NI,nNCl&m:dP5d]Z5Ail[c7d_2_=T@SBG'eI3ZC&`@`-b.FgsT;hH.G;K@HU5XL\Y%!Bh2ZF!4=g-kW?V<Ro7*]shjb?>-'HBLQe>j610k2.RkE19-mbF8D4A(IVIUa"K@iQB3RpQqdIqojFufW9QaNR&AH@`=F=taAfN_%C7Rbe,Z#HQ:uOKcd,D*$of5hae:@]>BLqGn*/<D!TK5`Kot?f9Vk'NgBgEZkO4%*(OR([7L!];8E][Rk]%R`N!fkmuI_juWZrHnI%%RUE=:9G&((<TA:Ur@Q?F-V;jg9A-S9`++6$Oce6a"4E;bY4M_E<CQf_(EV+BPX_ZdIO'X@en)f;5T>\2le=d8%"3<N4["1q>Mc^%DkuXJ4KR:-ZmL9]<%\&QOg?%cG<ksh2T=A,;rQXLKkd]F5pbJ.ZglDbWmaYWW#pA0\Pk(LlPmdV)]d$.Y)-A)/DLVIA*r`'DX(O6%qkp!aqQsEbMLr?"$hRQK>>iUR'PF-k0lS_K5I6W%%[Mru2Ka(mK#(_#i!,b2'^^CK3XWKm1\oKKN8M==+V6f^4iEg9*V[)8#GkK'%leqscPd@l%otJiC/uD&We5O-g]hJMri)RC%?V:(1KmPZtU!kloN\sar+3puo=]pK2Z#HBHg"7iS9<sdr$_US-l)aX(cR,0UW7je-%5psOSkQi%5hpI1=]QsPb)<-)6>^%OJbdK'93,6A#M9Li:Na%5eK>RV7`fChuDdlg1c>27;?POLta#]/*K"b/6\R;]qC)O;0QlXgI%[eZd7A`Riua<`u8D!hGi1`!_?N+;0J)[V-@eo5NE_O5XkQ:&9TOa,9/PoP5^V'qG!oB&.cf1ljU\Ee=gdH&q>AkOKn;Q:7)0[:i=%23(20a3V>fV/RKi<NpIKoN<l7-"H4ReaR'YET/*HhjR9H1;Q4lDSXaRX,r2R[M4Q+XtV[F(ond+C*JYCXHK0QF$3M.VWNYsgR2gm%/hW<D,);Nf]qitmNaG/OO(Z1jc;XKnIXDgNBDK^24$AsW0$BijhcCY<U5L8Y^04tUe(OUjk))>ufACsW=ann2b9cF'kp:'?O<>=X%TAgte*+_o0U;?21GeV6OC/iF=c(<EJ][Z.cR3,CHle,4*CDMY;R9hTdoaTK`WqW-Z5IO\fVV.<YZM=$_VdCY,ggjGmj=ZnEmnea!%>a:6>d:</gm!Ei"MdOD6f+?RHS,-S9DI;:AX[;Zr]MisboR$:R<.</j(XYgQ)"t,Tr_!46ji,:jItIGDI_@tOq/LTUPlAgT0+6\(%$`QG4kAdasepk$(kIsFe%LdV[p_\D&i7IL;nY1Nla[_LY8%E6mE%6h*WRG4b]W!!&W)r71DZ,9-\p\Ufo>ZhYq<RN_-sQ2sQODRu%R!H2(r''B<3[=94(b0sa^P/7N,1^2uiR):api5!5O1j_j#Tn@sjm(+N?SqaIp>kd+md`+\&+A3,[-*p3cE9oOm,[PMaKi(i=$4Ot%0$)Bf:!+#o`QQ4&TT/ValslRLVh]t.#M,6S3qGkY>^jmT-Gg1_leZI:iq2`F'M]qiYV$`qb[H5XbW\@k&,k*:eNJ<#?o(_79IRd]%&(-QQ169ZH']CL)*sJ$f8=C(f3^LJ%?56t@e)R_]oYRA0)"cei6buK%?D;dc60$jr9_hZcFo#4?$-`k:d\d)(HDW<FFJ"@c-;t7M%`Ugp6#j:aEoVDM.rIJ$J*\bCAaX>#5TMb\d*l,BC!7H@?LDk.hI[9KaMf"Df0LX6$k(WWqj]]Wq;"6&:q^lqO^8!g>]t[9!]MJ:4%RmOhdr+Z^kZbPtnJ]jO\T3H.5R4h86V:6hZ%se"#G>g-n4LPX8+!u1%2=V1!Ks)U*#g@\%ls5+<oTsCn:27>/HE^F&#5U1X2\Mhg%g5"3ccD.kBo7tVp0VJo=lsrmqbCa'cEk,AGRLZYR4@fkM`-Wb+:#MP2_U@Nt^%Au?lLXY\8<i#;ED-G3T;Ucp:e*2Zb0Ns-qR+a\%<kY`c63rfsrk2EB/AYT@Ge0tXEpZL4;p8rhIe$Y8J(:8RijAAF"cbcAKn3pb_6!'&>hOTh%huaG]2:"VO-UMQ"U94C+UQUKoaumi%JZ1!:0X\e`@IRQ+YU@-]],^]74mLXl;&ql7?lr??O`36jZm;U_="Cen\^jbF";3&F.d$'C,GWZGQE#+nBD)_#VF2"qKt^`gS7SH8%BT,a0`P`-!b#CPL0!@#`QrWUU>Uh)Q4;58N^]GlU<Zf2gdphZb*mFX8qigr&qCp+#^7UDc6nKYdR$Y[rCT;b%@:+)"?f+'Bm/8oi%K^.HHZj[Y`HrUA?48Teh@-QXL.Z&-.T_@6"Qa;=N-R@V7Md?2V0mE*R/[Xo*F*Fb<EUm`^3Q2V*;$>7(npYaRSE<?@q656M+oNnD%rc/hAW,VmM6m\p+U:VoNc[HrN9r!%CPjDb_!uN*2>^N+@%%UWS^-H0%%MO,.21Ee-5;*E(gJmSsHWi!hTulI"8:gVWSpX\KF3R^C%<o2iU+NNEV,g5r1a22Sjq(q_lH@Ae[Z>?Xa86dcSZUE&&.D\7I4Ad@#3T8TOo2uEL4_<PS-`_\c%eBB&kXF=5,CWbd%gpa?5O^1b%C'`^Q?V;CFE!0S?1:0-XK3pi3To%EH0(^=u%lI8&_7`O"H4[*mb?nM7qF,B\_N<.&0GG?+l:%'eL56$Ka>\fc+tu,0g^Es^O!8kj%qG-@S,&RB%T$-H1lKcXTbpbK\5DO_pF)"\6men51$&b^j.MN0`I.:K8:d/n,At^%.65_HDV@0)%#.YPm;j!.F!u7<?AgBKQclobp%rY4Q";\&)<I1.HDEO$j7#/W#"UA.d\-R&r*/gc6[5o),F\p@BaWN7<P^HfIL+\S1Q`e9!TeXTKH6_n2F:sE-2TStW(XPk,'58f,t%1b'geVYch0FGeu_SN^U=^F6.Z>u^oL#boZc0O_mL,"&*N&-Jkf'R03pX:'?h.B77L"f(ueR$p?Oo"lp7#])IKCdj)'8]9k&N+#IN%I0Z,Yknfp&RYELphj`3h$g(V'[:qYej'#jTIo0s7OigBa<t=NWc`?5Nfb9<r(*g>,3[ne?a:VN,`DQ@!n:"1NI^HGXhWX]9:h;+t%,-bsO]/+3.,P6fJ)=YVP%LjImE=`GH$`7:k,4MJn3/tC9*+g:?r`%j'Fn\e8eUI,T$0BoHmVZ4@aYlBY/m,@<m"Em^'#M@MqO/81%:EuLnRJq'i+Rf_5kek'_$b'Sj-;6j-INt9L%Z4Mq<)m`bA1:fe;@6l$/*nj5UN52?7Kg5uaL=m'bHik<4BhpW7)NZ"=mYGA/Vh=L%Q4d<cM3hM<'*kZHZBTNS:)pbjU=CViBEV%(E1&Stn&Iuh:m0ie?PV2NhE)A;USl9t2IdIa.A6[tngq!i/br>q[pgr8pn37)2h.<F%%H_TBmn7I,':0Gs28GF0(VsXS@;=3L`=L^#cj$'F6C`l2gpG3fN9dV$c$^&B*Oo#j:1YP[:5+5E%)W3Z#,pV'bhs4?s":Kas/urt%].$cM?4PWRp(RZfHLNGtXNV3dWDr)7^=In<RlDjp5!d%bEm8S^"CD[gakkkL%@+X$UdS"d($#?t,ML0%Vd;iJL$prr)@"u79<8(6%L$;'Xp[b/\&3(kn03VtL1ia!gng!GDUV)\FSOiK&@fe72V8c#;o&\?K>?$?oQ9X5YLZQs+"^FWE;j4"B=lH..CQe)80CuZ4CkE'W%:ThZfY+E>;g[!u(o!P;1O$@Ura0T9-*Ncm^U-=Wu.uP@,fC^\8V6998p[%In,[&F`r:`@F^3Vo^*Lm](-_JJl.hH'e_M&?jbrf@X%e#PSsL@5p"bo46DjAIA5M#<u9s$hc(m#..G=oR?b=q1bR1l/2&n8H2B.;5WkEk*4[I&!+LZ_uW?C%h'TFI`=?22@k&;EpPo<RQ.E%J5M:?0DXP(5\'*oj!ePmQ88JTJ2uXrMTHlK%>a!tG5N:\Jr\F;Wu;9'?>p'\?\RHJaIoIuj;%$:dVhDVd=IXf!dj56bq3pRS?*E>%A)&>(-9]trqgmqM108fLqnb+[eZSegrZi5ELsLPNIel'%/6!,`AJCPX1/T2++@ONscOss[o9^3]<,KSEj6.Ki5at\gG.>1OO4X-J%pJUn+q[.rtGd>*[&&53N^1FkXWQQ9,!>DF?UiQa:DX:r5[:-;XI`9%5W3>LhYa!e\X*IXE]7lR;BtVBL5&RrKYY@lS_"e>%H6M9"%8,H5o+T<FGJh8*g+$[u@T&1V+0.+TgI,a*6R_'"e#._?HW!rU`Xh;"9&_Z?tVM_$Cc=4bNf6RuG)gAdu8E\I!dGU4jj.g4sI<bZp%quV9-a2t)qn^8NKA)g&@I;DI`]Ha)+eA98Y;=iP8;]:nah4bSj11+ehL=U+rc@9@HNg<>Kk;k0a^r%_hAaoKcM,lI-H0+W/(U'*&%&VR5mEJ4&NkNaW]o\Ei)8Jf[;MpKqHdF:#?&g<V9jF-auB%?)gaBnU9DKJTJ\<"E2a3i>eK9K^m4F85;1+((I1JrV)9U7sdCA/rE%Qo-?S>_"H;qA'L-F69H"\1Tn6lY&Z@^#2&W?oJ&A_'3NA<S!iLMMM=[+6P70h>f94K.-5%NFC,T^X^fm\=QNU?uZcC%R%e7k3&g"%4?,q5@FI0GC$&l:6pkWn&CK=XHLoY:=,bAZUeA,^8UdhN]Z$#(qQkPp[6cW/Rq(@Qf>XrCB<:aB/WY&L9`=Ip(?k^XkM5G$-3tI;%&rUQYiBQ4a_8Dqk02to63Fh&<"Hj\b9!')&]#/,i]D-N\!0&Oc$?<H'_f?pp4t%5QK=gEr)0q?;`C;lJ-Fr&1p7ZWV.A%BBWmQ>B%5!6o`+1XZq3To-V0"Kh3M$aCU=of?q^7EPK0_;YJ:+PA*8LVJWWh<^J?V[3SKo1MU/1j\crYDHmk;`A.eQSq[B:-kB0m_H4ACK-p%,F*6Ys0S/Go!BNW]u]R:S"o8Qq@h5))YEpHZ#B'j;aN?3X3jeX=V[tZMa]AU/XK378)ATc`TQ.Vj<g'mVjH-?:g]t6A1=(2IZSWX%(JM5;XSC?*_:^'I-7TM<=M0,a]Oakjb9)0aMdJ8(C-]!Pd$fReg=pm&(V\2T$N#YY$Si2o'SmJtXRacfc]Fe4U[MY<j5n(p823F>%[eK9sOMRNQr>5E&jBTDB)=^\e:-Xi@YR2fhTX;lU&,HCM"FotJ<`.s+G=1NQi+AUBZDX,dTpccD1C/I&@k'#BMsq+<\Yi*27&5!a%"9l?m$Z:V&qGF+nL-"Rl>b@=.M(/':M$=BMjiapRX"pcmF!EWeIJJkL!R0/YAg%"Z4V<>=<@A?GZut_T`2OZ\(Y6QanE&RiYllCk%9lgG[?G6T;qBS\HB0K2:<p.4qj7!HpFGrIUQ07KND]FYc7Hj+/j\gdQcoUXk0q1>CY(X<Iae6l^2Rl*Ei[u8I3p#IkW^@>!eGt^R%O6<,r#@=)YQ.kYl]#:RDD8D,A)<"#%gu6V_`$*j9+`_e5qQ^sPq<^h@dV'qf>-2.N0?9pG!V6emN/''QP'9p>Z12&3X(+ZqjD/d`%$uYqQUY%m;(;LYUlr"NN2Y:He;k,t968uUi+RgUbeLknHCficNT$(!+Sm>[5n&OeZ\/\?"i-Jd*F1t!mr*-Z`V*;.N$"Xl*.7H4J%Zp[hRoA9bDOb[rt)]kkP7>"WU<,Rb,%*1tOS7S;sV-L=3=JDqd8D/J1GpndKPJmip5+]Q[mfMdG1VXT>73\.IhW(ukEg9:@k6$uA%^]O8l[Sm?6Dap7EXZ0W?H=t''9_F+P0oUt/j^in_<"nWcB"=EP!0K3AXhHss1>(j1GX-_n'p-`d"np%%<N[4b_R^/-;fsa\3(ps8%5s(El6k>AFaQU\QeBsN(e"_AaH+8?R8@%E4C>o&tIt0Y_KC%i>r1dApSK>kA`VRor*\2Gp9A,O'HS@P7gCQZ)IsW="?Ug]0^ZN)=%ET0h?KKDu_7H!F'=M'LofcTA>>-/u&M!PO(#ZY7[@j/g%IY4!+?D0/)#)BJ?R`pr6Pq8nF+n_^(#&(ZRXj9?U3F'DeaTq@Xr"=o2%o^\3*-<1(4Wc9">bE_q>kH3NLEBq:"@%!<`<DZS,EoVL"72U1R@P)gI6pN#+<D*#_]iP"+UUr"*^9>7JY!W0*LLesTQrq[iq,,Q6%;gR\N?OS(&!<(G=3HsZF`>f3o=<uR(+>PI6=@OcY_7%;NJ_X%#\Ec=uGPRl'9XW;`KA.n:ar&;tV9\6d":I+\ZhGQ8VA.CqaEf-'%is=><]Hg_U8AKWtGgHhCU;>aXBt:^W`k8rD$ZV?=rZrbC;s(gANrdS`LUFiXk^Z5"OPt,YkK&#CSKFVGn2FI_9F#80p8[oe'@#j3%-Z;7UMi>Tg]G/Q2b_n2lVY6RqboJNaH8/u5[PdLm7]dPrLYdqrq;ht(D:P\:qfZ*8fCI&=9eH-r&o*.d5/*kr5D9bZ?,#mB:T(;E%E'A$5Ej>L.R=XR6:MMgr4V?YNihbgrd"K_`_,.ZlqiG/fY#^]E(SudAIs'7)4o>QrEin=FW,dVXMbT<-)V"JN.Mq[G\DX=l!EA^X%j/W<rPd>M<Y>nf'e*sBi/c/`n5PmEV4_&((%2!kdL0*mHs'g8h4@[Z=>b(6jF!7JgG#]M%^)[NQWl=ZXaK]'G8*?:V0<1Tob;&AE%j(KVbPhKUj&!G#W-Z<<R!TL.#\Va\+r?dU;^8)S;%#i=&?l2@S)hEiqY(5.0+YT7>^VW2a=I2kK.[1"X49#Cf3F@=]#X&$WN*Ia-%9meJNA!PTtg!,9Z4qOd&IUYIQ6H?:b9U,]5eaIJR4?bS:*FlKX+,7pH%"JBp3e)-NX7:3i+*0I0Yt(&LH"l!%.45hMPnsn$lO>]d%i2Y1"k/rf_]$md7,+YP=;Y@UXl#M1q/Q.%q9QRV3eMpmL)/lW>%K*Ba7B0X^p8(YKKOse;,hmT^0Us=<9(-"E[8Hn@0_[8c8URh;%o7q4BLkVuuU%@_a*;uVqe(\tLIW6n<_Cn[DkH/;:/?-djH?aYb5qYu'ILEI[NqrAOimfh\,j)^[Gs.kFkgU9UIS"h%ha;Y]q%`RU%<p?J/I.^J27#3@NLn-^+EVBc8+`L(-W!+U=6ubVehgB%qq.)SocG8KEa8^,LS+;lD[^h"5bO_..DD"&d^<G/+MbLF&qA:g1?Kd.W%s7Sbn?cp]snlbC^7tRQp'mkcZh1c9!i#VGkB?[5'9ILg_ViCaeCQ7TeSj-AbTTejK&Yki41mF+SP3(d-oe@C+'E)DRpO&`djkkp6%.DS]]6CE_o(f)-T95tZ*/Wpi0q0VZ7IoaSYolF!bko9YOolb-+BncLVUb=p+L7Nc5?%ZLYlW387):g9Dj%`B5IXXS/H/hX=j;WM4%V1VC<0!E^j_ABqDQunelp31o1-0%bbk9lut"Kr4q4Xg'@RQCS?p"F)^7(Mtm2!L5boJW/KS6;b^7-3q"?Ki0elH7p`,$Eel2u7'@%i4#<g,Bhf1q/kh[T.J$2gaUTZ\"m<YB;"=0lLGj9)d$ItkUV()<<tmgoPBMO5#0:uSL2?8#>:mlKp%.-48d.(pVEZSEfZXbR(-S&%Mqi[7XOAY,D"d]f1S3psJUcWgO*RKqq:-kW%J\7Vhi0ZCb,J9.knJHkY3JmUJNkmWP^\'/b4!kB_jMR1(FS':m%J.CWQRq6_Q.I9%\MAq(DNMOdRAhRR0BS6=e7ik2]sm+]3Lf\H6)X))jjh\bcK:b<:7ib[?)LB&5'dc$/\R.dR[Lm#M>D!:@FV:"]/Zbg0%eS1/VC[c%GBt"bLSgVS8*rXgUsmoqd7eThgaSsP*J/'h[p#C30+C![[a.`C42$*D?KR5.7?X9l/J&H,VkbJf&*eqNk+LI))KtsR-YK<IhH+0O%1%*QQ24/0=GaQOX-Coa>o^V^E1[Oc(]Gi]m'P&ua[b]4\+&*=E7MG5LXakDhf/J>SVrDF;Yg`>XoG2Y.oZR)9-]QLCP?FepU4)oc%C>A&J2Sd)i('S!A-mFAV/cA'S'*K\`T#YW@/p,f-=B;e&F3^s1?YS#(BT6_D%Sm-JWsMn*d-V^STBg.ZmRZ\dPR?\4bqX3\S\Udo%^5Th,m52s=#+(+DdtlF$oHFWuHIVP0aHWCIls`['^<KPBVs"%W=GL3YY'f7C3dkA40/_r&gkSY)B4/oXDI`",n=GTCp#@.X[(Oh2%aq)f#@]/JFW-5&gqn2[u'R(H[^TZ7/Vl1D?Y(s3=7/+*?3[N>gI%<;^GZrs15c<,#FQRZ#l$^Vl5;dnZ:P)8h^9>:W)STR$4K$-:%>A.aAes@OAMoMI<>?HGsf]13u("$51#ug5Ca'(YNdJGf,3N.DQ,unRLG07-Mn(!*ZXh=M\jYBD>?<H6k09/3KS&`sZakPoKmGd\U%@JmQ']XtiL:aiS(H-`k$Z^I*)jDF:bO_,[ZL2W:-0;PC8WNZEClGSgtQBCjLbjg,E[?NCkHg6)/S3CP-De4mXo>/HlI[E(i\f,H&%R+@bsgT+TTk:@/T(r*bu"-*5bBU;%4n"5%UnO8BlGrthm77LP1q!I["K=U;9KPq;Rp)\UHWI+U0p@!VZ%h7B=SuAuJ0O$HQ)#&,X%?67m@`a=3-n)(jOMZ^l+hT+CMKAU`uDY07Xce>i\D`iC4pS7K1p%MGbioW-`6#YA.&>*`6(7o_WdI?Pg1[P^!:Hb?Fm2F"&rE181%I11:`Y;>dcl!3rWk#b/c;UqNa/A6l)B;6T]Auq,1VY2Q'_:f4[#oE%O4lM/,n138lQH0"D=J9(2jF7q-O]i]?Tr/JQI$Qd^NF4Tf%/FH<u3Hg[XqS4,">%)%KHV%SBEjph/iE8)>(>_=`gmsg5DXn$sn#R*5SXlOD=p8OKj%0)T:'>4-HZV2El[<obFPtEVdt@3]`3`I;%S7c_53b8f;9:Ejrg.JiC:7ja%3j!W>k+,O&r3P0m**F)XDNiVg?Y8sXF]oYu&cAg"P\qPAd<h@r;g$eY5!Dq,KjINopX`$H3Wp[B%Ri?QD5<kW]H;GXo)QqS5MgYho:;ND&hk=i:BudSZA;sZH[-:i#7:Ot"Z:F?-cl6"H's%f1>VD+[X%J,_f"g,%?fFCWYPO:5h&LGr%hD].oE-(/]d#MJ@7p_If5]`6fjlba9Ncj=HYWnAE/Zo9BLL13qs'9$N8=5Z&^2e9"35,`Xs-sb&n-tBg+hs0Mhl6FNE=CjSpKA-K%h7:_H5h!'`gu!&7UINUY55*59^$)(U\V$P-bU#`*?p(V]178(jUIK5(KHg+FR?CYE%nK1/hA-2rWlC%Y?`AlA>rd'/6RFE!?8)9_%&VJ*N&4^mgc_),tFQ6@9!`aKKgc+0;A#-Y96/3RE(\9pEFG&!N$#Nk#nNR(=Km4&]U6#^=#%&pKX0:lPNrQXgqr@tQ4""fdU\VI5%l5AT23_r2>'i`a;If@^*Z<P*5Pt3RL+$qfm5!p1S8^JAYcI]8JSAJMh6C%eZ#BO?uGo`!YJh5p)p\X$9Z4sm50rChL);.%@<B%e-%);\j1-1?fgm_Tn2/h:Js7*fq!WY[gp\&)D+JNS:]k](lb=6$&DQJNDm)+<6sJX+roBTsBTAa/SoBfR4cgV`6I=*;l4%<j,Z6._(6%[Q.Cn9W&Xj3iUXgR[R98$)i;7Zq'eo^dD]9+h1;E?C@(I`\b"/*910>Mp^_W>cT2f-=e</8oM\I7`*5_W1e9aCIF5k[^pdQ16o=U%N#"FF]H(Iqdf(%=/U],_9isj++U_\3kc4en`h7kJ1bmWVQ^[17Y&dG>Fhi4P>_ac=;jJAjXC\mU(B+otMOYTK75o['[%,38dOlsE%8!JTbLi#BrSV&H@PW!".Zd>+X>aU]'^Et2#I]<6<lI'p?iOn'`$I^YbAhPSh9$VQP!ajjVQEo)@kc#\OXPk\!-mh$F;+$9?MH6aW%e<8"eiVJRtX3IaoA)<!WG<ONu6M$,g%OlO.TduDu3&'Ti^[FOr+_=+!GIiC'-ClPqgFJnmc*(894-RtcqXLkkMG'2H$a@@K;mII2%bNfk0S_mj50$TtI#%g?rRnlqelLo`_Xeabb@p4_t0uh/QQ:P[grolG;F^1u'<D&`ba3%M(S0*`'RB_ko.YH;SNX`"ck-`CEAmcS4%$<=be^&qFHWmpnq?e`@n(3XcN=)rTS<H'1/igXGu\_@A!&T,]Klr4l:VdT^l\RZJ5:b^oG#KpZ>iopXk=A"<8Z',5a#,8RY\&*tB%gIhX2Ht9IW!er0Ss4!o)o>u\<9f^.oaW^IRj%])+F_KN:>]/,D8PnG6f\rrK+?iI9"Pg3`dil97)\$OT!?fjYMWK:>p*9WGI`IrS%qkisH:Z#J]UYOrBl,BK..l`E!BInFOXH.[7I$=FN.U^>1<Ob?A0@mC'1S=U.K(pN#SfQ1UbC0VQ9;a=YlLp$?&jfW.#@u*0,3/92%WFKlma2lGh"0^HC\oaoaE3fh,<@e1;j<O!<R+h"E&X)od)?gK7S72^Hfh9;5QRI.N0F<:!3t6*Na`"860%\VD(?(7p-,D0&O"RV-%9Z$%I/lrNlF=s%2?2Q,D905S$.9^[DD17ZcLfq@pY[\HPd8I8BDJC@)>#Q?9-50Q]\u%E_[E*Q;*>m8b)Ph9^\&=hJNsXi$hik@P%KJg9/f<f9HY4]al;M=;h4n)*=Y628,oCT-i^D6Gm[uEktcgSPe#8;,\;gM09oX5A4o,@7qds'Oi`]@5c>$#hn[Of9*]9s_'D-=[r%e#L!05GZQ]J6>#mXng82la2lb6?q\l#o%cJkiTOd/*\rtKn..4n;BPAf'ucDN7_,W(U+n&Y'-U@]P833:US5U%nGqVDD2u?:E7:*%R0,1.2grnV-'L9=Z_?5Sq>1B3Zo`p[.8e@h+P+WYWSXI>ch=caJG51K$>8\?$Q?)!VN:NoT:$;]e8g@;Q20\8)YrR%6jjo([/8)o%RTY:HG[h6sD)'K-<]deK%=jjbqFJ3Gi=6J%7dY(B'u37O*ph&HpI5d4$f8YU>bW+T/higO-//<Hp0KJD[cu@GQJe)'0hab`e&^+"%B#.4J;\*'<F_GTdaL7p)'H]<MR@l13bA#sgK:K!?#?+.Hq3F,oVid(+,Oh1Z=TGmeON"kN.V>=9RqFtLRJG&#9=qhu)^m,r+QQ55%fYZ#TEZ9uBT>i.lff93;6SYqNf6?(giL"\HWC_!;Rt-',)"k5`Kjc]ZU"+mY]@cir,(9@-\o9Th%s_88$;?aqp=^(.3H6-8FeQg]%!+7n/>RI]%gsPOnluDWYQD#(@gr7"Z5S8.t:0R#3aM'Tbiptg?EMO&GFeL'h3X8a90%s."$W0N@=ODh305J*O>GWR<ffpA=6:FtU%PGaX%$r^@1`q<d*NbVCI\^ENJJXcl_Mpd0Q/'2<%k(k0$=LnJ^@2DqJPdO\R9ta;';NR3A*mp0=5.B6/"]dnYZ,PqS7*=8^e*2Wu%bbP:d4('_4@Yu)&V.W`7A/\6%<D;5&Kp-,3\Rt9u5O3CTbu!YT\\Jm)5E2am,Guu/"T\4r="UFpfkC*a!F%T3@U"dOM'ne[$tr]T%;6hPIee4@,M,B)K/<Xq&,#F#o8/!]_K<bgl>;2DFOi80!@PA'Zi<K7[cXu_)*O24*pJ2H&`mm57A>F'A60Ih,VhWL.Jo7]"BZh;T%lO#\hHelAicFSVQW`jA*)ER0k3c2:_p,-sC'm)(sIVS)J/*M**Jm6jR=]`t\]_e\%Z`]t=fc>F<TsJWlX.T)^6YB[jViJX];F>)&%5ptArp,-sGKOjZ]Zal4+D4(KE?3ukph.T>kOl")4DjRt^f(D,'QVpt74(d&%NbpO<SO[u,:Q8(haj'ST)F!adZ]4I]?=gI7Bbkem%$l3jp7+(Gm=TAiu4?mYug/lQ[T3p*.?Q::r\!^_j,kK/KRkU5KOOd(e:ipfsU,ckljuKMPCJA]mAd)-QUk/lbDjCh&;;0@QS<,gI%=A6*Te1==<3U=\nfM.hA\QN<:dP&4%N29uBj)#aKQXj=e[T+f5<a#Q6/G=5:Y,SNBJj@H.%"d?n&=>?Z$[gMt8@rA1f(nA2Q&cDd%<p/D_3lODHoXZkl(p5H(fsJhBUCpM1NmDDGUV1SQ2VQ>Tfjjm*R=4!IZlURY=,[KB[bJ&*--ZhpNN0d5Y(C@.f^$u>SCjWtchci,%a*Dk,MJ7gM3p0*A>+(_SAX;MG-:>'mV2Z\g0IZN4G^8NnX^CA7/dHiX3khTd=TaEueFD5C`0_3jVM8.Tesu/`ZBUmjo?*:lJ8)F6%NYm,LnQIifR/'e(`fh)_g9qjI#(B^(/^\:#=m54W/KKX5e[C!*A9HA2V+&(f?<W]s:]uemj^X2_ritGMjnY#@-cY8dfinjO=u^jU%B1,SlkC_f#5bKk`6a&rG]dbOLJeN:+gm0It^,'6do9blSg%2p@3m>&MF_#EJ%+VlqG3H09>cQ@FT#dh#33sj/pI.$@[3I?kWa^[>%+j4%2WR>Fj8_@Ls<K\mZb5s[+WFK6HA[DMCfjc]]YLB_0Clb"DC$BiaY1@0-5*sNeSDm,TMk_R!WPZpm$.r7tR1;eiO,V672N#RX%$n8oY(:1$FEu'nCb>*7X'PB-GrRi4SjQ/]EObk0Vju,DoPDIFC=Zb8!9C:.n6q6%nZZ-p2Qb,Xr[!)t@2;dh#1Pj+#fcAA]co-s+%(fUm?I^`#_<j1%W7I#'hH(.349]GsU0m8uY%Z>B.2iJtRG*XG:?*+j1Vf+`lH/hYYj`t\b22UMjUij\-'1YEG_U\>neA5'>b+.!s%A1(r%B7\<kjE160??;@B?s>gl93j6P(::-CgFS]=0LN811geS?Y"mAaQBf>\#pQmhcMWbR2'k=WeUsG(ICce.GilK\a:]2XbP$>0%IFQ.@q(O^8nX]")[Q/hRo6NCV/EhN6_sN\^lF7n\-:;oOol+"[n'$?+ol,X5Jstg,DHdXLc\@Uks7TY-B5m8e!k.9<3!Z>am%GIq%[4^a/^-1)c)>IYfgH$aGZL%jeY$S2G9gF_[,'?BaS(j6(E[',@,dub3qq]H]OUuQ#$#'df.Po`I%PNF/F.P<.NGOYa34mbo$W,FQ%B&akUH\loa)%b9[4,^aiabC"(H)QD@\e%BLK_"Lp`g'kWWJJ,g\op$r-"%8GS7<b`9\HZBp:NgSWQlCeI.)UqTBCP]%2d!f@RFeb%.u(A4)lfS3'CL+rN<%"H5Mc)k/^lOl"AF0\N882]C/A]D251tCF>5?=bgr#eEi;tQWK6qT8:CBk@mqjIgL!D7g[?15;TXR04t9Gl%#?P>L.*a;?!R=G\;cPL5kYr/Kd29GjRoZ=G56b<Y&f^$,@0Wtr1j.7m,BTYTg)jX2_mJ<5+e6NZ`)8Qn3O[O;3+S*'B(Taa\O@s;%ft-OZ'Q0hYV;kI`c2>_$9Asu*&@M?68h$9=<+56lE+\VpL]/1T:FDl%GCHhdiKH/c@^?a,p%I&0h@<LP"_Ua.f_Xr##6A?<9R@?H%%Q7")Tflq2ZcrYj20pDaF0pX2Oh-(Cr75>!l<YGE2sZ4ZO<RZO;$6J67Y#B1>N6.6=YfsF"e"`/lPEcQ.6fYqZ":XUi]k`BB<C0L%FEn8if]?W5OLo<EcU5t.g$CN5^op?4>5ATfVmg]=nmr;gJk_'=]rH>JK0ccsosqXL$Pi$dSOBI0mI9)FTakFD9#*4H_X"O2Z.kIV%eJYrdO0kji_q/XmFNPSt9=<[%MVW(um,i<Z:=6K'VOaGS[0L<O=938mSZ^VIOe>[EC.lA3<RYudqI2C*60?h$_N#+.<7i4U4&OI%%M/r!j@F?U9O3^I+(I-0%h:boKDF]Y2Vj6#S(T#TgqtRf__lJf#Vfrp?]rjMcFp`8k<4X_u=7o*DYX&%2hIa5(T#D\WM\cY)4+Uc2%/W%e]3p-KP-p:e#'\*M2I\udmW8]-!$l!Hm.d,YHj]6<9!a66<m2f-P6%Y<,d[i8NW>`BRqIP)>pfbt.q4J'Qq4uSe*jYOO\!uH;%mZB:f;e;krj>Mt6XW;_rFZ&7(jX"`g&_H1<=^E:bPLm:A9B8e0B6*I1_d$L%+kb^0i#(\g;COJ9WGR-7S9'.Ifq"IJPj[i'!]mqa%n)i/BgW!Y[X/7]D"-b4h^8gFVC?^]'LY8Mmc6t#Q^b7cMdi$]am83Vg_)A`9VZ#)rF?6emCTI2/9kOUOp4SNeX6GS5H=n.APA3.R%I2\BRgf$)$;(\>VB4MP'F@L6cmC@35W2;A.[4C,"^8gEKcFMY=24[SrSMk\6+4YI&8fOu5?E<=LL87&eGkYr6U\/\R2_n/L<7;_e%T4'Y-:=XIPTPX'2hP-IagpZ!N2;L_=gU`hk*>CP-D;WlcgL>!*C-!RMbI.(Z3[4X7[X,.-F@H78H`s;&g+?INJ`"#,cD[%(n%J-q%9kREhVVN-C7l?i7/Y-4_ls<D!KFH+B=aR-FF&9udLMAlF=uqT=pi^i]ci$9R4+Op>`<J4IL;O'INt1U_GB5_oHu^bi"RBOSpXL,j%ajRcQlFo;PlbXO2Ci?c4&?1U7I@^.e"2htn#o&^uJV%UdZgj^>LZCu?34`C5,C2*`P*"L>iLle!.@uJ2.BFeR"eI]OgoIF8dX":c%Hd@mKX\(9<ZaP\6WO/&g7<]^#X;PAdV`j4cR7Y-g20\0qk0h*FYg[CU/1S3#(",*''APW5=hNs9`sH%S!+WVV[lCn[c:LFoEqAUG%9I#E1(Yq*N<@V*VF!oMPD3>-?)AS.%hhM]$k.K)%=7b/&l7C60[uQ>Qm8K6WC2*^n[64&LUKe5#:H<XK\<,"u\cR6TXGQcNHRP\r%c2DcFW\?8*ic&(dL(M8h-&J^8)Z%o]ZBH69Y`)hj-Yc=K'qOmJ:hKSfW*Cpc`J"ZqCoHLqZD!`ab_Bjnb_EDpCi2q:17q;&@pnK%%&.HPM3,k4.1H=-g4H5\\iU"^<(lD(3RoKgMB6I]kp4]mi2mDTUCZQdu<LhN&5-rhgc;+U3^^A8E/3J!C*s&,VAVR7-QROD6\=a=s%%dn\O0HuUd(=6\j___6;9fATQBb'h77]*f:9mM)t_%>kR]iAl4bY/B^2W=VRaO*FDp6C[d_-P<B_YP_#>O>I$31JH>RbVD\G!tl/%ZdR`p\D]k=3X2iAACtjV(YN-2[6b)TYAIj.6T3`aL-)6GdeJj7Xk7U[L:cjAXkr,n3t#gDhf6,db/[t):H.CgY`Ih6o(GtJA9Q#L%`j7E_g3]qSaiQu8)rGUIF5LbX4bdNt_k#7Tbu'YH?4+<_F:E<[eTkS?kFcZj$gVh>=PGk")MSY?32)e`a#t-f^ASsM[r6T<PlPIG%BU7$`&HHGSKs_2DPiuZFMqQ!&58R(c>,++ld^4ttEMNAR"-/sgG==^u&Haq=g,Z=4](aJI?l=qAi1Pn*c0Ka/XVS5p@p5o=F69p3%f#?-YJ(cn#9?!/lNl':@MO<,1c?J1&Y=+)9:5bM#4,)8i(LZmO>VL),(^_"W;5[u!NXWfl1nlc7;(mX%N@o3a(d=E-L,eX2di-j9%e$nR5%>JNH$R`<N<eT/978A&C"H;U6B\Y@nN'J6b-b$?hf((b92]"%6(>Sl"a6j#04@`Dtp(HcGnq8Gte[&88X2;P<XPAgQod?#m%E<Vpu-bVj'?L+,0G'T!!jl]\7V8R"f<MjnAa@CT269\F;Bq3GYUj0O^mI8'XP3sC"qt^$;W#j7G7E&uE()Pf_VAj8JdaZ0g:3nj2%7<j[XT_Hql;p/]g_3TB6hr:<aO-t/`P[!rfUJ>*$i>sn"Q'f;7:TJ:!+t6Nig+"h+OU`sBYm^M!GP'@.rPYN*n%`jFR`;Np8])`7%^_fQ1l,c>9kFA[`:NsFBG,DHDQ%'H>'8+ierlnUudnYtigiqYW;pM=?l/&o1p$IqlJr.qKCW3*uA6!\rTt\u[go3mj+(Ee8#Cq;\%7@<>IeMhAi@bOT$[?gZ<X#ko(#9#oj;,,UZ"/Ae(h"#3mG5%23S2b;[mB"__6c/).\m*C=B28'=XE=&L;7j"s3J`caQR)Mj*Kj5"%@54^?;IRcVRueWE;ejiud58+#)hW8E8S\%m.;03WcKJl+fA^DA<>GaGqNE;9Y=c.EckQ(Z*RW>08"A>rp(TGWfsD]]Q8B'G`A,f3%B5-=LZ;i?HH(9+HI^-uCapR03c]-J4X6=A:oD1JK\hDOBP099'qC"A[^9i^4icF/REb\hcXo=olOZlBaf]@[`^$Qj_q^CjjgdYCe%UFkd@caDUbZE2@m/a_R0>#YUfZsLu-CI,b[Za?7@a)jlt?#$7?RdD*EXlo%M_K;d-^3jGriF%GWi3I(BS?SL@jSCnHZEDC^].s`H%@>n>p.t^WPcm00%lq^p6gEWSeGe[^]*&fAn9.oW#9Q=<.p7X_65Zup&CTQl]2bc,0)U`s1MslT\4m0V326J"K>+X.PV1;`pDck/]%46Oc!'QBuCe'qOqc5n0V,DLuP:@IWS/EU>Fg?MiL@()F%DLsUtqgFu1P1h;'iqpY2D$k*]>^5'c<;:$o.R9mhJGP5m/IKE9\=V-J%)J1+.bDmUn!2A$$^'[]OIV(HfWXRE0WW9/:37dfB[]BP[Oc$,n\Xj%A[R.U]W$bthgF>J5P$$36Y16XBU19N/oi+-G(0,nI6ditH%FSh??Gh-K'Z^s(hP]*<9fs\VZ:O?<sJ*TurUSu'/0BKOTO_l2,nd.LcDa/J%]p'&r,]7c-hA2IK)+ENXIjq#OrQ'>tPgAUmPri6n%Vhlmr6.P3YP<n$[4":[t\^bU?B1&A>rUs.2[C<K9G.Z@%4#MFpdh^WFLA1OI7th@dXL>^l:Ig\]>Q(un)bPU`T64,Se.^a/?9aVg%&o[G!3u_q`Hi4p]o$7"+=_EJf,$-k^lfXq(CCg19$'eb-iETO#m!,_+p!hR]YMAPP5O2PP[^lLXi*JY6#oRBSDLSd]iA+Q.C;.[#%Ib#BL->,V[Z/`4haL(_5AbGG4YFi4s_n/$X\C]('<kf)>TJF44ce?o,ab&CE?9b3d.HOUFSaYUn6d<77Hi:%>i76`&]meNO.]SHq%SaQ0W/t=et8DWQ;5N<1fkuL%)m0m4VlaNGiVnU\Wb#@$*4@Qp7cWZ^HFLl8BHi4BIBk.lDn<.t0f?ZM:>$I-#rOmZKqQ7/0rRT9)%g@AQ7CBR6gZL)tAT-^\s,>-h5]mePE_].CO\&0X9gACYgYBqt;eSk%o%c_p7XLF#1ZY_Y5f?`06(M_fN^Xpg.<knT4V:jsC\@h^L%f?\cX=eA-emCdu"\,,K2+5[8o)HQV&m<k:]I&l.2mc1YHV&c)_Y^We5-<Ka%,g:0#qQ1K:BQ!L,.u&5[f2!_H_d!)JWCkq#bV>s!%%I`tr13;<$_;F.n]mfjWHaUW?cWT)iY4qe7:`S>O^>6JOS)mlmh!;Ft0t_n7TB:T5orc`_2,@8^qH9>/[aDd;-?;d:"4jj3QM:5Y%-T\BKPd\6Vc`B6h[_nL(R]!OM)-?6RYMWr@jgOp[Ba!&AXa[lm&$#*kZ_e"p_]Z/=]meOeTtHT!j1Tom"gNqShX+W6lWa;rm'3\\%os6E*"<1qpp\HnX@<T97:V2ed>Q$+RCH&cTcWW?]<,jt5f?[V\LmA\-Wf4*[LH99,A3hlMB7/pgQ&6Z[7PR3tX$XFC(XnV>XV:02%AW&T07YgH>]/RbK[eESI+YPC6jU4@nR=J6<PuJ"#obg/r,0](s%BM[SR-uLCYG[DV7eHr2;i@.n38e^b&T@M*rcj^L-(*'=q][q&%FaR1AR0oP#*k`P</sZN6Y'_$IGlD+!8'T)lU3AG2epZ?J4Q>oec2)@J*VJ`Nm-+';]>c^,WU%%YmmE;/f=m^2\&7`a-$H\BBNG97%G.S:mr&c?UDC1@iak&ZIP$RY8VVfGcnKZArN17f!`6n<Ni2,:W#c0jhrljiYUlK]W4"^%$H+Mr@^/qI"<;pJL3pG$pU.h(iLiVgd%9N2L7f0n`_qO?Z'k7N19Sae:ZiTi+b\4<X-bl!bnB?BI@Zm6\tp-t8ffJ^J]>TP)l]\s8&P.3-S^,3/u(154pHMK+9el/`%'^cS*%jaZ`XOYnKMk4efdfZAMab$997YA5;V\I(,uI7B9La53`6;=\7fpGSJ*9AaCRif$VQ?SN_73#%\CXV>40a$2g)U%739HkGo<_fqba%<5<baWo\uenl%j!5+g]:-FSfU#r1;*=/Mj.+#P+b=e?'-B1C:Fa8GBn2RX#06RfScbEo/B(7nf;B#!b<f=<C&Go]L'cHaV4UUu!6%rUR1MB1h9X6R@;cnZGK]o&rTYr1RTP].3]Y(DgWH,CSkJ(5A@sM&'`-lA^6k7-nV%U"\%GR##m6,=oisTo=d5qAL(1fk_?e^H[N`%Y``feoO2BgLaD6brY$uOS\^r_&H3?8g3!&s&$d%4%j5n$r%!5<HMUc^#@;2af11"G4fNdQ(jA\;cnI3QP[=RD0+-R=quUF>X'XVG%IJHlBrF0a>-,1R%0-Wn&hpRGK!1kWBW?66CB-H'_jV=4c5,(49<C@"g1/ASI=\Md$M/*/-/5=28;lA!7PQ8>miK[j/L4go03JgMq%\;dHZb7P;D+5IHK)\j:aQi_k\9Aj=?a^4WEs!`Qe]tBN\9d*ulj\Y<D3Jt`/<Z&TJ!_cce9.MLb63N=3">t(C9Ark.,C;a>*2uLB%7&D)'Z%omX]o%sp+NBAu\\(!h,ZG>sf\tgHFFV.`R="cka1h<H!]L9hRN@esUu1?:.Q<dG(V/8[j/54M<++5u8Q1*I.gnf]X(TKd%Hk`NK._]/L!neB:2[T$+pn#@;J<Ghkf+6*l<%61.Mnc2V!eElJ+PJJO"S!dqCK.8+(gM7nVnKYT@=JKQA86Ib<297Ol2MlbM6H,>%l/AV!k0fOXntO^B8:RXSF3iuTQ'd]1J<?3bQ1Z85f#1765)!@AQeC##IZ@u6ERedY(lB3e/\N@I?VU_/#S]QifG?UNBmGPH6V(ta%n-_Q-*(;.2LHjZ3k\X"bm[KS&SKRn+1/E;d-N(si"UWX<B[R_QntCNoeHZD59=g8IncJO&""u>1f3hAX&cHjEIPhPMJGa[+#u^a-%]cb5,mhh3'!Nh#H/Q$&h(6XIN%YM?C0kLbpb5"n$k9rPYR$Pk`#Ks*B:541q(-Y7!5$4cT]I8@^kl=nW/*r2E=hmd1+;V8'mn^gs%%W7C'#`GEk5U.2ZNf%W?La%r7XX@(k18Ts[kV$Pe(HI8rR\d`3,b4Na`Y;HSV_u<B_MtN]X%TL3RDD\H3<3+nLek2q`2_Se"\U&M%'$RB9([=np3q5#PfeX6YG=uINh.pcZlO-,&oQ*A/+u(V66,YE_'bF)V\\#Ye5\'-p;6>ld9_'a_MLH-/!s31*=FK^Rk;OeQ*?Bg[%+t$n6k\Dk:)bCf8RT']R@.l>-_);HP7?G0#b`nT[eXeaO%qLrd=jYrlS2q5+Y4;HJ)X%3JnZ4>9pFGS#jI*tZ_MJbMr`M4[okKAr%ollJbhLK_4MZ0gbZ*G*SCunN14V,5N4dO;SHpr5D:`56>egD0r#tW.W6^jc/4s_K$0a.ks1a@E?R=KnKU+)kq9gJgPEjC#)Occ:u%[NfUG"9eu!m&f.uU7cRVUHq1lJPgr39^('&?4pHfL`)_Mp@Ej(N.U>Ao\en=7gB+1B^a02NhdJIR(XAo8>'"ZRLXX&=(ZOsVUc$J%V?XMcpPh_c&ql,X!JCOTgAAehKQ&C3-6Vp\8oL,jNZWpsEQSkWiQfK'a.U^V;Np0Be"H8-cOhD1`Y`bR%A?g1].o+cE+?)!(S\44%9'L^?.hI.e?(,`A-#`[#j@Z;mX[&haE]XTf=4<uaKN!ctA#bbheCeRT$<<NJkBVA1'g-I=,3[R0:snA_K^Dj>''?J?#_a`[:apC=%_#%miA@a%d`F`18KkIE&(Jonu+4qjJHe5Z(e!R*07,3).c733k+O4[PYbg8U!+5kjBl#jB.KZk!;ME-AVP0*mG#B]\&.##8D-/*o%OjjtV9Fo!kd'+RDRNf2ha?bM(X>sVGGJ-HUm]+D2@ciKZ39U&/\k6$.`?Z2/^\fm5U&+A/RD)Z"N$"l(28L*hI^ka^h`Z=`eb8Vi%'bWZL&mVaVd<@(LgQHp6R$C=o<AK5fTHh@,5t:?$KojC>+H!o<.[hmp_B4aD4s\`oqo)o,*6R$:$5"D&_P-E7q0CMP0ECT#Of;B@%Lk!ui&Hqlo9?@LR+QO*P4&PAr;rTJeCd<9>N$#0Njt*<SeN#+L8`(4+apT^!Edo^T\;2Rei^YAKSFkfqP[Afo#Oka=JhF7t</nL^%+fp!`lFCpI7?S0^mHG&bndtQpXPh&<M>r7jp;!;[Cet>_`mU"S\"Q[=&O&VI>TTB>a>$KMa?#?P6BdlU@\b]"n9Y:fhIEcU@<#b9%f=2g7!otGp*ocqqJ<*G:`h)K'@QpVp5%3E<QUij^3B^+JVS;ruBo2glF)WX*\*CO/.7$r,O]*sNB`WQPqgp688hdonAb%aEXH^%T%Y3#3i0D]<&OkcS$8;Ve"lF9YugcgrH>TI">GXkJ7h&@>Y#`F.JpHBpeIJ8QuId,E:!q?)P'VdJ?%k<dS!<4V$mDPi.I2[_LQZdJ+%+\(t`&cDG='>GR$'%3roL"a,JrhZ1ua#!#$PulIj-f,V*EM$=I6G*LmW>#Cg%3k%'8938PIY12&&/+"$s$@8g(IGtq[f7J5/qaA.%mkBRiIkiXB9p+ih%KFB7<b%0)iJ3'Ee/`_'\72uVP.[F\B4[[p>24Un`E@+:iMK7lg)\?o$PsW$7$6f[qOBVuE"=I?8k>as1$YRk%Y1.9kSKJ"e?i3Mr7b,DgZVL%KGg<7><ES;Wk,hudq"puSnp3X9W7M]#pKp'lWnd7AX,A\.o3(S5[G`i71)jiEi*hc.o;bdQWr?,%%?$Mf1WZ--1;kL27REJf\b]A!]fOAfgIW&JfMD)s?muqfJ)9iC5a3DKu`OK#rr=!g&n#^N7el/HXM8Fptmq)!"d?L4biJ3JW-[bU^%jRG`$#;CkZ-2QfC'?S34Sk/5C_\3lI1S2\[p'o81KkBW#M'R[WAs8UC'^;dR_<;k5h?8<"SNVm^meg!&9C7O+^+r38r)T*9Zg,R9%6)"buX=o4#4sUY8^nloi+$V/A&W'M_nqS^g<)[[hp8aEihsX?60@E.OAjj73dYhpDV:4;OOsa1gWa<?A5-iUp\k4jG(^K@`FjH>S%TTc&cX;b/f=3?Ekq#CQSK9W@b-0\OB+cs>CM41Md:LV5>QIUs]#jXZO<];WTEcsZ>D\-$I;3)%kdWbDlJ3WK.,S!B?ViUh)'#4R`%9EhbW$62J:ddGEb?HJ:4eN_qZ`EqR"A3>.SI0@7khb<hm5>E7H<@!Ef(2[Xj_"9W]b3o/u?-ESGbI]pUHU<;)gn1DN\bkENcb_VF%S**tcl(anGo<5t@TO_JHVtW$4GI?EcH$u^E[p'BDPU<[Zi7VC8d$LT<@R0_=3Hu*W.%n50[0/OM/H6?dU;6U]OOE@srZs16GE<@M%UgReom\@iS-XkPg39h7[fK$_994_:d3g<5m,,7oiM&d%=aT-RJ!m=BXTdg.2)l!Yj5YI9-8R%)jO>'5Pkf$6RqSeL.)*lEIdL@I;%Wh+1f]O`3tj>;Xm@mS<E'S#g-f["fR3*Z24-ujWU/iN"m,1H?*BiE_]`0Pit);7_t\k'=^1V_!6%uDWXj*7:V^n58V`\Z`"HJZWk%7hR/-*>uLLZ/O.e.\rjN_s%`h%KYV"FD6u,#6]'QPB=G3%si4Kg'qGnX!N_GX'hr#6`u9'1ji)n\^Y)G<n<Z'Fb3/+CIkMU8G-;/%rg1G^)=,H2TKGSPWP%=\NW9/eGU?Msa=PAImXud;D,aM9XJFU8/-SbRN0(]8[Fn/4.-(m!Xcs'Ch&'l=:kK#a90*WX_U3X#[;Fu#%4i`h<2h#phO?'L8Rms`WDUZ\g>o]*P?3LJJ*@,)T&5Q)]S.&lj=60p#d_uM)Gl:6Q-^"2oaX[ZW/r%d9ITX8%)F"D=p^e13^+\2[%X;</qBJ261=3'"'M(Zsb').7$6b(GjA[_a.%_S9If\hsWNAkZY?73?"RHO(hl#)4&?3NO]:l\Ll',q7W;"2WJ]+PJ?*h%ldQT%`c%l$l5pLdj3l^uoQ;mofmU<%'^Zr6Ee22Z=n];#linak!"t_e,+b\mZ:/k$Zf`C?$r)=()^.[>AOdlU],16pM!o!<E(h1Vq=%BE<dF%p]7RV;iV-:[iC$@I[bS)c48<ZR^0>I-e<;VZ!G?le.3/'&f#*i5hs&[!YGo%i,1(%%L6:r>s[g0@DZFd&5FYu/<H*PZ0eD#Fg.B\%B,f$)UV6'a:.0d9-mSs5gC=AN!0mn(@,BLfTHk)mTu(,oK1`8=Bbq.,mEgOr%Gbk7Ek@Ej`^J'!iYJR_#IB:VG,DNHFN;@W`ABE[%'aVZ*YK8W02@UV!@6Xrg6Y"lT$KZs$'`aW@oH9YTW9"lgbIP/QVOU`l\m-#A7](uIM(5V*1To2l<*2^Z"#i<R&7W<)SPaErbjpmu%Z]W43_O^:\Xg=.$^N.ABAF"&B.13P"5-f;h15bts,9PT")];;l4ldhlB-So`[Tbr$FZ-Pah'Q@e,?ne*UKkZaj<IlA,E";/Sb%uG%Z]W4S<<mN;?(s[L:,?O&Tj=BZ0#qt*?(sZ+XNrdWZrL(=nUE<s':0MPe[.uu^3Z9gjn6KS-F[7);1h7ucOGWXHKPgZ]1BF#?NU4"%\lgs`-0>.=mK@i@n%/G'eT*dBEWLA)m/;)Ya"N@ghJtTFG5+;i1j\e9<PQ9s]$kPnm>9R._]da\)I<Tok"qOha7?Ri(qjXL+5Ndn%b\-k%NQ:%-(bUR!1$<H!gkB@h^:h)u9YKg;gc>/ee).=d$78f,h`!/38hga<@bjG:L&YX3plT*MA/tOjP71+%s"b?^-NFJ#3'jDY%oE5)R@$C#V%KO$A+DcY&cuXq91!)ES5u88IOWm>N`qY1h;?$oi'`-i#r,E$-Ib\r;heq.rjaMV*gjM#t3u?/;U1?BXFN5h\_'G33%#s:jM;cJp6B69@`)9PZ09U&.Hn/r=&a3if7-qP'\4GZLa'TmJR>]_.j?]cf8<BSC/DOO<iPOV$J[piJu%Su#0RRlEr"A@bCi[i:T%pQbfPFM^bm8a%a[>,@r-5u?u^BLP@h3(^aBE?\#q;n*F/"=1tH0GY:D#N(/A9]@F>65UE*6%XsRB1\PD+]).&7e;SZBoI"UJsIU7%+=3a]P)//ea='d&d5**V5a&Vl)on&'!`EE&0JAS8;YV-!9Tj;c,_:[dVo`U%O\F^4&kNp!%0N79'F(.b1+>P7`mQ,dLCQrd^]A$9%4o1*A6=Bl3#p:5ik)$f^i?pIC-cd]-V9mTBBHka=0GAu_3&IN^-CUT*!%Gb";C1gF.@;hd;*;Za$%bH&84=0uKII+e8LI[=6pNb"%7?bhQ`W;_p:'&LFekmVW`\Gb;"FcM%l_o(1S\us>9L*EG5g.Hi0M,@O)N^RXh6F1</;k8S8;'=iAf2EuS\h!"rPU.P0ahJ_cmel1%RrHE3^^"ZgY_6\?7-KB/=>D$.P(9O-(^ul[&ReL-QkKYUARVDA]QEXr_;?DB@jRpI,U*>AfI=I0!jse6VBeam2+T&*Pp:=1$iRmC%6VGpdKXjo)-4GJt5^s)J,pIok%d5j69]@q&JX,bL^oIcp-t!^?9`W=-=<NnTnS4p<i%CHl_O/\:d4&0lJUg<7i$?ZHS;-/[0/n2D%A+$-))8R##''PWMCC]u)`EE#K35RZboLGS#.-Q?r-o9/C@DWZbGQOHJM"0t98-mR6g^(n(fHa?l&6")])HN+l]FRe?`0?'YBoj;t%QguPU5)TMO'(IA;i6MtD_"t"$OFRWuNk\LU,>s>I#fJrL$BHWu!pJhSLnCIs8l?3<"ABuT+CU?u;A=)48dZ8`T$RW:O\-`F6t+q_%a<Y4WoF)R!M4Y+1TI0e:A*V$_"0LT2E<>lhSe3MJM-Q(>2FU,7+:N4-E<;5RT26Y`n;%^!!e1GC:,<Sj('Y)RGVU".V;a%4?s"S&%P[pO\9E[1UN$RDTGS6sE7=t\E$rRi(#qRDA-Su&W%8RVP)H[mYM5=+[5P;@9]8ds5h9kuu836O."K@"+*1/;a.`;3$[%`)f#Sme9%MFk[dP,(?4K)A'T"AWPX)Td?EY7+TV`&J(!^Q9u_k0>*PV?OX6+q'-n!/rW=5u00[Kbb]RSHS;q1W47S'Gfq)(<K)KW>Q8hW+4%'%<!p]sKT>"QGSWeYRK@:N&qhr$:m3=eL#`9_01a51@1CZsQ4^?Q*[U:h15/[ErgOTD@"j1R!6sLNa[AJl#b_;aU[^soP@R"-6D2<9%=p>`G4TVON5\!4.''Ko8-qU\R&]c*R$0^`?n-%Ac4^],k,9S<iC*oCDnMH=aa.35t&h-+L!HXq^_"7aUHj;<Ymmph\O[,,'+$fTh%5u4^/<?XUMF]\td)<M-^$ka@?9-F),76ptV"J-`B6c':c%?k03,`ioN,f&F/$WmlmM1c;!":TrSU#ggT@hJM^@BJR'2..-f#-Ac+%TW'3\#SmTR&[=.a%cdth_(,jVLB.[LLI-k2I>1E%&=."7^mp4D%*6RNVDT-M#F#IGKbk+X&E=@,)h="a$c<3aJ@Qk$_BL7'R"bl_%1(^[3Gb2^u=AfNI3KEkL;\bis$EB1U7$I`s"N7hmY`1u#(ku[rE7%k<8?@D>!=Ag<JQ*OsBk1:A+Gpf2"H2Go(`s$Q8caJEMVU+I%==Z[I5Y2_.O9VQoA1*<Ps!V7W/-uE#a$CceOZ#[@)FYlG"AtWgMai5M=d_ZEPe`_(CHNm?5a,RZO1n8aO:h^j1*e;6dMdK:<u5\h%U'o)i,W<rP+95)1n2!pL^bZnP5'W5UZ33<VS>;=]n:\TqJf>jh#_,=#!]l%4KV#FJIlli!UXr@3i@"+VoHY%l-.M>3AI'&B8<I:F%$lPbY2G'^OgThhiIXBYTG4iiQ)e^Tr*24h`\#ScDWDg2XCTY93r4qVJfbN9(CZDs.pY(N*mt%`6#!)?eQg?q'*AL*o-V-,I]>g(P%4lkN]M>du\9)/[8N#2\2jH)Um-n6`On^t[Y=XX$)JmrlA9%BS0n0a9Eopi4C=TK5i;f]q[rJu3\gUm+7AK88A^m[kPhRgd>mh(f9%JU>LH`iKcfPQM%QRC(Cu8U^FbmOn0'0DNe)mj:]lm'hIjp+"_Bg#L86kEk'gHZJiNbOammcRpiB4M=0t55fn+2A%p4SrZ,8*u(lJ%3M%5gF,Rj4oCC"mHa1&Ipu//UE&Ik^h3f.LZ3_4>EC=5?57"YDa=6&#Mc.L)ro&XlCYHQQ@j@iYcB&AI!eGb9%aIi!7JXJ)]_`rm%5Pe6Pn\\_.nTTu45:cS9!kp\7:[#:%guuYk<?T.@aO]Dacj)[$KX"h!>K.Mb4UMn0T:A3qAMX>X$c"O&*.2dkG"P^TrW#>T\2aXo%mmc=r5qZm[[%.Z\:Ir<smm.9pinG(@ZSuRgj@EEFG;BaI]kha'J:^e/lK;]2%JkaP;92P%V;o`?a[P/[H^BX4F+bc[;"<0+LbiBg%Qb7MdB[-[WRGdo:McVS#Pm[6/&"O(r:iIa%<6a)G?!#B&:(!u[0?A9f';U/a)H9^$k_A0f2[SGiX`B[S;WN\94HZ0^`]Fe:Xu;sl%N[&=j/!)*2@(OBJcQdN`1aki)\;j(rrAA00@>\IH?1sYA'bOd\Fj,]]+YnpF![/uoM;]3KVPl^%fLT>TAijR<&Z(G%(bkT>f7cJE%S$l$Cdm.P<NrBN"[1R8?ET5_Fa=1q'N$Om/.Y,bVJr3,^,Pnk-n.Uqkkho1a)/:V@#0J1t11Dnl[A*,\*bBla>A77A(j-20S$\6O%qRGY8o$ciFU>H\5fZLI5;U*Kdb)`L8N*,;jQ:/IlGmQfRc%C][GW-!N78SSP[ar`'*[(b2rc(UjZc:QSdnUp=(@!/$#*_Q5DB/q:%$$]AsD]Jm_@WDG;m_fBNc*9uG.-XFaOc[[WX.d5k\^9]+b\P2\l+'?()QTNX7Z?mQB2-2]PdV1Q;Mhp(fBHJC9-sBt0[p2-"H],d%U8?^iEX1Auf'Urj5U4>g0.Fb=5$6c+-0FOFCETsK&QetcTc1d@C=Y#*UeR]1@4\u$o)kiP:I6n'$\+?;P_O8[A:YZ!Z<u0pogi^?%(3kiZN6/B@&UKu_AA)i'TRf@3(uMH6Gkg3(qQA^=GMZCN#A)!VZM`nFp6]Yg6,_>08Gp#H@T?S:PmRY0%g7E=%',/<I9]@lOu72I%33jH#XN?H/]aSDa*ZICm!/r'PaT$X5[pHO6*^@0fde0F%?!f7,pY-bTZ]dUX%^?RGfUIScMZ@u(-c(?a_*o,;)HNo*bgGGsXekdo%CK)66bo&1C50S)CQIrB-!bWZT>qM`(dAPOC"5DUMDB1n;`7"4CY5g8SqrHnr4,[.Fk@R]&P3A7q?bNsN%ZQ;e3edP98mq+b<-Dd8%'<k6/?j=?c#WK?-C,hOjn@ZWhlBY@[]!dcr0^i,$<3$22Vcf7R/ocQ`%EnXi!7i5GrM,F5muhXs;q3o?fObW%<mBlRmtlAfn/%'C%D[#es2;ZA<F,fqP*4lsAMH:'?73FC!f<p#JPEKYXZ,r4c9eN$5;]j:S8Ac*MhZAtFG`RL^0h;[^C6Tn'K1/>J73W/5:rDcpVR6u:%I]VL(RE_S-)(Dj>r<KpEIS?s2MPM#Zp[eNQ@8BD*P,jkQ`lp&O2PMdq]8ER/ZY&n@/0X:Z:q,CbjViV.@G$n<hB#2MPd+j9k5]pp%'hc80ag'M*7.k!o12'W"QVn=s%t.b%J2$@_cPN':b@[;4="U?!2sRE$,u8C(5e)cR)qG(b!6r,j#ccArc1#OXcFVM>ZaW-H/oFRK%ABck`CdJFd6T2f*4IPBngib(4Z2e>*r&SYL,W6W`THs1!Yfu4p1!LV1kIFE4=U6`n&1=5Bg4aq8\f4A`bBuU0P&;:;-9_pb6mIPu%:6d_RB5kFWXFqTK:Q8)/K':2dU'$WO=9VE5D-73DO[/o%@&V=akH]`NFce_8gO4?i"&hWTbK$,E+/)XgC#[QogkpqcW!:TaJ7=oY%*Q'Y!(0FE[E]I>c=GR8S%m#VLnK3bOK1Mf77JO/YPR6>lZJWA=g\R40<7XBobSYpI;3F!l`2")-dEa85GIEN\7<)Au>LBNaY69o.%X^(CcQ/ki>`H.KENE?R0?tVmbEB(E6\/_Z^c[lFb5_3Kal+gO3<5,XgnHo>o7o%Q?Q]p/()6tV_2aH[Eh_MY`1\hcR!\Ah'S><CW%pNJ+RGs@W&-:3;41PCnY&iM&oJD7Zd;O?:LG&^Pu;CCV"6BPE4!HTk17u]>gWHd#OM(4(ch7,.k.8Y=[4)`Z)H,L/a_?/B.O"R89%X!`,,?XU$c0Dt"Ds6(O;!l"DQkH"'#><)KMo#7s4@9ub-d$V9k21nMdi8e:b&9m*d[.UN<Jkt-g[g<%XapgtTZH;QoH.+o10*7"m%Dh&\Yj+9O-K)8R8$Qh]$)'s4Z8D3Ho7GV_CZdJa$IVFf<V)@Q<X#6nHi<_k.XJ5)rNbBf_WNWX,k90>Fo74,R8i<7>QQP3O\Lt0$%B/qEBET/T(>^.e[AHAg^dEZW!A1@Z1<KumQ0p`PYQPji`'V\u(<Cqc#8rh&N0"j;kq*N\j`=M#S(,%7Ur9[3%X5IZBs$T*LIpfg+%`Gf4'+C5)ZC3L(T'?i'rF[-N.(m#/OaDk$Y.p'ZI&IZ+ughR@Od2U5O>$^52Mrm^CCCS3tW,T>KfIMYG*!/Y`A.ZnlCQSV^'W"/7%O/3oIS5iiU]GX*.Be<ZU;q6\LJm[bPeT8Ei\SXD^!Fs6lRSf:h3HCg8G]uph4UB)3R-,ljQ&)_U1OL!>$)$Kt">]QjK&rcs$J1&@%8_t5b3,*Fag(;n9LFBB'dK/cn>Om%oQ?0Qr_$eSC:Yac)lr6_jO)EJ-gd-KUM$5g7;tT6-X1C,fK53^BpPcgQ\u[E9h_.XfR[$!s%oeG5c@6GNd*$"P)A&C1<,78>$0"8,npXZ3NX*%&No%*muMpsW5DXA*bFMTXO/]rsn/iH\g6W=M'60&0kOX:EXK`5G[^[>.7TQUf/%H]BX'M@Um.Bg`r:T:KkVNIIa(9Cfcm6Kt*i&,Ot_IXUqa^V)iWl;o\/%MX<]o[Wb=?f/&WG!5Re,GUm2)X-*DHN\g1o!6N@]@<Jm%2`YNhZ&XrQac`<pCdH-62&^44$iLH9^Q8&J^=6F&c;$;h*9/(4jj2a%'bEl&*=:r:KBc=`+(cp-g$M]0mh1n!68IM\$:XS0e]>NT%m6D(j8@YB`Q5a:K%[tV_W*A\YLDae>Tpn3#-<HOlJFYB1!t7^)rO\O4ZaR$^%]-G/Dc%dRlpC6h&^841iuiT7.mWMPCOMN_iu<rG%<]#s*&pp=@E&a2>fMZcuQ"Xt$eR2A.OmTuPSJr5UMluC>F'FKLGWVjcls(IYoE@:V,t'tm&E:I^=)-L27%]s^ejNY#[AcY\!0t4+%q4B_[aU2pNNk]`:=Oa>`;6W.CF/?j(3_*k(KXQo,ES[Pag:4qL']EI3pMPtL^l!%Opi<<HH<)jthgOO#Kh3i$PSELH%ENqU(2n2A%WsD`EYcK\.K]mEN,9<7VTNO0b*#.MD@uP4-B]TjIjj$tADSE^6;3mf/V:T8('c<cr@qDk^,5!N_;l+63P(MMlVDT8tJ>r#RgeRYl%^@.&dck8Ff/.B^)NQP+UOb-F/3f'+![/d_P,.?`)&K,Tdf9S="W^Uu%@mjg_UJRZ74,%mnI<)-SpHkk$iV(8FTG5Z7,X0@VTYifs%PQm#WIY8[Skg,OeKbegh_/'`B)#d-`gP%L!<ueH;^kD?VOFBTfJ-@/:\l9L%f8B-4M`O3]$<h14M;uT8'?*?<>,Ts`:1YSGQ6"e%%UXJ]F#s6JeXo@".@o!HD_im]C)kFcAVFL]qdeNu!o>o^M\n7cQCVa?!o]C?u%K2RDO3sE&MN7b-2"2Q>a$)h#G=6&]Qj.N)]J2d^%Cf`dRI8sWrS)uA@Rk`/R[!1=g[?@R24>tjGnmeAe!ASqYf8m=>E(sJ!n08:5d&aHpKK3*oKbZ2?PmQ*EJL=N1-!.9;HilX.(EeS>%f0(ZHmL^P`iC9"mc_:*bB`0`m@T0]'ei]BdDET=1h4p>$(q+a^ZEOg/?__K:dg^:Fo*+kmf3-6OGX#YW\o(1R]'Y*gc"<mspohO?%(T#V3A\O4=B#sHAhD`g[d3qr!Sm?q.,+D%@8o+jd8.P<d_f%9]4_FN@@n<-[[SB\^K2+4K2b^Y7!_21q<hP&n29C]8d'gr#i?:5K%hm(:5L!pW#:HdDtJqPgqr8'._l:D)ZDYf\2N+Z+)HKrnaksiic=@S6@1mkeFD+%/VBt?er7Wj'We,,)a9jl=5VdQ<EC7m/6p[K6i%YJacMO_m>Ucq7LQdV7g&$VV-H-=[-rn,#<afK]5Uq%lj,qEj+A\GD,MkHCMLSNhIEq<In.e*$SPfbZ<5^3k)!ii-tcjgU34OfR^g%IIr:Zs7*q?!D)\-1]~>%AI9_PrivateDataEnd