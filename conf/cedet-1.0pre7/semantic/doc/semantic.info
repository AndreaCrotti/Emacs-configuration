This is semantic.info, produced by makeinfo version 4.9 from
semantic.texi.

   This manual documents Semantic, a new intrastructure for parser
based text analysis for Emacs.

   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Eric M.
Ludlam Copyright (C) 2001, 2002, 2003, 2005 David Ponce Copyright (C)
2002, 2003 Richard Y. Kim

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with the Invariant Sections being list their titles,
     with the Front-Cover Texts being list, and with the Back-Cover
     Texts being list.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Semantic: (semantic).	Infrastructure for parser based text analysis.
END-INFO-DIR-ENTRY

   This file documents Semantic.  _Infrastructure for parser based text
analysis in Emacs_

   Copyright (C) 2007 Eric M. Ludlam, David Ponce, and Richard Y. Kim


File: semantic.info,  Node: Top,  Next: Overview,  Up: (dir)

Semantic Manual
***************

semantic is a program for Emacs which includes, at its core, a lexer,
and two compiler compilers (bovinator and wisent).  Additional tools
include, support for imenu, speedbar, whichfunc, eldoc, hippie-expand,
and several other build in tools.

The core utility is the parser infrastructure which allows different
types of parsers to be linked into the system.  Two build in parsers
include the "bovine" parser, and the "wisent" parser.

To send bug reports, or participate in discussions about semantic, use
the mailing list cedet-semantic@sourceforge.net via the URL:
`http://lists.sourceforge.net/lists/listinfo/cedet-semantic'

* Menu:

* Overview::
* Installation/Basic Configuration::
* Semantic manuals::
* Semantic Internals::
* Glossary::
* GNU Free Documentation License::
* Index::


File: semantic.info,  Node: Overview,  Next: Installation/Basic Configuration,  Prev: Top,  Up: Top

1 Overview
**********

This chapter gives the overview of semantic and its goals.

With Emacs, regular expressions (and syntax tables) are the basis of
identifying components in a programming language source for purposes
such as color highlighting.  This approach has proved is usefulness,
but have limitations.

semantic provides a new infrastructure that goes far beyond text
analysis based on regular expressions.

semantic uses "parsers" to analyze programming language sources.  For
languages that can be described using a context-free grammar, parsers
can be based on the grammar of the language.  Or they can be "external
parsers" implemented using any means.  This allows the use of a regular
expression parser for non-regular languages, or external programs for
speed.

semantic provides extensive tools to help support a new language.  An
original LL parser, and a Bison-like LALR parser are included.  So, for
a regular language, all that the developer needs to do is write a
grammar file along with appropriate semantic rules.

semantic allows an uniform representation of language components, and
provides a common API so that programmers can develop applications that
work for all languages.  The distribution includes good set of tools
and examples for the application writers, that demonstrate the
usefulness of semantic.

The following diagram illustrates the benefits of using semantic:

*Please Note:*
     The words in all-capital are those that semantic itself provides.
     Others are current or future languages or applications that are not
     distributed along with semantic.

                                                                  Applications
                                                                      and
                                                                   Utilities
                                                                     -------
                                                                    /       \
                    +---------------+    +--------+    +--------+
              C --->| C      PARSER |--->|        |    |        |
                    +---------------+    |        |    |        |
                    +---------------+    | COMMON |    | COMMON |<--- SPEEDBAR
           Java --->| JAVA   PARSER |--->|        |    |        |
                    +---------------+    | PARSE  |    | PARSE  |<--- SENATOR
                    +---------------+    |        |    |        |
         Python --->| PYTHON PARSER |--->| TREE   |    | TREE   |<--- DOCUMENT
                    +---------------+    |        |    |        |
                    +---------------+    | FORMAT |    | API    |<--- SEMANTICDB
         Scheme --->| SCHEME PARSER |--->|        |    |        |
                    +---------------+    |        |    |        |<--- jdee
                    +---------------+    |        |    |        |
        Texinfo --->| TEXI.  PARSER |--->|        |    |        |<--- ecb
                    +---------------+    |        |    |        |

                         ...                ...           ...         ...

                    +---------------+    |        |    |        |<--- app. 1
        Lang. A --->| A      Parser |--->|        |    |        |
                    +---------------+    |        |    |        |<--- app. 2
                    +---------------+    |        |    |        |
        Lang. B --->| B      Parser |--->|        |    |        |<--- app. 3
                    +---------------+    |        |    |        |

                          ...        ...     ...          ...       ...

                    +---------------+    |        |    |        |
        Lang. Y --->| Y      Parser |--->|        |    |        |<--- app. ?
                    +---------------+    |        |    |        |
                    +---------------+    |        |    |        |<--- app. ?
        Lang. Z --->| Z      Parser |--->|        |    |        |
                    +---------------+    +--------+    +--------+

* Menu:

* Semantic Components::


File: semantic.info,  Node: Semantic Components,  Up: Overview

1.1 Semantic Components
=======================

This chapter gives an overview of major components of semantic and how
they interact with each other to perform its job.

The first step of parsing is to break up the input file into its
fundamental components.  This step is called lexical analysis.  The
output of the lexical analyzer is a list of tokens that make up the
file.

             syntax table, keywords list, and options
                              |
                              |
                              v
         input file  ---->  Lexer   ----> token stream

The next step is the parsing shown below.

                         parser tables
                              |
                              v
         token stream --->  Parser  ----> parse tree

The end result, the parse tree, is created based on the parser tables,
which are in the internal representation of the language grammar used by
semantic.

The semantic database provides caching of the parse trees by saving them
into files named `semantic.cache', and automatically loading them when
appropriate instead of re-parsing.  The reason for this is to save the
time it takes to parse a file which could take several seconds or more
for large files.

Finally, semantic provides an API for the Emacs Lisp programmer to
access the information in the parse tree.


File: semantic.info,  Node: Installation/Basic Configuration,  Next: Semantic manuals,  Prev: Overview,  Up: Top

2 Installation and Basic Configuration
**************************************

Semantic should be installed as a part of the CEDET distribution.  See
the cedet/INSTALL file in the cedet distribution for basic installation
instructions of the CEDET suite, plus canned configurations for the
entire CEDET suite.

These chapters dig into more detail for configuring semantic components
beyond the basics of CEDET.

* Menu:

* Canned Configuration::
* Search Optimization::
* Parsing Optimization::


File: semantic.info,  Node: Canned Configuration,  Next: Search Optimization,  Up: Installation/Basic Configuration

2.1 Canned Configuration
========================

As described briefly in the cedet/INSTALL file, there are several
canned configurations you can use.  These configuration files just turn
different semantic modes on and off, but don't change intrinsic
semantic parsing behaviors.

You can optionally skip using any of the canned configurations by
enabling your preferred subset individually in your `.emacs' file.

 -- Command: semantic-load-enable-minimum-features
     Enable the minimum number of semantic features for basic usage.

     These minimum features are designed to allow semantic to maintain
     the parsing data necessary needed by various tools while intruding
     on your typical editing practices as little as possible.

     The features enabled are:
    "semantic-idle-scheduler-mode"
          Keeps a buffer's parse tree up to date.  (*note
          (semantic-user)Idle Scheduler::.)

    `semanticdb-minor-mode'
          Stores tags in when a buffer is not in memory.  Also stores
          tags in save files when Emacs is not running.  (*note
          (semantic-user)semanticdb::.)

    "semanticdb-load-system-caches"
          Loads any systemdbs created earlier, such as EBrowse
          databases.  This loading features makes the database
          available, but won't spend time reading in large database
          files.

    "semanticdb-load-ebrowse-caches"
          Loads any ebrowse dbs created earlier.  (*note
          (semantic-user)Create System Databases::.)  (*note
          (semantic-user)semanticdb::.)

 -- Command: semantic-load-enable-all-exuberent-ctags-support
     Enable all ectag supported backend support features.  This
     includes:
    semanticdb backend support
          Using exuberent ctags as a semanticdb backend allows for
          faster first-time parsing of files for supported languages,
          such as C/C++.

    buffer parsing using ectags for some modes.
          Some languages do not have regular all Lisp Semantic parsers.
          This command enables the use of Exuberent ctags as the main
          parser for some languages, such as for Borne Shell scripts.

     Any mode that has been tested to work will be added to this
     function.

 -- Command: semantic-load-enable-code-helpers
     Enable some semantic features that provide minimal coding
     assistance.

     This feature set is setup to provide useful features for code
     writing that do not change the typical Emacs editing experience
     very much.

     This includes "semantic-load-enable-minimum-features" plus:
    "imenu"
          Lists Semantic generated tags in the menubar.

    "semantic-idle-summary-mode"
          Show a summary for the tag indicated by code under point.
          Some code editors call this intellisense.  (*note
          (semantic-user)Idle Summary Mode::.)

    "senator-minor-mode"
          Semantic Navigator Mode.  This mode provides a keymap and
          global menu for navigation by tags, and modifying a buffer
          based on tag structure.  It also provides access to various
          other minor semantic-enabled features that do not have their
          own minor mode, or their own keybindings.  (*note
          (semantic-user)senator::.)

    "semantic-mru-bookmark-mode"
          Provides a `switch-to-buffer' like keybinding for tag names.
          This mode automatically creates a bookmark ring as you edit,
          and allows your to navigate back through places you've been.
          (*note (semantic-user)MRU Bookmarks Mode::.)

 -- Command: semantic-load-enable-gaudy-code-helpers
     Enable semantic features that provide gaudy coding assistance.

     These features modify the Emacs display of your code, or can change
     your editing experience.

     This includes "semantic-load-enable-code-helpers".
    "semantic-idle-completions-mode"
          Provide smart symbol completion automatically at idle time.
          The default behavior is to cause suggestions to appear next
          to the cursor when the cursor sits idle.  (*note
          (semantic-user)Idle Completions Mode::.)

    "semantic-stickyfunc-mode"
          Tracks current function in header-line (when available).
          Requires Emacs 21 or later.  (*note (semantic-user)Sticky
          Function Mode::.)

    "semantic-decoration-mode"
          Decorate tags based on various attributes.  By default, this
          includes drawing a line in front of functions, and
          highlighting include files.  (*note (semantic-user)Tag
          Decoration Mode::.)


     *Compatibility*: `semantic-load-enable-gaudy-code-helpers'
     introduced in semantic version 2.0 supercedes
     `semantic-load-enable-guady-code-helpers' which is now obsolete.

 -- Command: semantic-load-enable-excessive-code-helpers
     Enable all semantic features that provide coding assistance.  This
     includes all features of "semantic-load-enable-code-helpers" plus:
    "protected/private decoration"
          Enables the decoration styles for highlighting struct/class
          members that are either protected, or privately scoped.
          Requires that `semantic-decoration-mode' is enabled.

    "which-func-mode"
          Display the current function in the mode line.


 -- Command: semantic-load-enable-semantic-debugging-helpers
     Enable all semantic features that assist with debugging semantic.
     These modes include:
    "semantic-highlight-edits-mode"
          Highlight text that has been edited since the last parse step.
          (*note (semantic-user)Highlight Edits Mode::.)

    "semantic-show-unmatched-syntax-mode"
          Highlight lexical tokens which failed to be parsed.  (*note
          (semantic-user)Unmatched Syntax Highlighting::.)

    "semantic-show-parser-state-mode"
          Show the current buffer state via small indicators in the
          mode line.  (*note (semantic-user)Parser State::.)



File: semantic.info,  Node: Search Optimization,  Next: Parsing Optimization,  Prev: Canned Configuration,  Up: Installation/Basic Configuration

2.2 Search Optimization
=======================

A common use of semantic is for smart completion and tag browsing.
These operations involve searching through the tags of your files.  For
complete documentation on configuring your searches, *Note
(semantic-user)Semanticdb Search Configuration::.

The default configuration is for the most complete set of searches
possible.  During idle services, the slowest options are disabled.

2.2.1 Search Throttle
---------------------

Searching is controlled with `semanticdb-find-default-throttle'.  If
you want to speed up parsing by disabling searches in system headers,
you might add code like this for C mode.

     (setq-mode-local c-mode
     		 semanticdb-find-default-throttle
     		 '(project unloaded recursive))
                      ;; Remove 'system from the throttle

2.2.2 System Include Paths
--------------------------

If you want semantic to find symbols from system libraries, you will
need to update the system include path.

You can find headers at a system level by configuring an include path.
*Note (semantic-user)Include paths::.

For C/C++ code, semantic will automatically try to setup the system
include path based on the output of `gcc -v' using
`semantic-gcc-setup'.  If you want to use a different version of GCC
than what is found with "gcc", you will need to call the setup function
in your `.emacs' before loading your first `.c' file.

     (semantic-gcc-setup "mygcc")

You can customize your include paths with the function
`semantic-add-system-include'.  For example, if you were to be working
on a linux kernel, you might opt to configure your search path in your
`.emacs' file with code like this:

     (semantic-reset-system-include 'c-mode)
     (semantic-add-system-include "/usr/src/linux-2.4/include" 'c-mode)

It is also useful to find and install extra search engine back-ends,
such *Note (semantic-user)Create System Databases::.  Ebrowse is one
such back-end for C and C++ code.

You might create an ebrowse database for your C include files like this:

     M-x semanticdb-create-ebrowse-database RET /usr/include/ RET

This will create the database, save it, and add it to the database
search list for your C and C++ based projects.  These databases will be
created in your `~/.semanticdb' directory to be reloaded in future
Emacs sessions.

Unfortunately, EBROWSE does not support all the features needed by
semantic, so you will find that semantic will need to go and reparse
those files later when they are needed.

2.2.3 Project Include Path
--------------------------

Finding files included into a program file requires knowing the include
path.

Finding files within a project path is more complex.  One way is to
teach semantic about your project, and add an entry to
`semanticdb-project-roots'.  See *Note (semantic-user)Semanticdb Search
Configuration::, or *Note (semantic-user)SemanticDB project roots::.

Alternately, setup an EDE project.  Using the *note EDE project system:
(ede)top to allow finer grained control on how Semantic will find
header files.  You can use EDE to create a project and create your
Makefiles for you, or you can create a simple project that allows
configuration of just this piece is covered in *Note (ede)Simple
projects::.

One style of a simple project is the *note EDE CPP Root:
(ede)ede-cpp-root project.  This is a simple way to provide access to a
C/C++ project via EDE to Semantic.


File: semantic.info,  Node: Parsing Optimization,  Prev: Search Optimization,  Up: Installation/Basic Configuration

2.3 Parsing Optimization
========================

The semantic parsers generate the tags that form the basis of all the
semantic based tools, such as browsers and completion.  Keeping those
tags up to date can have performance implications.

Here are some common tasks you may be interested in:

2.3.1 Don't parse certain buffers
---------------------------------

You can inhibit parsing using the `semantic-inhibit-functions' variable.

 -- Variable: semantic-inhibit-functions
     List of functions to call with no arguments before semantic sets up
     a buffer.  If any of these functions returns non-`nil', the
     current buffer is not setup to use Semantic.

You could have this inhibit parsing in very large files, or files which
cause particular problems to semantic.

2.3.2 Parsing in idle time
--------------------------

Tags are usually kept up to date when Emacs is idle *Note
(semantic-user)Idle Scheduler::.  The semantic idle-scheduler
automatically updates the tags in various buffers before executing
specific idle modes, such as summary mode.

You might choose to tune the scheduler with some code like this in your
`.emacs' file:

     ;; Increase the delay before activation
     (setq semantic-idle-scheduler-idle-time 10)
     ;; Don't reparse really big buffers.
     (setq semantic-idle-scheduler-max-buffer-size 100000)

There is also a secondary idle services that runs after a longer delay.
The secondary idle service will perform large scale parsing of any
file semantic thinks you may need to reference, and then saves all the
databases.

You might want to tune the scheduler timer in your `.emacs' file like
this:

     ;; Increase the delay before doing slow work to 2 minutes.
     (setq semantic-idle-scheduler-work-idle-time 120)


File: semantic.info,  Node: Semantic manuals,  Next: Semantic Internals,  Prev: Installation/Basic Configuration,  Up: Top

3 Semantic manuals
******************

To know how to use applications enabled by semantic, *note the User's
Guide: (semantic-user)top.

If you are an application developer and need to know the functions and
concepts, *note the Application Development Manual:
(semantic-appdev)top.

To support a new language, *note the Language Support Developer's
Guide: (semantic-langdev)top.

To use the grammar writing environment, and write in the rule based
language, *note the Grammar Framework Manual: (grammar-fw)top.

For details on the original semantic LL parser, *note the Bovine Parser
Manual: (bovine)top.

For details on the Bison-like LALR parser, *note the Wisent Parser
Manual: (wisent)top.


File: semantic.info,  Node: Semantic Internals,  Next: Glossary,  Prev: Semantic manuals,  Up: Top

4 Semantic Internals
********************

This chapter provides an overview of the internals of semantic.  This
information would not be needed by neither application developers nor
grammar developers.

It would be useful mostly for the hackers who would like to learn more
about how semantic works.

* Menu:

* Parser code ::	Code used for the parsers
* Tag handling ::	Code used for manipulating tags
* Semanticdb ::         Code used in the semantic database
* Analyzer ::           Code used in the code analyzer
* Tools ::              Code used in user tools.
* Tests ::              Code used for testing.


File: semantic.info,  Node: Parser code,  Next: Tag handling,  Up: Semantic Internals

4.1 Parser code
===============

semantic parsing code is spread across a range of files.

`semantic.el'
     The core infrastructure sets up buffers for parsing, and has all
     the core parsing routines.  Most parsing routines are
     overloadable, so the actual implementation may be somewhere else.

`semantic-edit.el'
     Incremental reparse based on user edits.

`semantic-grammar.el'
`semantic-grammar.wy'
     Parser for the different grammar languages, and a major mode for
     editing grammars in Emacs.

`semantic-lex.el'
     Infrastructure for implementing lexical analyzers.  Provides macros
     for creating individual analyzers for specific features, and a way
     to combine them together.

`semantic-lex-spp.el'
     Infrastructure for a lexical symbolic preprocessor.  This was
     written to implement the C preprocessor, but could be used for
     other lexical preprocessors.

`bovine/bovine-grammar.el'
`bovine/bovine-grammar-macros.el'
`bovine/semantic-bovine.el'
     The "bovine" grammar.  This is the first grammar mode written for
     semantic and is useful for simple creating simple parsers.

`wisent/wisent.el'
`wisent/bison-wisent.el'
`wisent/semantic-wisent.el'
`wisent/semantic-debug-grammar.el'
     A port of bison to Emacs.  This infrastructure lets you create LALR
     based parsers for semantic.

`semantic-ast.el'
     Manage Abstract Syntax Trees for parsers.

`semantic-debug.el'
     Infrastructure for debugging grammars.

`semantic-util.el'
     Various utilities for manipulating tags, such as describing the tag
     under point, adding labels, and the all important
     `semantic-something-to-tag-table'.



File: semantic.info,  Node: Tag handling,  Next: Semanticdb,  Prev: Parser code,  Up: Semantic Internals

4.2 Tag handling
================

A tag represents an individual item found in a buffer, such as a
function or variable.  Tag handling is handled in several source files.

`semantic-tag.el'
     Basic tag creation, queries, cloning, binding, and unbinding.

`semantic-tag-write.el'
     Write a tag or tag list to a stream.  These routines are used by
     `semanticdb-file.el' when saving a list of tags.

`semantic-tag-file.el'
     Files associated with tags.  Goto-tag, file for include, and file
     for a prototype.

`semantic-tag-ls.el'
     Language dependant features of a tag, such as parent calculation,
     slot protection, and other states like abstract, virtual, static,
     and leaf.

`semantic-dep.el'
     Include file handling.  Contains the include path concepts, and
     routines for looking up file names in the include path.

`semantic-format.el'
     Convert a tag into a nicely formatted and colored string.  Use
     `semantic-test-all-format-tag-functions' to test different output
     options.

`semantic-find.el'
     Find tags matching different conditions in a tag table.  These
     routines are used by `semanticdb-find.el' once the database has
     been converted into a simpler tag table.

`semantic-sort.el'
     Sorting lists of tags in different ways.  Includes sorting a plain
     list of tags forward or backward.  Includes binning tags based on
     attributes (bucketize), and tag adoption for multiple references to
     the same thing.

`semantic-doc.el'
     Capture documentation comments from near a tag.



File: semantic.info,  Node: Semanticdb,  Next: Analyzer,  Prev: Tag handling,  Up: Semantic Internals

4.3 Semanticdb
==============

Semanticdb complexity is certainly an issue.  It is a rather hairy
problem to try and solve.

`semanticdb.el'
     Defines a "database" and a "table" base class.  You can
     instantiate these classes, and use them, but they are not
     persistent.

     This file also provides support for `semanticdb-minor-mode', which
     automatically associates files with tables in databases so that
     tags are _saved_ while a buffer is not in memory.

     The database and tables both also provide applicate cache
     information, and cache flushing system.  The semanticdb search
     routines use caches to save datastructures that are complex to
     calculate.

     Lastly, it provides the concept of "project root".  It is a system
     by which a file can be associated with the root of a project, so if
     you have a tree of directories and source files, it can find the
     root, and allow a tag-search to span all available databases in
     that directory hierarchy.

`semanticdb-file.el'
     Provides a subclass of the basic table so that it can be saved to
     disk.  Implements all the code needed to unbind/rebind tags to a
     buffer and writing them to a file.

`semanticdb-el.el'
     Implements a special kind of "system" database that uses Emacs
     internals to perform queries.

`semanticdb-ebrowse.el'
     Implements a system database that uses Ebrowse to parse files into
     a table that can be queried for tag names.  Successful tag hits
     during a find causes semantic to pick up and parse the reference
     files to get the full details.

`semanticdb-find.el'
     Infrastructure for searching groups semantic databases, and dealing
     with the search results format.

`semanticdb-ref.el'
     Tracks crossreferences.   Cross references are needed when buffer
     is reparsed, and must alert other tables that any dependant caches
     may need to be flushed.  References are in the form of include
     files.



File: semantic.info,  Node: Analyzer,  Next: Tools,  Prev: Semanticdb,  Up: Semantic Internals

4.4 Analyzer
============

The semantic analyzer is a complex engine which has been broken down
across several modules.  When the semantic analyzer fails, start with
`semantic-analyze-debug-assist', then dive into some of these files.

`semantic-analyze.el'
     The core analyzer for defining the "current context".  The current
     context is an object that contains references to aspects of the
     local context including the current prefix, and a tag list
     defining what the prefix means.

`semantic-analyze-complete.el'
     Provides `semantic-analyze-possible-completions'.

`semantic-analyze-debug.el'
     The analyzer debugger.  Useful when attempting to get everything
     configured.

`semantic-analyze-fcn.el'
     Various support functions needed by the analyzer.

`semantic-ctxt.el'
     Local context parser.  Contains overloadable functions used to move
     around through different scopes, get local variables, and collect
     the current prefix used when doing completion.

`semantic-scope.el'
     Calculate "scope" for a location in a buffer.  The scope includes
     local variables, and tag lists in scope for various reasons, such
     as C++ using statements.

`semanticdb-typecache.el'
     The typecache is part of `semanticdb', but is used primarilly by
     the analyzer to look up datatypes and complex names.  The
     typecache is bound across source files and builds a master lookup
     table for data type names.

`semantic-ia.el'
     Interactive Analyzer functions.  Simple routines that do
     completion or lookups based on the results from the Analyzer.
     These routines are meant as examples for application writers, but
     are quite useful as they are.

`semantic-ia-sb.el'
     Speedbar support for the analyzer, displaying context info, and
     completion lists.



File: semantic.info,  Node: Tools,  Next: Tests,  Prev: Analyzer,  Up: Semantic Internals

4.5 Tools
=========

These files contain various tools a user can use.

`semantic-idle.el'
     Idle scheduler for semantic.  Manages reparsing buffers after
     edits, and large work tasks in idle time.  Includes modes for
     showing summary help and pop-up completion.

`senator.el'
     The semantic navigator.  Provides many ways to move through a
     buffer based on the active tag table.

`semantic-decorate.el'
     A minor mode for decorating tags based on details from the parser.
     Includes overlines for functions, or coloring class fields based on
     protection.

`semantic-decorate-include.el'
     A decoration mode for include files, which assists users in
     setting up parsing for their includes.

`semantic-complete.el'
     Advanced completion prompts for reading tag names in the
     minibuffer, or inline in a buffer.

`semantic-imenu.el'
     Imenu support for using semantic tags in imenu.

`semantic-mru-bookmark.el'
     Automatic bookmarking based on tags.  Jump to locations you've been
     before based on tag name.

`semantic-sb.el'
     Support for semantic tag usage in Speedbar.

`semantic-util-modes.el'
     A bunch of small minor-modes that exposes aspects of the semantic
     parser state.  Includes `semantic-stickyfunc-mode'.

`document.el'
`document-vars.el'
     Create an update comments for tags.

`semantic-adebug.el'
     Extensions of `data-debug.el' for semantic.

`semantic-chart.el'
     Draw some charts from stats generated from parsing.

`semantic-elp.el'
     Profiler for helping to optimize the semantic analyzer.



File: semantic.info,  Node: Tests,  Prev: Tools,  Up: Semantic Internals

4.6 Tests
=========

`semantic-utest.el'
     Basic testing of parsing and incremental parsing for most supported
     languages.

`semantic-ia-utest.el'
     Test the semantic analyzer's ability to provide smart completions.

`semantic-utest-c.el'
     Tests for the C parser's lexical pre-processor.

`semantic-regtest.el'
     Regression tests from the older Semantic 1.x API.



File: semantic.info,  Node: Glossary,  Next: GNU Free Documentation License,  Prev: Semantic Internals,  Up: Top

Appendix A Glossary
*******************


     BNF
     In semantic 1.4, a BNF file represented "Bovine Normal Form", the
     grammar file used for the 1.4 parser generator.  This was a play on
     Backus-Naur Form which proved too confusing.


     bovinate
     A verb representing what happens when a bovine parser parses a
     file.


     bovine lambda
     In a bovine, or LL parser, the bovine lambda is a function to
     execute when a specific set of match rules has succeeded in
     matching text from the buffer.


     bovine parser
     A parser using the bovine parser generator.  It is an LL parser
     suitible for small simple languages.


     context


     LALR


     lexer
     A program which converts text into a stream of tokens by analyzing
     them lexically.  Lexers will commonly create strings, symbols,
     keywords and punctuation, and strip whitespaces and comments.


     LL


     nonterminal
     A nonterminal symbol or simply a nonterminal stands for a class of
     syntactically equivalent groupings. A nonterminal symbol name is
     used in writing grammar rules.


     overloadable
     Some functions are defined via `define-overload'.  These can be
     overloaded via ....


     parser
     A program that converts tokens to tags.


     tag
     A tag is a representation of some entity in a language file, such
     as a function, variable, or include statement.  In semantic, the
     word tag is used the same way it is used for the etags or ctags
     tools.

     A tag is usually bound to a buffer region via overlay, or it just
     specifies character locations in a file.


     token
     A single atomic item returned from a lexer.  It represents some set
     of characters found in a buffer.


     token stream
     The output of the lexer as well as the input to the parser.


     wisent parser
     A parser using the wisent parser generator.  It is a port of bison
     to Emacs Lisp.  It is an LALR parser suitable for complex
     languages.



File: semantic.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Glossary,  Up: Top

Appendix B GNU Free Documentation License
*****************************************

                        Version 1.1, March 2000

     Copyright (C) 2000  Free Software Foundation, Inc.
     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.


  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.


  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title
     distinct    from that of the Document, and from those of previous
     versions    (which should, if there were any, be listed in the
     History section    of the Document).  You may use the same title
     as a previous version    if the original publisher of that version
     gives permission.
     B. List on the Title Page, as authors, one or more persons or
     entities    responsible for authorship of the modifications in the
     Modified    Version, together with at least five of the principal
     authors of the    Document (all of its principal authors, if it
     has less than five).
     C. State on the Title page the name of the publisher of the
     Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license
     notice    giving the public permission to use the Modified Version
     under the    terms of this License, in the form shown in the
     Addendum below.
     G. Preserve in that license notice the full lists of Invariant
     Sections    and required Cover Texts given in the Document's
     license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section entitled "History", and its title, and add
     to    it an item stating at least the title, year, new authors, and
       publisher of the Modified Version as given on the Title Page.
     If    there is no section entitled "History" in the Document,
     create one    stating the title, year, authors, and publisher of
     the Document as    given on its Title Page, then add an item
     describing the Modified    Version as stated in the previous
     sentence.
     J. Preserve the network location, if any, given in the Document for
       public access to a Transparent copy of the Document, and
     likewise    the network locations given in the Document for
     previous versions    it was based on.  These may be placed in the
     "History" section.     You may omit a network location for a work
     that was published at    least four years before the Document
     itself, or if the original    publisher of the version it refers
     to gives permission.
     K. In any section entitled "Acknowledgements" or "Dedications",
     preserve the section's title, and preserve in the section all the
      substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
     unaltered in their text and in their titles.  Section numbers
     or the equivalent are not considered part of the section titles.
     M. Delete any section entitled "Endorsements".  Such a section
     may not be included in the Modified Version.
     N. Do not retitle any existing section as "Endorsements"    or to
     conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties-for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition
     of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgements", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:


       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.
If you have no Invariant Sections, write "with no Invariant
Sections" instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of "Front-Cover
Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: semantic.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
*****

 [index ]
* Menu:

* semantic-inhibit-functions:            Parsing Optimization.
                                                              (line  18)
* semantic-load-enable-all-exuberent-ctags-support: Canned Configuration.
                                                              (line  43)
* semantic-load-enable-code-helpers:     Canned Configuration.
                                                              (line  59)
* semantic-load-enable-excessive-code-helpers: Canned Configuration.
                                                              (line 119)
* semantic-load-enable-gaudy-code-helpers: Canned Configuration.
                                                              (line  90)
* semantic-load-enable-minimum-features: Canned Configuration.
                                                              (line  15)
* semantic-load-enable-semantic-debugging-helpers: Canned Configuration.
                                                              (line 131)



Tag Table:
Node: Top1107
Node: Overview1998
Node: Semantic Components6182
Node: Installation/Basic Configuration7602
Node: Canned Configuration8214
Ref: semantic-load-enable-minimum-features8800
Ref: semantic-enable-all-exuberent-ctags-support9954
Ref: semantic-load-enable-code-helpers10616
Ref: semantic-load-enable-gaudy-code-helpers11949
Ref: semantic-load-enable-excessive-code-helpers13164
Ref: semantic-load-enable-semantic-debugging-helpers13685
Node: Search Optimization14290
Node: Parsing Optimization17868
Ref: semantic-inhibit-functions18468
Node: Semantic manuals19758
Node: Semantic Internals20579
Node: Parser code21296
Node: Tag handling23050
Node: Semanticdb24719
Node: Analyzer26811
Node: Tools28734
Node: Tests30411
Node: Glossary30869
Ref: BNF31026
Ref: bovinate31231
Ref: bovine lambda31326
Ref: bovine parser31515
Ref: context31647
Ref: LALR31662
Ref: lexer31674
Ref: LL31894
Ref: nonterminal31904
Ref: overloadable32101
Ref: parser32215
Ref: tag32274
Ref: token32625
Ref: token stream32749
Ref: wisent parser32834
Node: GNU Free Documentation License33007
Node: Index52739

End Tag Table
