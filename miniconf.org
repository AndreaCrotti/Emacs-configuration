MINIMAL EMACS CONFIGURATION
* TODO See if it's possible to have python auto completion without ropemacs
* TODO Make the table of software versions regenerating every time
* TODO Write a function that setups all the possible paths automatically
* TODO Something about latex might also be necessary
* TODO See if it's worthy to byte compile everything or not

* Some useful functions
  We suppose that the global variable *conf* has been already set from the outside.
  
** Make path
#+begin_src emacs-lisp :tangle yes
  (defun make-path (path)
    (concat conf path))
#+end_src
 
** Gen path dirs
   All all the directories in the first level of the configuration directory to the load path.

#+begin_src emacs-lisp :tangle yes
(defun gen-path-dirs ()
  "Add to load path all the subdirectories of first level"
  (interactive)
  (message "adding all directories in the first level to the load-path")
  (dolist (dir (directory-files conf t))
    (if (and 
         (file-directory-p dir)
         (not (file-symlink-p dir)))
        (add-to-list 'load-path dir))))

(gen-path-dirs)
#+end_src

* Operating system detection
#+begin_src emacs-lisp :tangle yes
(defconst linux (string-match "linux" system-configuration))
(defconst mac (string-match "apple" system-configuration))
(defconst win (string-match "win" system-configuration))
#+end_src

** Mac configuration
#+begin_src emacs-lisp :tangle yes
(if mac
    (progn
      (add-to-list 'exec-path "/opt/local/bin")
      (setq ns-alternate-modifier (quote none))
      (setq ns-command-modifier (quote meta))))
#+end_src

* Org mode
** Info configuration
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'Info-default-directory-list "~/.emacs.d/org-mode/doc/")
#+end_src

** Clock configuration
#+begin_src emacs-lisp :tangle yes
;; Clock configuration
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
#+end_src

** Add eventually
   This hook enables to expand your KB very easily, every time you create a new org-file it will check if it's already in the agenda and asks to add it.
#+begin_src emacs-lisp :tangle yes
  (defun org-add-eventually()
    "Adding a file to org-agenda when saved"
    (interactive)
    (if (and
         (string= major-mode "org-mode")
         (not (member (abbreviate-file-name buffer-file-name) org-agenda-files))
         (yes-or-no-p "add the file to agenda?"))
        (org-agenda-file-to-front)))
  
  (add-hook 'before-save-hook 'org-add-eventually)
#+end_src

* Yasnippet
#+begin_src emacs-lisp :tangle yes
  (require 'yasnippet)
  
  (setq yas/root-directory
        (mapcar 'make-path
                '("yasnippet/" "my-snippets/")))
  
  ;; Maybe needed to set to fixed for some modes
  (setq yas/indent-line 'auto)
  
  (yas/initialize)
  
  (setq yas/ignore-filenames-as-triggers nil)
  
  (mapc 'yas/load-directory yas/root-directory)
  
  ;; don't make backups in the snippet folder, they mess up yasnippet
  (add-to-list 'backup-directory-alist '("/my-snippets/" . "/tmp/"))
#+end_src

* Auto complete
** Importing all packages
#+begin_src emacs-lisp :tangle yes
  ;;; Require
  (require 'auto-complete)
  ;; Various configurations
  (require 'auto-complete-config)
  (require 'auto-complete-extension nil t) ;optional
  (require 'auto-complete-yasnippet nil t) ;optional
  (require 'auto-complete-semantic nil t)  ;optional
#+end_src  

** Setting up
#+begin_src emacs-lisp :tangle yes
  ;; Generic setup.
  (global-auto-complete-mode t)           ;enable global-mode
  
  (setq ac-auto-start 3)                  ;automatically start
  (setq ac-override-local-map nil)        ;don't override local map
  
  (define-key ac-complete-mode-map "\C-n" 'ac-next)
  (define-key ac-complete-mode-map "\C-p" 'ac-previous)
#+end_src

** Define allowed modes
#+begin_src emacs-lisp :tangle yes
(setq ac-modes 
      '(python-mode
        emacs-lisp-mode
        lisp-interaction-mode
        ))
(add-to-list 'ac-trigger-commands 'org-self-insert-command) ; if you want enable auto-complete at org-mode, uncomment this line

#+end_src

** More sources for all modes
#+begin_src emacs-lisp :tangle yes
;; The sources for common all mode.
(custom-set-variables
 '(ac-sources
   '(
     ac-source-yasnippet ;this source need file `auto-complete-yasnippet.el'
     ;; ac-source-semantic    ;this source need file `auto-complete-semantic.el'
     ac-source-imenu
     ac-source-abbrev
     ac-source-words-in-buffer
     ac-source-files-in-current-dir
     ac-source-filename
     )))
#+end_src

** Elisp configuration
#+begin_src emacs-lisp :tangle yes
(dolist (hook (list
               'emacs-lisp-mode-hook
               'lisp-interaction-mode
               ))
  (add-hook hook '(lambda ()
                    (add-to-list 'ac-sources 'ac-source-symbols))))
#+end_src
  
* Python mode
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path (concat conf "python-mode/"))
(add-to-list 'auto-mode-alist (cons '("\\.py$" . python-mode)))
(add-to-list 'interpreter-mode-alist (cons '("python" . python-mode)))
(autoload 'python-mode "python-mode" "Python editing mode." t)
#+end_src

* General settings
** Aliasing and other useful shortcuts
#+begin_src emacs-lisp :tangle yes
(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)
(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'rs 'replace-string)
(defalias 'qs 'query-replace)
(defalias 'ac 'auto-complete-mode)
(defalias 'go 'google-search-it)
(defalias 'gs 'google-search-selection)
(defalias 'spell 'flyspell-mode)

(defalias 'ys 'yas/reload-all)
(defalias 'yv 'yas/visit-snippet-file)

(defalias 'ascii 'org-export-as-ascii)
(defalias 'html 'org-export-as-html-and-open)
(defalias 'pdf 'org-export-as-pdf-and-open)
(defalias 'box 'comment-box)
(defalias 'rb 'revert-buffer)

(defalias 'sh 'shell)

(defalias 'ws 'whitespace-mode)
(defalias 'bu 'browse-url)
#+end_src   

** Custom file
#+begin_src emacs-lisp :tangle yes
(setq custom-file (concat base "custom.el"))
#+end_src

** Showing more things
#+begin_src emacs-lisp :tangle yes
(display-time-mode 1)
(transient-mark-mode 1)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(show-paren-mode t)
(column-number-mode t)
;; always truncate lines (useful for netbook), not working yet in ORG MODE
(setq truncate-lines nil)
;; Setting indent-tabs-mode for only spaces
(setq-default indent-tabs-mode nil)
#+end_src

** IDO mode
#+begin_src emacs-lisp :tangle yes
(require 'ido)
(ido-mode t)
#+end_src

* Flymake
** Setting up flymake
#+begin_src emacs-lisp :tangle yes
(require 'flymake)
   
(defun activate-flymake ()
  "Activates flymake when real buffer and you have write access"
  (if (and
       (buffer-file-name)
       (file-writable-p buffer-file-name))
      (flymake-mode t)))
#+end_src

** Adding errors to modeline
   With this the error output of othe current line will appear right below in the modeline
#+begin_src emacs-lisp :tangle yes
(defun my-flymake-show-help ()
  (when (get-char-property (point) 'flymake-overlay)
    (let ((help (get-char-property (point) 'help-echo)))
      (if help (message "%s" help)))))

(add-hook 'post-command-hook 'my-flymake-show-help)
#+end_src

** Flymake for python
   
#+begin_src emacs-lisp :tangle yes
(defun flymake-python-init () 
  (let* ((temp-file (flymake-init-create-temp-buffer-copy 
		     'flymake-create-temp-inplace)) 
	 (local-file (file-relative-name 
		      temp-file 
		      (file-name-directory buffer-file-name)))) 
    (list "pycheckers" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks 
	     '("\\.py\\'" flymake-python-init))

;; Using function is preferred when quoting functions
(add-hook 'python-mode-hook (function activate-flymake))
#+end_src

* Versions of software
  In this table we collect the actual version of the packages used

  | PKG           | version                                      |
  |---------------+----------------------------------------------|
  | emacs         | GNU Emacs 23.1.50.1                          |
  | python mode   |                                              |
  | yasnippet     | yasnippet (version 0.6.1b)                   |
  | auto-complete |                                              |
  | org-mode      | Org-mode version 6.35f (release_6.35f.dirty) |
  #+TBLFM: @2$2='(emacs-version)::@3$2='(yas/about)::@5$2='(org-version)
