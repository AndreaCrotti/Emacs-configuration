;;; python-mode-shell-install.el --- Installing python, python3, ipython and other python shells


;; Copyright (C) 2011  Andreas Roehler

;; Author: Andreas Roehler <andreas.roehler@online.de>
;; Keywords: languages, processes, python, oop

;; Python-components-mode started from python-mode.el
;; and python.el, where Tim Peters, Barry A. Warsaw,
;; Skip Montanaro, Ken Manheimer, Dave Love and many
;; others wrote major parts. Author of ipython.el's
;; stuff merged is Alexander Schmolck.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Provides top-level commands above py-shell

;;; Code:


(defcustom py-installed-shells
  '("ipython" "python2" "python3" "python2.7" "python" "jython")
  "Python-mode will generate commands opening shells mentioned here. Edit this list \w resp. to your machine. "
  :type '(repeat string)
  :group 'python)

(defun py-provide-installed-shells-commands (&optional force)
  "Reads py-installed-shells, provides commands opening these shell. "
  (interactive "P") 
  (let ((force (eq 4 (prefix-numeric-value force))) 
        (temp-buffer "*Python Shell Install Buffer*")
        done)
    (unless force
      (dolist (ele py-installed-shells)
        (unless (commandp (car (read-from-string ele)))
          (setq done t))))
    (when (or force done)
      (set-buffer (get-buffer-create temp-buffer))
      (erase-buffer)
      (insert ";; Commands calling installed python shells generated by python-mode's python-mode-shell-install.el.
;; Install these commands, to get it loaded next time python-mode starts.
;; Copying it onto the end of python-mode-shell-install.el should do it. 
")
      (newline)
      (dolist (ele py-installed-shells)
        (if force
            (progn 
              (insert (concat "(defun " ele " (&optional argprompt)
  \"Start an interactive "))
              (if (string= "ipython" ele)
                  (insert "IPython")
                (insert (capitalize ele)))
              (insert (concat " interpreter in another window.
   With optional \\\\[universal-argument] user is prompted
    for options to pass to the "))
              (if (string= "ipython" ele)
                  (insert "IPython")
                (insert (capitalize ele)))
              (insert (concat " interpreter. \"
  (interactive)
  (let ((py-shell-name \"" ele "\"))
    (py-shell argprompt)))\n\n")))
          (unless (commandp (car (read-from-string ele)))
            (insert (concat "(defun " ele " (&optional argprompt)
  \"Start an interactive "))
            (if (string= "ipython" ele)
                (insert "IPython")
              (insert (capitalize ele)))
            (insert (concat " interpreter in another window.
   With optional \\\\[universal-argument] user is prompted
    for options to pass to the "))
            (if (string= "ipython" ele)
                (insert "IPython")
              (insert (capitalize ele)))
            (insert (concat " interpreter. \"
  (interactive)
  (let ((py-shell-name \"" ele "\"))
    (py-shell argprompt)))\n\n")))))))
  (emacs-lisp-mode) 
  (switch-to-buffer (current-buffer)))

;; Commands below are generated by `py-provide-installed-shells-commands' reading `py-installed-shells' - installed here, to get it loaded next time python-mode starts.

(defun ipython (&optional argprompt)
  "Start an interactive Ipython interpreter in another window.
   With optional \\[universal-argument] user is prompted
    for options to pass to the Ipython interpreter. "
  (interactive)
  (let ((py-shell-name "ipython"))
    (py-shell argprompt)))

(defun python2 (&optional argprompt)
  "Start an interactive Python2 interpreter in another window.
  With optional \\[universal-argument] user is prompted
    for options to pass to the Python2 interpreter.
    "
  (interactive)
  (let ((py-shell-name "python2"))
    (py-shell argprompt)))

(defun python3 (&optional argprompt)
  "Start an interactive Python3 interpreter in another window.
  With optional \\[universal-argument] user is prompted
    for options to pass to the Python3 interpreter.
    "
  (interactive)
  (let ((py-shell-name "python3"))
    (py-shell argprompt)))

(defun python2.7 (&optional argprompt)
  "Start an interactive Python2.7 interpreter in another window.
  With optional \\[universal-argument] user is prompted
    for options to pass to the Python2.7 interpreter.
    "
  (interactive)
  (let ((py-shell-name "python2.7"))
    (py-shell argprompt)))

(defun python (&optional argprompt)
  "Start an interactive Python interpreter in another window.
  With optional \\[universal-argument] user is prompted
    for options to pass to the Python interpreter.
    "
  (interactive)
  (let ((py-shell-name "python"))
    (py-shell argprompt)))

(defun jython (&optional argprompt)
  "Start an interactive Jython interpreter in another window.
  With optional \\[universal-argument] user is prompted
    for options to pass to the Jython interpreter.
    "
  (interactive)
  (let ((py-shell-name "jython"))
    (py-shell argprompt)))



(provide 'python-mode-shell-install)
;;; python-mode-shell-install.el ends here

