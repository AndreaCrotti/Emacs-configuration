
ESS User Poll Tally

Stat package used with ESS
R	    43
SAS	     7
JAGS	     6
Stata	     5
Splus	     4
BUGS	     1
Other	     1   Sage?

emacs used with ESS
GNU Emacs   42
XEmacs	     3
Aquamacs     2
Other	     0

OS used with ESS
Linux	    37
Windows	    23
Mac OS X     9
Solaris	     3
Other	     1	 Cygwin


Feature Requests

Kevin Wright: 

I want to change the background color of code chunks in noweb buffers.


Erik Iverson:

I think ESS is very feature complete at this point.  The only thing
I've looked at that seems interesting is some sort of 'intellisense'
feature that uses R's built-in completion mechanism to temporarily
display available completions using something like company-mode,
autocomplete, or completion-ui.  I had at one point something that
almost worked, but I believe the library it was built in,
company-mode, has now changed significantly.

Another separate point is that the manual could be slightly updated to
keep up with current features.  For example, the main evaluation
command in R buffers, C-c C-c, is not documented.  A great feature for
showing R function arguments when the '(' key is pressed only shows up
in the Changelog, and is claimed to be on be default
(ess-r-args-electric-paren), when that no longer seems to be the case.
Simple features like this can draw users to ESS who might not know why
it is useful to them otherwise.


Josh Wiley:

This may be windows centric, but it would be minorly convenient if
options("width") in R was paired with the size of the window in Emacs.


Brendan Halpin:

Clearer documentation - what I know how to do I found out often by
trial and error, and the mailing list.


Bill Venables:

Better default customisation of iESS - nothing that can't be fixed
with a hook, though.


Felix Andrews:

ESS eval seems to be very slow: when I do C-c C-b it takes a very long
time and there is no visual indication that anything is happening (it
says "Starting evaluation...").  I know this can be avoided using
ess-eval-visibly-p but it would often be helpful to see the code
echoed as well.


Kjetil Halvorsen:

A good cheatsheet to print and put on the wall. 


Andreas Kiermeier:

When writing code using lattice (e.g. xyplot) and I have a panel
function, then C-c C-c when pressed inside the panel function only
submits the panel function rather than the whole plotting
expression. I would love if this could be extended (same goes for
apply functions and probably others) to cover the whole expression (or
even 'paragraph') rather than just the panel function.


Gray Calhoun:

I'd like to be able to direct graphical output to a buffer, have
graphics with multiple pages sent to multiple buffers, and have
multiple graphics open at a time.


Ista Zahn:

Function/variable completion in script files (maybe this already is
supposed to work, but for me completion only works in interactive
sessions).


Gerhard Schon:

For consulting, I need to use SPSS 18. It would be nice, to interact
with SPSS 18.


Derek Eder:

Easier configuration!  "font lock" and "visible execution" are 2
features which I always have trouble turning off (on multiple
machines) because I can never remember where they are in the
configuration menus.


Paul Hewson:

Object browser (e.g. open another frame listing variable names of a dataframe)


Deepayan Sarkar:

Not have R output be fontified as if it were R code.


David Carslaw:

The one feature I really miss is the showing of function arguments in
the R buffer.  I think I saw an explanation for why this is not made
available as "the source is real" paradigm.  However, showing the
function options in the R buffer in my view would be very useful and
not take anything away from the "source is real" approach.  The simple
reason is it is difficult to remember what the options are!  It's very
useful when writing the scripts - where it is available.  RKward does
this too and it's useful.


Gerald Jean:

Having function arguments show up in the mini-buffer UNTIL the
closing parenthesis is typed.  By the way, in R it shows up briefly,
but not at all in Splus; would be great to have it for all "S"
variants.


Charles Berry:

Handle \Sexpr{}'s in Sweave code.

How 'about

     ess-eval-sexpr

     Tangle the current contents of \Sexpr{ } and send it to the
     inferior ESS process.


     ess-eval-sexprs-in-region

     Tangle the contents of \Sexpr{ }'s in region and send them to the
     inferior ESS process. (Maybe even open a *Sexpr* buffer (say) and
     place the region contents in that buffer with the \Sexpr{}'s
     replaced by their printed results.)

More than a few times, I have had Sweave terminate with an error or
deliver unreadable results because of a silly error in an \Sexpr.


Sven Hartenstein:

I am sometimes annoyed by emacs "popup" windows, e.g. after expanding
some string or when a R help buffer was opened. My request would be a
simple key binding that - whatever the current window layout and
active buffers are - gives me my two pane view with the latest *.R
file as the active buffer in the upper 3/4 of the frame and the R
process the other 1/4 of the frame.


Francois Pepin:

I haven't looked recently to see how hard this currently is, but I
often run R on another linux machine through ssh and screen.  I would
love it if there was an easy way to connect ESS to the other R
instance more or less seamlessly. Last time I looked, the proposed
solutions seemed to be a bit clunky.


Patrick Connolly and Emanuel Heitlinger:

A clever way of dealing with the unbalanced quotes (to R's way of
thinking) that can be returned to Emacs from a bash call.  The `
character screws up the font colouring.  Can't imagine how it could be
done, and I realize it's really a bash issue, but I'd be very grateful
if someone could work out a way of dealing with it.  I invariably see
colours as though it's all a string irrespective of function names or
anything else.  


Brian Diggs:

Interactive integration with SAS on Windows.  I realize this is a
problem with SAS, not ESS, though.


Tengfei Yin:

I would say, supporting more with Rsweave, especially some convenient key
binding.  That may require more work with AUCTeX guys, I don't know.  It 
will be wonderful if I can just press Ctrl-C C, Rnw --> Latex->pdf viewer,
and all the error messages could show up and I don't have to open another 
TeX file and click Ctrl-C C to see the output


Keith Ponting:

(Vaguely related to other comments about font locking, which I second,
but probably an issue for two-mode-mode rather than for ESS) I use
Sweave a lot with emacs two-mode-mode. When in an ESS block (for which I
use \begin{Scode}...\end{Scode}) the font locking is often corrupted by
characters in the rest of the file. It appears that the two modes are
not completely isolated, so that an unbalanced $ in an ESS block will
cause the LaTeX sections to be treated as in math mode, conversely
unbalanced ' in the LaTeX sections causes the ESS sections to be treated
as strings.  There is a work-around - adding the balancing symbol as a 
comment in the appropriate language, but it does take a bit of finding 
sometimes.


Jeff Arnold:

I would like to see closer integration with CEDET (http://cedet.sourceforge.net/); adding the ESS languages to CEDET would open up a lot of development environment tools without reinventing the wheel. This would require writing a grammar for the parser for each language, but external parsers like etags/ctags can be used to bootstrap language support.

I also find the fact that ESS includes several unrelated languages to be confusing.  From what I have seen of the code, there doesn't appear to much shared code between the S/R, SAS, Stata, and BUGS/JAGS parts of ESS.  I found this confusing both as a user and as a contributor, primarily because sometimes it is not immediately clear whether an ess-* function is generic to all the languages, or just a S/R related function.  Refactoring the ESS package into four major modes (S, SAS, Stata, and BUGS) released by the ESS project would seem to make for a cleaner code base.  Consistency among the major modes could still be enforced through conventions for the functions and key-bindings included in a major mode.


John Maindonald:

A GUI interface to commonly used commands, organised
structured a/c the general nature of the command.  There
are a few Emacs commands that should also be noted,
in a separate category.  You might want to take a poll on
which are the commands that get used, or would be used
if one could remember them:

<CRTL-C><CTRL-D>
<CRTL-C><CTRL-L>
<CTRL-C><CTRL-P>

<CRTL-X><CTRL-V>
<CRTL-X><B>
<CRTL-X><CTRL-B>
<CRTL-X>5F

<ESC>p
<ESC>n
<ESC>;  (with region selected)
<ESC><CTRL>\    and <ESC>x 1
<ESC><RET>
<ESC>r
<ESC>x ess-rdired
<ESC>x occur <RET> << RET  (lines with <<)
<ESC>-x ess-font-lock-

Commands for creating & handling transcript files:
<ESC>X <CTRL-C><CTRL-W>


Don MacQueen:

An option to send R output to a separate window, with the commands
that caused the output echoed before the output.


Ross Boylan:

I wish that ?foo, where foo is a non-existent
command, didn't leave a *help[R](foo)* buffer lying around.


Johan Sandblom:

Some manner of font-lock integration with AUCTeX (I use mmm-mode)
though I realize that may be more a matter for AUCTeX.

